//
// @author wesen
// @copyright 2018-2019 wesen <wesen-ac@web.de>
//

//
// String utils module for ac-gema-mode
//
// Provides various string util functions
//

//
// Replaces a part of a string with a sub string and returns the result.
//
// @param String $arg1 The string
// @param String $arg2 The replacement string
// @param int $arg3 The start position
// @param int $arg4 The end position (optional)
//
// @return String The modified string
//
const substr_replace [

  if (|| (< $numargs 3) (|| (= (strlen $arg1 0)) (|| (= (strlen $arg2 0))))) [
    return $arg1;
  ][

    substrreplace_initialString = $arg1;
    substrreplace_replacementString = $arg2;
    substrreplace_startPosition = $arg3;

    substrreplace_initialStringLength = (strlen $substrreplace_initialString);

    // Calculate end position
    if (> $numargs 3) [
      if (< $arg4 0) [
        substrreplace_endPosition = (+ $substrreplace_initialStringLength $arg4);
      ][
        substrreplace_endPosition = $arg4;
      ]
    ][
      substrreplace_endPosition = $substrreplace_initialStringLength;
    ]

    if (<= $substrreplace_startPosition $substrreplace_endPosition) [

      // Extract the part left from the part that will be replaced
      if (<= $substrreplace_startPosition 0) [
        substrreplace_leftPart = "";
      ][
        substrreplace_leftPart = (substr $substrreplace_initialString 0 $substrreplace_startPosition);
      ]

      // Extract the part right from the part that will be replaced
      if (>= $substrreplace_endPosition $substrreplace_initialStringLength) [
        substrreplace_rightPart = "";
      ][
        substrreplace_rightPart = (substr $substrreplace_initialString (+ $substrreplace_endPosition 1));
      ]

      // Glue together the left part, the replacement and the right part
      return (concatword $substrreplace_leftPart $substrreplace_replacementString $substrreplace_rightPart);

    ][
      return $substrreplace_initialString;
    ]

  ]

]

//
// Returns a string repeated x times.
//
// @param String $arg1 The string that will be repeated
// @param int $arg2 The number of repeats
//
// @return String The repeated string
//
const strrepeat [

  if (< $numargs 2) [
    return $arg1;
  ][

    strrepeat_repeatString = $arg1;
    strrepeat_numberOfRepeats = $arg2;

    strrepeat_resultString = "";
    loop i $strrepeat_numberOfRepeats [
      strrepeat_resultString = (concatword $strrepeat_resultString $strrepeat_repeatString);
    ]

    return $strrepeat_resultString;

  ]

]

//
// Counts and returns the number of occurrences of a substring inside a string.
//
// @param String $arg1 The haystack
// @param String $arg2 The needle
//
// @return int The number of occurrences
//
const substr_count [

  if (|| (< $numargs 2) (|| (strcmp $arg1 "") (strcmp $arg2 ""))) [
    return -1;
  ][

    substrcount_haystack = $arg1;
    substrcount_needle = $arg2;
    substrcount_needleLength = (strlen $substrcount_needle);

    substrcount_needlePosition = (strpos $substrcount_haystack $substrcount_needle);
    if (!= $substrcount_needlePosition -1) [
      substrcount_remainingString = (substr $substrcount_haystack (+ $substrcount_needlePosition $substrcount_needleLength));
      return (+ 1 (substr_count $substrcount_remainingString $substrcount_needle));

    ][
      return 0;
    ]

  ]

]

//
// Checks if a string contains at least one needle of a list of needles.
//
// @param String $arg1 The string that will be searched (haystack)
// @param String[] $arg2 The strings to search for (needles)
//
// @return int 1 if the string contains at least one of the needles, 0 otherwise
//
const strstr_array [

  if (|| (< $numargs 2) (|| (strcmp $arg1 "") (strcmp $arg2 ""))) [
    return -1;
  ][

    searchString = $arg1;
    needles = $arg2;

    searchStringContainsNeedle = 0;
    looplist $needles needle [
      if (strstr $searchString $needle) [
        searchStringContainsNeedle = 1;
        break;
      ]
    ]

    return $searchStringContainsNeedle;

  ]

]
