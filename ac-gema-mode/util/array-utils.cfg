//
// @author wesen
// @copyright 2018-2020 wesen <wesen-ac@web.de>
//

//
// Array utils module for ac-gema-mode
//
// Provides various array functions.
// Multi dimensional arrays are realized by using increasing numbers of spaces to separate the array items
// (e.g. Dimension 1: 1 Space, Dimension 2: 2 spaces, Dimension 3: 3 spaces, etc.).
//
// Requires:
//   * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;


// Public Functions

//
// Returns the number of elements inside an array.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
//
// @return int The number of elements inside the array
//
// @example `array_length "a b c" " "` Returns 3
// @example `array_length "a  b c" "  "` Returns 2
//
const array_length [

  if (|| (< $numargs 2) (strcmp $arg2 "")) [
    return -1;
  ][
    if (strcmp $arg1 "") [
      return 0;
    ][
      return (+ (substr_count $arg1 $arg2) 1);
    ]
  ]

]

//
// Returns a part of an array.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int startIndex ($arg3) The start index
// @param int endIndex ($arg4) The end index (optional)
//
// @return string The partial array or an empty string if the start or end index are invalid
//
// @example `array_slice "a b c" " " 1` Returns "b c"
// @example `array_slice "a b c" " " 1 1` Returns "b"
//
const array_slice [

  arrayslice_array = $arg1;
  arrayslice_arraySeparator = $arg2;
  arrayslice_numberOfArguments = $numargs;

  // Get the start index
  arrayslice_startIndex = (array_getRealIndex $arrayslice_array $arrayslice_arraySeparator $arg3);
  if (= $arrayslice_startIndex -1) [
    return "";
  ][

    // Get the end index
    if (> $arrayslice_numberOfArguments 3) [
      arrayslice_endIndex = (array_getRealIndex $arrayslice_array $arrayslice_arraySeparator $arg4);
    ][
      arrayslice_endIndex = (- (array_length $arrayslice_array $arrayslice_arraySeparator) 1);
    ]

    if (> $arrayslice_startIndex $arrayslice_endIndex) [
      return "";
    ][

      // Calculate sub string start and end position
      arrayslice_subStringStart = (array_getIndexStartPosition $arrayslice_array $arrayslice_arraySeparator $arrayslice_startIndex);
      arrayslice_subStringEnd = (array_getIndexEndPosition $arrayslice_array $arrayslice_arraySeparator $arrayslice_endIndex);

      // Extract the sub string
      arrayslice_subStringLength = (+ (- $arrayslice_subStringEnd $arrayslice_subStringStart) 1);
      return (substr $arrayslice_array $arrayslice_subStringStart $arrayslice_subStringLength);

    ]

  ]

]

//
// Fills an array with empty fields until it reaches a specific size.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int targetSize ($arg3) The target size of the array
//
// @return string The filled array
//
// @example `array_pad "a b" " " 4` Returns "a b <empty> <empty>"
//
const array_pad [

  if (|| (< $numargs 3) (|| (strcmp $arg2 "") (= $arg3 0))) [
    return $arg1;
  ][

    arraypad_array = $arg1;
    arraypad_arraySeparator = $arg2;
    arraypad_targetArraySize = $arg3;

    if (strcmp $arraypad_array "") [
      arraypad_resultArray = "<empty>";
      arraypad_numberOfPadItems = (- $arraypad_targetArraySize 1);
    ][
      arraypad_resultArray = $arraypad_array;

      arraypad_arrayLength = (array_length $arraypad_array $arraypad_arraySeparator);
      arraypad_numberOfPadItems = (- $arraypad_targetArraySize $arraypad_arrayLength);
    ]

    loop arraypad_i $arraypad_numberOfPadItems [
      arraypad_resultArray = (concatword $arraypad_resultArray $arraypad_arraySeparator "<empty>");
    ]

    return $arraypad_resultArray;

  ]

]

//
// Reads and returns one entry of an array.
//
// @param string array ($arg1) The array
// @param int[] dimensionIds ($arg2) The dimension ids
//
// @return string The content of the specified index
//
// @example `array_get "a b  c d" "1 0"` Returns "c"
// @example `array_get "a b  c d" "1"` Returns "c d"
//
alias array_get [

  arrayget_array = $arg1;
  arrayget_dimensionIndexes = (array_truncateSupernumerousDimensions $arrayget_array $arg2);

  if (= $arrayget_dimensionIndexes -1) [
    return "";
  ][

    // Fetch the index inside the current dimension
    arrayget_currentDimension = (array_getNumberOfDimensions $arrayget_array);
    arrayget_currentDimensionIndex = (at $arrayget_dimensionIndexes 0);

    // Generate the dimension separator for the current dimension
    arrayget_arraySeparator = (strrepeat " " $arrayget_currentDimension);

    // Extract the array item
    arrayget_arrayItem = (array_slice $arrayget_array $arrayget_arraySeparator $arrayget_currentDimensionIndex $arrayget_currentDimensionIndex);

    if (= (listlen $arrayget_dimensionIndexes) 1) [
      // This is the last dimension (The place where the value will finally be read)
       if (strcmp $arrayget_arrayItem "<empty>") [
        return "";
      ][
        return $arrayget_arrayItem;
      ]

    ][
      // Call this function again for the sub dimension
      return (array_get $arrayget_arrayItem (array_slice $arrayget_dimensionIndexes " " 1));
    ]
  ]

]

//
// Sets the value of a specified array index.
// If the index exists the former value will be replaced by the new value.
// If the value is empty the index will be unset.
//
// @param string array ($arg1) The array
// @param int[] dimensionIds ($arg2) The dimension ids
// @param string newValue ($arg3) The value to set at the specified position
//
// @return string The modified array
//
// @example `array_set "a b  c d" "1 0" new` Returns "a b  new d"
// @example `array_set "a b  c d  <empty>  5 6" "3"` Returns "a b  c d"
//
const array_set [

  arrayset_currentDimension = (array_getHighestDefinedDimension $arg1 $arg2);
  if (= $arrayset_currentDimension -1) [
    return $arg1;
  ][

    // Fetch input arguments
    arrayset_array = $arg1;
    arrayset_dimensionIndexes = $arg2;
    arrayset_value = $arg3;

    push arrayset_currentDimensionIndex (at $arrayset_dimensionIndexes 0);
    push arrayset_arraySeparator (strrepeat " " $arrayset_currentDimension);

    // Fill the fields until the target index with "<empty>" tags (including the target index)
    push arrayset_resultArray (array_pad $arrayset_array $arrayset_arraySeparator (+ $arrayset_currentDimensionIndex 1));

    // Get the replace value for the array item of this dimension
    if (= (listlen $arrayset_dimensionIndexes) 1) [
      // This is the last dimension (The place where the value will finally be changed)
      arrayset_arrayItemReplace = $arrayset_value;
    ][

      // There are more dimensions to go, call this function again with modified parameters
      arrayset_arrayItem = (array_get $arrayset_resultArray $arrayset_currentDimensionIndex);
      arrayset_remainingDimensionIndexes = (array_slice $arrayset_dimensionIndexes " " 1);

      arrayset_arrayItemReplace = (array_set $arrayset_arrayItem $arrayset_remainingDimensionIndexes $arrayset_value);

    ]

    if (strcmp $arrayset_arrayItemReplace "") [
      arrayset_arrayItemReplace = "<empty>";
    ]

    arrayset_result = (array_replace $arrayset_resultArray $arrayset_arraySeparator $arrayset_currentDimensionIndex $arrayset_arrayItemReplace);

    // The variables that were temporarily changed with "push" are reverted back to their previous state with "pop"
    // This is necessary because recursive calls also overwrite the content of the variables that are used inside the functions
    pop arrayset_resultArray;
    pop arrayset_arraySeparator;
    pop arrayset_currentDimensionIndex;

    return (array_trim $arrayset_result);

  ]

]


// Private Functions

//
// Converts negative indexes to (array_length - <index>), checks if the index is valid and returns the resulting index.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int index ($arg3) The index
//
// @return int The real index or -1 if the index is not valid
//
const array_getRealIndex [

  if (|| (< $numargs 3) (|| (strcmp $arg1 "") (|| (strcmp $arg2 "") (strcmp $arg3 "")))) [
    return -1;
  ][

    arrayrealindex_array = $arg1;
    arrayrealindex_arraySeparator = $arg2;
    arrayrealindex_arrayLength = (array_length $arrayrealindex_array $arrayrealindex_arraySeparator);
    arrayrealindex_index = (mod $arg3 $arrayrealindex_arrayLength);

    // Convert negative indexes to (array_length - <index>)
    if (< $arrayrealindex_index 0) [
      arrayrealindex_index = (+ $arrayrealindex_arrayLength $arrayrealindex_index);
    ]

    return $arrayrealindex_index;
  ]

]

//
// Returns the start position of an array index inside the total array string.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int index ($arg3) The index
//
// @return int The start position of the index inside the array
//
// @example `array_getIndexStartPosition "hello world" " " 1` Returns 6
//
const array_getIndexStartPosition [

  arraystartposition_index = (array_getRealIndex $arg1 $arg2 $arg3);
  if (= $arraystartposition_index -1) [
    return -1;
  ][

    if (= $arraystartposition_index 0) [
      // Assume that there is no leading whitespace and return 0
      return 0;
    ][

      arraystartposition_array = $arg1;
      arraystartposition_arraySeparator = $arg2;

      // Get the start position of the array separator left from the target index
      arraySeparatorStartPosition = (strpos $arraystartposition_array $arraystartposition_arraySeparator (- $arraystartposition_index 1));
      return (+ $arraySeparatorStartPosition (strlen $arraystartposition_arraySeparator));
    ]

  ]

]

//
// Returns the end position of an array index inside the total array string.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int index ($arg3) The index
//
// @return int The end position of the index inside the array string
//
// @example `array_getIndexEndPosition "hello world" " " 0` Returns 4
//
const array_getIndexEndPosition [

  arrayendposition_index = (array_getRealIndex $arg1 $arg2 $arg3);
  if (= $arrayendposition_index -1) [
    return -1;
  ][

    arrayendposition_array = $arg1;
    arrayendposition_arraySeparator = $arg2;
    arrayendposition_arrayLength = (array_length $arrayendposition_array $arrayendposition_arraySeparator);

    if (= $arrayendposition_index (- $arrayendposition_arrayLength 1)) [
      // Assume that there is no trailing whitespace and return the length of the array string
      return (- (strlen $arrayendposition_array) 1);
    ][
      // Get the start position of the array separator right from the target index
      arraySeparatorStartPosition = (strpos $arrayendposition_array $arrayendposition_arraySeparator $arrayendposition_index);
      return (- $arraySeparatorStartPosition 1);
    ]

  ]

]

//
// Returns the number of dimensions in an array.
// This is done by recursively calling this function and increasing the dimension by one per call.
//
// @param string array ($arg1) The array
// @param int lastFoundDimension ($arg2) The dimension that was found in an earlier cycle of this function
//
// @return int The number of dimensions in the array
//
// @example `array_getNumberOfDimensions "a"` Returns 1
// @example `array_getNumberOfDimensions "a b  c d"` Returns 2
//
const array_getNumberOfDimensions [

  if (|| (< $numargs 1) (strcmp $arg1 "")) [
    return 0;
  ][

    arraymaxdimension_array = $arg1;

    if (> $numargs 1) [
      arraymaxdimension_numberOfDimensions = $arg2;
    ][
      arraymaxdimension_numberOfDimensions = 1;
    ]

    // Generate the dimension separator
    arraymaxdimension_dimensionSeparator = (strrepeat " " (+ $arraymaxdimension_numberOfDimensions 1));

    if (= (strpos $arraymaxdimension_array $arraymaxdimension_dimensionSeparator) -1) [
      return $arraymaxdimension_numberOfDimensions;
    ][
      ++ arraymaxdimension_numberOfDimensions;
      return (array_getNumberOfDimensions $arraymaxdimension_array $arraymaxdimension_numberOfDimensions);
    ]

  ]

]

//
// Replaces an entry inside an array.
//
// @param string array ($arg1) The array
// @param string arraySeparator ($arg2) The array separator
// @param int index ($arg3) The index
// @param string newValue ($arg4) The value to set at the index
//
// @return string The modified array
//
// @example `array_replace "a b c" " " 1 new` Returns "a new c"
// @example `array_replace "a b c" " " 5 new` Returns "a b c"
//
const array_replace [

  if (|| (< $numargs 4) (|| (strcmp $arg1 "") (|| (strcmp $arg2 "") (strcmp $arg3 "")))) [
    return $arg1;
  ][
    arrayreplace_array = $arg1;
    arrayreplace_arraySeparator = $arg2;
    arrayreplace_index = $arg3;
    arrayreplace_value = $arg4;

    // Get the sub string start position
    arrayreplace_subStringStart = (array_getIndexStartPosition $arrayreplace_array $arrayreplace_arraySeparator $arrayreplace_index);
    if (= $arrayreplace_subStringStart -1) [
      // The index doesn't exist, return the initial array
      return $arrayreplace_array;
    ][

      // Get the sub string end position
      arrayreplace_subStringEnd = (array_getIndexEndPosition $arrayreplace_array $arrayreplace_arraySeparator $arrayreplace_index);

      return (substr_replace $arrayreplace_array $arrayreplace_value $arrayreplace_subStringStart $arrayreplace_subStringEnd);

    ]
  ]

]

//
// Truncates supernumerous dimensions from a list of dimensions if necessary and returns the result.
// Will return -1 if the supernumerous dimensions do not target the index 0.
//
// @param string array ($arg1) The array
// @param int[] dimensionIds ($arg2) The dimension ids
//
// @return string|int The truncated dimension list or -1 if the dimension list is not valid
//
const array_truncateSupernumerousDimensions [

  if (|| (< $numargs 2) (strcmp $arg2 "")) [
    return -1;
  ][

    arraytruncatedimensions_array = $arg1;
    arraytruncatedimensions_dimensionIndexes = $arg2;

    // Check if the dimension index list contains more dimensions than the array
    arraytruncatedimensions_numberOfDimensionIndexes = (listlen $arraytruncatedimensions_dimensionIndexes);
    arraytruncatedimensions_numberOfArrayDimensions = (array_getNumberOfDimensions $arraytruncatedimensions_array);
    arraytruncatedimensions_numberOfSupernumerousDimensions = (- $arraytruncatedimensions_numberOfDimensionIndexes $arraytruncatedimensions_numberOfArrayDimensions);

    if (<= $arraytruncatedimensions_numberOfSupernumerousDimensions 0) [
      return $arraytruncatedimensions_dimensionIndexes;
    ][

      arraytruncatedimensions_supernumerousDimensions = (array_slice $arraytruncatedimensions_dimensionIndexes " " (* $arraytruncatedimensions_numberOfSupernumerousDimensions -1));

      arraytruncatedimensions_canTruncateSupernumerousDimensions = 1;
      looplist $arraytruncatedimensions_supernumerousDimensions arraytruncatedimensions_supernumerousDimension [
        if (!= $arraytruncatedimensions_supernumerousDimension 0) [
          arraytruncatedimensions_canTruncateSupernumerousDimensions = 0;
          break;
        ]
      ]

      if ($arraytruncatedimensions_canTruncateSupernumerousDimensions) [
        return (array_slice $arraytruncatedimensions_dimensionIndexes " " 0 (* $arraytruncatedimensions_numberOfSupernumerousDimensions -1));
      ][
        return -1;
      ]
    ]

  ]

]

//
// Removes trailing <empty> fields from the highest dimension of an array.
//
// @param string array ($arg1) The array
//
// @return string The updated array
//
const array_trim [

  if (|| (< $numargs 1) (strcmp $arg1 "")) [
    return "";
  ][

    arraytrim_array = $arg1;
    arraytrim_numberOfArrayDimensions = (array_getNumberOfDimensions $arraytrim_array);

    arraytrim_arraySeparator = (strrepeat " " $arraytrim_numberOfArrayDimensions);
    arraytrim_arrayLength = (array_length $arraytrim_array $arraytrim_arraySeparator);

    if (= $arraytrim_arrayLength 1) [
      // The array has only one item and is not an empty string, so there can't be trailing empty items
      return $arraytrim_array;
    ][

      arraytrim_lastSetIndex = (- $arraytrim_arrayLength 1);
      loop arraytrim_i $arraytrim_arrayLength [
        if (strcmp (array_get $arraytrim_array $arraytrim_lastSetIndex) "") [
          -- arraytrim_lastSetIndex;
        ][
          break;
        ]
      ]

      if (= $arraytrim_lastSetIndex -1) [
        return "";
      ][
        return (array_slice $arraytrim_array $arraytrim_arraySeparator 0 $arraytrim_lastSetIndex);
      ]

    ]

  ]

]

//
// Returns the highest defined dimension from an array and a list of indexes.
//
// @param string array ($arg1) The array
// @param int[] dimensionIds ($arg2) The dimension ids
//
// @return int The highest defined dimension or -1 if the list of indexes is invalid
//
const array_getHighestDefinedDimension [

  if (|| (< $numargs 2) (strcmp $arg2 "")) [
    return -1;
  ][

    arraygethighestdimension_array = $arg1;
    arraygethighestdimension_dimensionIndexes = $arg2;

    arraygethighestdimension_numberOfDimensionIndexes = (listlen $arraygethighestdimension_dimensionIndexes);
    arraygethighestdimension_numberOfArrayDimensions = (array_getNumberOfDimensions $arraygethighestdimension_array);
    if (> $arraygethighestdimension_numberOfArrayDimensions $arraygethighestdimension_numberOfDimensionIndexes) [
      return $arraygethighestdimension_numberOfArrayDimensions;
    ][
      return $arraygethighestdimension_numberOfDimensionIndexes;
    ]

  ]

]
