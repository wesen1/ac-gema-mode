//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// State manager module for ac-gema-mode
//
// Provides various functions to manage a state (a value that can be 1 or 0).
//
// Requires
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;


// Public Functions

//
// Initializes a state with a specified value.
//
// @param string stateName ($arg1) The name of the state to initialize
// @param int initialStateValue ($arg2) The value to initialize the state with (Must be 1 or 0, Default: 0)
//
function initializeState [

  stateName = $arg1;
  initialStateValue = $arg2;

  stateValueAlias = (generateStateValueAlias $stateName);
  if (= $initialStateValue 1) [
    initialStateValue = 1;
  ][
    initialStateValue = 0;
  ]

  check2init $stateValueAlias $initialStateValue;

]

//
// Returns the current value of a state.
//
// @param string stateName ($arg1) The name of the state whose value to return
//
// @return int The state's current value (1 or 0)
//
function getState [
  return (getalias (generateStateValueAlias $arg1));
]


//
// Sets the value of a state.
// The state is only changed if the new state differs from the current state.
// Also fires the "on%STATE_NAME%StateEnabled" and "on%STATE_NAME%StateDisabled" events when the
// state changes accordingly.
//
// @param string stateName ($arg1) The name of the state whose value to set
// @param int newStateValue ($arg2) The value to set the state to (1 or 0)
//
// @return string The reason if the state was not changed to the new state or an empty string otherwise
//
function setState [

  stateCanNotBeChangedReason = (getStateCanNotBeChangedReason $arg1 $arg2);

  if (! (newStateValueMatchesCurrentStateValue $arg1 $arg2)) [

    if (strcmp $stateCanNotBeChangedReason "") [
      stateValueAlias = (generateStateValueAlias $arg1);
      setPersistentValue $stateValueAlias $arg2;

      if (= $arg2 1) [
        eventHandlerAlias = (generateStateAliasName $arg1 "on%STATE_NAME%Enabled");
      ][
        eventHandlerAlias = (generateStateAliasName $arg1 "on%STATE_NAME%Disabled");
      ]

      if (isIdent $eventHandlerAlias) [
        $eventHandlerAlias;
      ]
    ]

  ]

  return $stateCanNotBeChangedReason;

]


//
// Tries to set a state.
// If the state was successfully changed an optional success message will be shown.
// Otherwise the reason for not changing the state will be shown.
//
// @param string stateName ($arg1) The name of the state whose value to set
// @param int newStateValue ($arg2) The value to set the state to (1 or 0)
// @param string successNotification ($arg3) The notification to show on success (optional)
//
// @return int 1 if the state was successfully set, 0 otherwise
//
function tryToSetState [

  if (= $numargs 3) [
    successNotification = $arg3;
  ][
    successNotification = "";
  ]

  stateNotChangedReason = (setState $arg1 $arg2);

  if (strcmp $stateNotChangedReason "") [
    // The state was successfully changed
    if (! (strcmp $successNotification "")) [
      // There is a success notification that should be shown
      printGemaNotification $successNotification;
    ]

    return 1;
  ][
    // The state could not be changed
    if (= $arg2 1) [
      messageTemplateAlias = (generateStateAliasName $arg1 "message%STATE_NAME%CanNotBeEnabled");
    ][
      messageTemplateAlias = (generateStateAliasName $arg1 "message%STATE_NAME%CanNotBeDisabled");
    ]

    printGemaNotification (format (getalias $messageTemplateAlias) $stateNotChangedReason);
    return 0;
  ]

]


// Private Functions

//
// Generates an alias name from a template string that contains a replacable "%STATE_NAME%" substring.
//
// @param string stateName ($arg1) The name of the state
// @param string aliasNameTemplateString ($arg2) The template string for the alias name
//
// @return string The generated alias name
//
function generateStateAliasName [

  if (= (strpos $arg2 "%STATE_NAME%") 0) [
    formattedStateName = $arg1;
  ][
    formattedStateName = (uppercase_first $arg1);
  ]

  return (strreplace $arg2 "%STATE_NAME%" $formattedStateName);

]


//
// Generates and returns the alias in which a state's value is stored.
//
// @param string stateName ($arg1) The name of the state
//
// @return string The name of the alias in which the state's value is stored
//
function generateStateValueAlias [
  return (generateStateAliasName $arg1 "current%STATE_NAME%State");
]

//
// Returns whether a new state value matches the current state value of a specified state.
//
// @param string stateName ($arg1) The name of the state
// @param int newStateValue ($arg2) The new state value (1 or 0)
//
// @return int 1 if the value matches the current value of the state, 0 otherwise
//
function newStateValueMatchesCurrentStateValue [
  return (= (getState $arg1) $arg2);
]

//
// Returns the reason why a state can not be changed.
//
// @param string stateName ($arg1) The name of the state
// @param int newStateValue ($arg2) The new state value (1 or 0)
//
// @return string The reason why the state can not be changed or an empty string if it can be changed
//
function getStateCanNotBeChangedReason [

  functionAlias = (generateStateAliasName $arg1 "get%STATE_NAME%StateCanNotBeChangedReason");
  if (isIdent $functionAlias) [
    return ($functionAlias $arg2);
  ]

]
