//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Custom format string parser module for ac-gema-mode
//
// Provides functions to extract format specifier rules from custom format strings and to generate
// corresponding format strings for the "format" function.
// Format specifiers have the following format: "%<meta data><type identifier><optional meta data>".
//
// Type identifiers must always be single characters.
// "\" can be used to escape "\", "%" and format specifier type identifiers.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

persistidents 0;

//
// The last found format specifier rules
//
// @var string[] $lastFoundFormatSpecifierRules
//
cache lastFoundFormatSpecifierRules [];

//
// The last number of format specifiers before the first non whitespace character
//
// @var int $lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter
//
cache lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter -1;


// parseFormatString loop variables

//
// The last generated format string for the "format" function
//
// @var string $lastGeneratedFormatString
//
cache lastGeneratedFormatString "";

//
// Stores whether a format specifier is currently started
// If 1 the next format string characters will be applied to the current format specifier
//
// @var bool $formatSpecifierStarted
//
cache formatSpecifierStarted 0;

//
// The meta data before the type identifier of the current format specifier
//
// @var string $currentFormatSpecifierMetaDataBeforeType
//
cache currentFormatSpecifierMetaDataBeforeType "";

//
// The type identifier of the current format specifier
//
// @var int $currentFormatSpecifierType
//
cache currentFormatSpecifierType -1;

//
// The data after the type identifier of the current format specifier
// This may or may not be meta data
//
// @var string $currentFormatSpecifierDataAfterType
//
cache currentFormatSpecifierDataAfterType "";

//
// The length of the data after the type identifier of the current format specifier
//
// @var int $currentFormatSpecifierDataAfterTypeLength
//
cache currentFormatSpecifierDataAfterTypeLength 0;

//
// The current format specifier number
// Will be increased and used when a new unique format specifier is found
//
// @var int $currentFormatSpecifierNumber
//
cache currentFormatSpecifierNumber 0;


// Public Functions

//
// Returns the last found format specifier rules.
//
// @return string[] The last found format specifier rules
//
function getLastFoundFormatSpecifierRules [
  return $lastFoundFormatSpecifierRules;
]

//
// Returns the last number of format specifiers before the first non whitespace character.
//
// @return int The last number of format specifiers before the first non whitespace character
//
function getLastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter [
  return $lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter;
]


//
// Parses a custom format string and returns a format string for the "format" function.
// The parsed data is available via "getLastFoundFormatSpecifierRules" and "getLastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter".
//
// The "getMetaDataAfterFormatSpecifierTypeLength" will get the $dataAfterFormatSpecifierType ($arg1)
// and must return the length of the data that is meta data.
//
// The "createFormatSpecifierRuleFunction" will get the $metaDataBeforeFormatSpecifierType ($arg1),
// $formatSpecifierType ($arg2) and $dataAfterFormatSpecifierType ($arg3) and must return a single string that
// should be added to the $lastFoundFormatSpecifierRules.
//
// Note:
// The two functions will be called inside a parsestring loop, so you can not use another parsestring
// loop inside these functions.
//
// @param string customFormatString ($arg1) The custom format string to parse
// @param string availableFormatSpecifierTypes ($arg2) The available format specifier types as a string of format specifier type identifiers without separating whitespaces
// @param int metaDataAfterFormatSpecifierTypeLength ($arg3) The length of the optional meta data after the format specifier type
// @param string getMetaDataAfterFormatSpecifierTypeLengthFunctionName ($arg4) The name of the function to call to check how much of the data after the format specifier type is meta data
// @param string createFormatSpecifierRuleFunctionName ($arg5) The name of the function to call to create a format specifier rule
//
function parseCustomFormatString [

  customFormatString = $arg1;
  availableFormatSpecifierTypes = $arg2;
  metaDataAfterFormatSpecifierTypeLength = $arg3;
  getMetaDataAfterFormatSpecifierTypeLengthFunctionName = $arg4;
  createFormatSpecifierRuleFunctionName = $arg5;

  lastGeneratedFormatString = "";
  lastFoundFormatSpecifierRules = [];
  lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter = -1;

  resetCurrentFormatSpecifierData;
  formatSpecifierStarted = 0;
  currentFormatSpecifierNumber = 0;
  dontParseNextFormatStringCharacter = 0;

  parsestring $customFormatString customFormatStringCharacter [

    if (&& (! $dontParseNextFormatStringCharacter) (strcmp $customFormatStringCharacter \)) [
      // Found a backslash, this escapes the next character if there is one
      dontParseNextFormatStringCharacter = 1;
    ][

      if ($formatSpecifierStarted) [

        if (= $currentFormatSpecifierType -1) [
          // Format specifier started but the type was not found yet

          if (! $dontParseNextFormatStringCharacter) [
            currentFormatSpecifierType = (strpos $availableFormatSpecifierTypes $customFormatStringCharacter);
          ]

          if (= $currentFormatSpecifierType -1) [
            // The current format string character is not the type
            if (&& (! $dontParseNextFormatStringCharacter) (strcmp $customFormatStringCharacter "%")) [
              // Found the start of another format specifier, the current format specifier is invalid
              appendCurrentFormatSpecifierDataToLastGeneratedFormatString $availableFormatSpecifierTypes;
              resetCurrentFormatSpecifierData;
              formatSpecifierStarted = 1;
            ][
              currentFormatSpecifierMetaDataBeforeType = (concatword $currentFormatSpecifierMetaDataBeforeType $customFormatStringCharacter);
            ]
          ]
        ][
          // Format specifier type is known, but the format specifier didn't end yet

          if (&& (! $dontParseNextFormatStringCharacter) (strcmp $customFormatStringCharacter "%")) [
            // Found a format specifier start after the current format specifier
            isMetaDataAfterFormatSpecifierFinished = 1;
            formatSpecifierStarted = 1;
          ][
            if (= $currentFormatSpecifierDataAfterTypeLength $metaDataAfterFormatSpecifierTypeLength) [
              // Character limit for meta data after format specifier reached
              isMetaDataAfterFormatSpecifierFinished = 1;
              formatSpecifierStarted = 0;
            ][
              isMetaDataAfterFormatSpecifierFinished = 0;
            ]
          ]

          if ($isMetaDataAfterFormatSpecifierFinished) [
            parseCurrentFormatSpecifierData $availableFormatSpecifierTypes $getMetaDataAfterFormatSpecifierTypeLengthFunctionName $createFormatSpecifierRuleFunctionName;
            resetCurrentFormatSpecifierData;

            if (! $formatSpecifierStarted) [
              appendDataToLastGeneratedFormatString $customFormatStringCharacter;
            ]

          ][
            currentFormatSpecifierDataAfterType = (concatword $currentFormatSpecifierDataAfterType $customFormatStringCharacter);
            ++ currentFormatSpecifierDataAfterTypeLength;
          ]
        ]
      ][
        // No format specifier is currently started

        if (&& (! $dontParseNextFormatStringCharacter) (strcmp $customFormatStringCharacter "%")) [
          // Found the start of a format specifier
          formatSpecifierStarted = 1;
        ][
          // Found a character that should be added to the generated format string
          appendDataToLastGeneratedFormatString $customFormatStringCharacter;

          if (&& (= $lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter -1) (! (testchar $customFormatStringCharacter 7))) [
            lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter = $currentFormatSpecifierNumber;
          ]
        ]
      ]

      if ($dontParseNextFormatStringCharacter) [
        dontParseNextFormatStringCharacter = 0;
      ]
    ]
  ]

  if (= $currentFormatSpecifierType -1) [
    appendCurrentFormatSpecifierDataToLastGeneratedFormatString $availableFormatSpecifierTypes;
  ][
    parseCurrentFormatSpecifierData $availableFormatSpecifierTypes $getMetaDataAfterFormatSpecifierTypeLengthFunctionName $createFormatSpecifierRuleFunctionName;
  ]

  return $lastGeneratedFormatString;

]


// Private Functions

//
// Resets the current format specifier data.
//
function resetCurrentFormatSpecifierData [
  currentFormatSpecifierMetaDataBeforeType = "";
  currentFormatSpecifierType = -1;
  currentFormatSpecifierDataAfterType = "";
  currentFormatSpecifierDataAfterTypeLength = 0;
]

//
// Appends the data of the current format specifier to the last generated format string.
// This should only be called if the current format specifier is invalid.
//
// @param string availableFormatSpecifierTypes ($arg1) The available format specifier types
//
function appendCurrentFormatSpecifierDataToLastGeneratedFormatString [

  availableFormatSpecifierTypes = $arg1;
  if (!= $currentFormatSpecifierType -1) [
    formatSpecifierTypeString = (substr $availableFormatSpecifierTypes $currentFormatSpecifierType 1);
  ][
    formatSpecifierTypeString = "";
  ]

  invalidFormatSpecifier = (concatword "%" $currentFormatSpecifierMetaDataBeforeType $formatSpecifierTypeString $currentFormatSpecifierDataAfterType);
  appendDataToLastGeneratedFormatString $invalidFormatSpecifier;

]

//
// Appends data to the last generated format string.
//
// @param string lastGeneratedFormatStringAppendData ($arg1) The data to append
//
function appendDataToLastGeneratedFormatString [
  lastGeneratedFormatStringAppendData = (strreplace $arg1 "%" "%%");
  lastGeneratedFormatString = (concatword $lastGeneratedFormatString $lastGeneratedFormatStringAppendData);
]

//
// Parses the data of the current format specifier into a format specifier rule and adds it to the
// $lastFoundFormatSpecifierRules if required.
// If the format specifier is not valid the data will be appended to the last generated format string.
//
// @param string availableFormatSpecifierTypes ($arg1) The available format specifier types
// @param string getMetaDataAfterFormatSpecifierTypeLengthFunctionName ($arg2) The name of the function to call to check how much of the data after the format specifier type is meta data
// @param string createFormatSpecifierRuleFunctionName ($arg3) The name of the function to call to create a format specifier rule
//
function parseCurrentFormatSpecifierData [

  availableFormatSpecifierTypes = $arg1;
  getMetaDataAfterFormatSpecifierTypeLengthFunctionName = $arg2;
  createFormatSpecifierRuleFunctionName = $arg3;

  // Split data after type into meta data and format string data
  if (! (strcmp $currentFormatSpecifierDataAfterType "")) [
    metaDataAfterTypeLength = ($getMetaDataAfterFormatSpecifierTypeLengthFunctionName $currentFormatSpecifierDataAfterType);

    metaDataAfterType = (substr $currentFormatSpecifierDataAfterType 0 $metaDataAfterTypeLength);
    dataAfterType = (substr $currentFormatSpecifierDataAfterType $metaDataAfterTypeLength);
  ][
    metaDataAfterType = "";
    dataAfterType = "";
  ]

  formatSpecifierRule = ($createFormatSpecifierRuleFunctionName $currentFormatSpecifierMetaDataBeforeType $currentFormatSpecifierType $metaDataAfterType);

  if (strcmp $formatSpecifierRule "") [
    // The format specifier was invalid
    appendCurrentFormatSpecifierDataToLastGeneratedFormatString $availableFormatSpecifierTypes;
  ][
    existingFormatSpecifierRuleNumber = (+ (findlist $lastFoundFormatSpecifierRules $formatSpecifierRule) 1);
    if ($existingFormatSpecifierRuleNumber) [
      formatSpecifierNumber = $existingFormatSpecifierRuleNumber;
    ][
      ++ currentFormatSpecifierNumber;
      formatSpecifierNumber = $currentFormatSpecifierNumber;

      add2list lastFoundFormatSpecifierRules $formatSpecifierRule;
    ]

    lastGeneratedFormatString = (concatword $lastGeneratedFormatString "%" $formatSpecifierNumber);
    if (! (strcmp $dataAfterType "")) [
      appendDataToLastGeneratedFormatString $dataAfterType;
    ]
  ]

]
