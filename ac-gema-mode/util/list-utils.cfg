//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// List utils module for ac-gema-mode
//
// Provides various list (one dimensional arrays) functions.
//

persistidents 0;


// Public Functions

//
// Sorts a list of numbers by their value.
// This function uses a quick sort algorithm based on https://cs.stackexchange.com/a/104825.
//
// @param int[] list ($arg1) The list of numbers
// @param int startIndex ($arg2) The start index (used for recursion)
// @param int endIndex ($arg3) The end index (used for recursion)
//
// @return int[] The sorted list of numbers
//
const sortlistnumeric [

  sortlistnumeric_list = $arg1;

  if (= $numargs 3) [
    push sortlistnumeric_startIndex $arg2;
    push sortlistnumeric_endIndex $arg3;
    sortlist_isRecursiveCall = 1;
  ][
    push sortlistnumeric_startIndex 0;
    push sortlistnumeric_endIndex (- (listlen $sortlistnumeric_list) 1);
    sortlist_isRecursiveCall = 0;
  ]

  if (< $sortlistnumeric_startIndex $sortlistnumeric_endIndex) [
    // The sub list contains at least two items (at least two different list indexes)

    // Select the last item from the sub list and use it as pivot
    sortlistnumeric_pivot = (at $sortlistnumeric_list $sortlistnumeric_endIndex);

    // Sort the sub list into three categories: lower than pivot, equal to pivot and higher than pivot
    push sortlistnumeric_leftListNextIndex $sortlistnumeric_startIndex;
    sortlistnumeric_middleListStartIndex = $sortlistnumeric_startIndex
    push sortlistnumeric_rightListStartIndex $sortlistnumeric_endIndex;

    while [ (<= $sortlistnumeric_middleListStartIndex $sortlistnumeric_rightListStartIndex) ] [

      sortlistnumeric_listItem = (at $sortlistnumeric_list $sortlistnumeric_middleListStartIndex);
      if (< $sortlistnumeric_listItem $sortlistnumeric_pivot) [
        // List item < pivot, move it to the left list
        sortlistnumeric_list = (swapelements $sortlistnumeric_list (concat $sortlistnumeric_middleListStartIndex $sortlistnumeric_leftListNextIndex));

        ++ sortlistnumeric_leftListNextIndex;
        ++ sortlistnumeric_middleListStartIndex;
      ][
        if (> $sortlistnumeric_listItem $sortlistnumeric_pivot) [
          // List item > pivot, move it to the right list
          sortlistnumeric_list = (swapelements $sortlistnumeric_list (concat $sortlistnumeric_middleListStartIndex $sortlistnumeric_rightListStartIndex));

          -- sortlistnumeric_rightListStartIndex;
        ][
          // List item = pivot, keep the item where it is
          ++ sortlistnumeric_middleListStartIndex;
        ]
      ]

    ]

    // Sort the left list
    sortlistnumeric_list = (sortlistnumeric $sortlistnumeric_list $sortlistnumeric_startIndex (- $sortlistnumeric_leftListNextIndex 1));

    // Sort the right list
    sortlistnumeric_list = (sortlistnumeric $sortlistnumeric_list $sortlistnumeric_rightListStartIndex $sortlistnumeric_endIndex);

    if ($sortlist_isRecursiveCall) [
      // It's a recursive call, restore the values that were overwritten
      pop sortlistnumeric_leftListNextIndex;
      pop sortlistnumeric_rightListStartIndex;
    ]

  ]

  if ($sortlist_isRecursiveCall) [
    // It's a recursive call, restore the values that were overwritten
      pop sortlistnumeric_startIndex;
      pop sortlistnumeric_endIndex;
  ]

  return $sortlistnumeric_list;

]
