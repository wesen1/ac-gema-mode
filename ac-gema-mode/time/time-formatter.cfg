//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Time formatter module for ac-gema-mode
//
// Provides functions to generate human readable time strings from milliseconds and time intervals.
//
// Requires:
//   * scripts/ac-gema-mode/time/time-interval-array.cfg
//


//
// %i = Minutes
// %s = Seconds
// %v = Milliseconds
//
// %T = Total time string time unit (Largest non zero time unit)
//
// - At the beginning = Cut off leading time parts with zero values
// - After a time unit = Abbreviated time unit name for that time unit
// + After a time unit = Full time unit name for that time unit
// Nothing after a time unit = No time unit name is shown
//
const defaultTimeFormat "-%02i- %02s- %03v-";

const defaultColors [ 1 2 3 ];


persistidents 0;



// Public Functions

//
// Generates and returns a time string in a specified format from a time in milliseconds.
//
// @param int milliseconds ($arg1) The time in milliseconds
// @param string timeFormat ($arg2) The format that should be used to generate the time string (optional)
//
// @return string The generated time string
//
const generateTimeStringFromMilliseconds [

  if (>= $numargs 2) [
    colorConfig = $arg2;
  ][
    colorConfig = $defaultColors;
  ]

  if (= $numargs 3) [
    timeFormatString = $arg3;
  ][
    timeFormatString = $defaultTimeFormat;
  ]

  return (generateTimeStringFromTimeInterval (createTimeIntervalArray $arg1) $colorConfig $timeFormatString);
]

//
// Generates and returns a time string in a specified format from a time in milliseconds.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param string colorConfig ($arg2) The color config (time parts, time unit names and other text)
// @param string timeFormat ($arg3) The format that should be used to generate the time string (optional)
//
// @return string The generated time string
//
const generateTimeStringFromTimeInterval [

  timeInterval = $arg1;
  if (>= $numargs 2) [
    colorConfig = $arg2;
  ][
    colorConfig = $defaultColors;
  ]

  if (= $numargs 3) [
    timeFormatString = $arg3;
  ][
    timeFormatString = $defaultTimeFormat;
  ]

  formatString = (generateFormatStringFromTimeFormatString $timeFormatString);
  formatSpecifierRules = (getFormatSpecifierRulesFromTimeFormatString $timeFormatString);
  hideLeadingZeroTimeIntervalParts = (getLastFoundHideLeadingZeroTimeIntervalPartsRuleFromTimeFormatString $timeFormatString);
  hideTimeIntervalPartIfZero = $hideLeadingZeroTimeIntervalParts;

  generatedTimeString = $formatString;

  foundOnlyEmptyFormatSpecifierValues = 1;
  loop i (array_length $formatSpecifierRules "  ") [

    formatSpecifierRule = (array_get $formatSpecifierRules $i 2);
    formatSpecifierString = (at $formatSpecifierRule 0);
    formatSpecifierValue = (parseFormatSpecifierRule $timeInterval $formatSpecifierRule $hideLeadingZeroTimeIntervalParts $hideTimeIntervalPartIfZero $colorConfig);

    if ($foundOnlyEmptyFormatSpecifierValues) [
      generatedTimeString = (substr $generatedTimeString (strpos $generatedTimeString $formatSpecifierString));
      if (! (strcmp $formatSpecifierValue "")) [
        foundOnlyEmptyFormatSpecifierValues = 0;
        hideTimeIntervalPartIfZero = 0;
      ]
    ]

    generatedTimeString = (strreplace $generatedTimeString $formatSpecifierString $formatSpecifierValue);

  ]

  return (concatword (c (getTimeGeneralTextColor $colorConfig)) (trimLeadingAndTrailingWhitespace $generatedTimeString));

]


const parseFormatSpecifierRule [

  timeInterval = $arg1;
  formatSpecifierRule = $arg2;
  hideLeadingZeroTimeIntervalParts = $arg3;
  hideTimeIntervalPartIfZero = $arg4;
  colorConfig = $arg5;

  formatSpecifierType = (at $formatSpecifierRule 1);
  timeUnitType = (at $formatSpecifierRule 2);
  numberOfZeroPaddingDigits = (at $formatSpecifierRule 3);

  if (strcmp $formatSpecifierType "i") [
    formatSpecifierValue = (generateMinutesString $timeInterval $hideTimeIntervalPartIfZero $numberOfZeroPaddingDigits $timeUnitType $colorConfig);
  ][
    if (strcmp $formatSpecifierType "s") [
      formatSpecifierValue = (generateSecondsString $timeInterval $hideTimeIntervalPartIfZero $numberOfZeroPaddingDigits $timeUnitType $colorConfig);
    ][
      if (strcmp $formatSpecifierType "v") [
        formatSpecifierValue = (generateMillisecondsString $timeInterval $numberOfZeroPaddingDigits $timeUnitType $colorConfig);
      ][
        if (strcmp $formatSpecifierType "T") [
          formatSpecifierValue = (generateTotalTimeUnitString $timeInterval $hideLeadingZeroTimeIntervalParts $timeUnitType $colorConfig);
        ]
      ]
    ]
  ]

  if (! (strcmp $formatSpecifierValue "")) [
    formatSpecifierValue = (concatword $formatSpecifierValue (c (getTimeGeneralTextColor $colorConfig)));
  ]

  return $formatSpecifierValue;

]
