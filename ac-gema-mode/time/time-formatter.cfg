//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Time formatter module for ac-gema-mode
//
// Provides functions to generate human readable time strings from milliseconds and time intervals.
//
// Requires:
//   * scripts/ac-gema-mode/time/time-formatter/time-format-specifier-replacer.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-format-specifier-rule-array.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-format-string-parser.cfg
//   * scripts/ac-gema-mode/time/time-interval-array.cfg
//   * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;


//
// The default time format that will be used if no custom time format is configured
//
// The following format string configurations are available:
//
// "--" At the beginning = Cut off every leading text until the first non zero time part
// "-" At the beginning = Cut off every leading text until the first non zero time part or the first non whitespace character
//
//
// The following time format specifiers are available:
//
// "%i" = Minutes
// "%s" = Seconds
// "%v" = Milliseconds
// "%T" = Total time string time unit (Largest non zero time unit)
//
// You can add a number of padding zeros between "%" and <format specifier type identifier> to pad the digits by x zeros.
//
// You can also configure the time unit type with the character after the format specifier type identifier:
//
// "-" = Abbreviated time unit name for that time unit
// "+" After a time unit = Full time unit name for that time unit
// "*" After a time unit = Custom time unit name for that time unit
// <anything else | nothing> = No time unit name is shown
//
// Numbers after the time unit type configure by how many whitespaces the time unit name will be separated
// from the time digits.
//
// @var string $defaultTimeFormat
//
const defaultTimeFormat "%02i:%02s,%03v %T+";


// Public Functions

//
// Generates and returns a time string in a specified format from a time in milliseconds.
//
// @param int milliseconds ($arg1) The time in milliseconds
// @param array colorConfig ($arg2) The colors that should be used to colorize the time string
// @param string timeFormat ($arg3) The format that should be used to generate the time string (optional)
//
// @return string The generated time string
//
const generateTimeStringFromMilliseconds [

  if (= $numargs 3) [
    timeFormatString = $arg3;
  ][
    timeFormatString = $defaultTimeFormat;
  ]

  return (generateTimeStringFromTimeInterval (createTimeIntervalArray $arg1) $arg2 $timeFormatString);
]

//
// Generates and returns a time string in a specified format from a time in milliseconds.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param string colorConfig ($arg2) The color config (time parts, time unit names and other text)
// @param string timeFormat ($arg3) The format that should be used to generate the time string (optional)
//
// @return string The generated time string
//
const generateTimeStringFromTimeInterval [

  timeIntervalArray = $arg1;
  colorConfig = $arg2;

  if (= $numargs 3) [
    timeFormatString = $arg3;
  ][
    timeFormatString = $defaultTimeFormat;
  ]

  formatString = (parseTimeFormatString $timeFormatString);
  formatSpecifierRules = (getLastFoundTimeFormatSpecifierRules);
  hideLeadingZeroTimeIntervalParts = (getLastFoundHideLeadingZeroTimeIntervalPartsRule);
  numberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter = (getLastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter);

  formatSpecifierValues = [];
  foundOnlyEmptyFormatSpecifierValues = 1;
  formatSpecifierRuleNumber = 1;
  looplist $formatSpecifierRules formatSpecifierRule [

    // Find the "hideTimeIntervalPartIfZero" setting for the current format specifier rule
    hideTimeIntervalPartIfZero = 0;
    if ($foundOnlyEmptyFormatSpecifierValues) [
      if (= $hideLeadingZeroTimeIntervalParts $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_ALWAYS) [
        hideTimeIntervalPartIfZero = 1;
      ][
        if (= $hideLeadingZeroTimeIntervalParts $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_IF_PRECEDED_BY_WHITESPACE) [
          hideTimeIntervalPartIfZero = (|| (= $numberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter -1) (<= $formatSpecifierRuleNumber $numberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter));
        ]
      ]
    ]

    formatSpecifierRuleArray = (strreplace $formatSpecifierRule "_" " ");
    formatSpecifierValue = (generateTextFromFormatSpecifierRule $timeIntervalArray $formatSpecifierRuleArray $hideLeadingZeroTimeIntervalParts $hideTimeIntervalPartIfZero $colorConfig);

    add2list formatSpecifierValues (concatword "[" $formatSpecifierValue "]");

    if (&& $foundOnlyEmptyFormatSpecifierValues (! (strcmp $formatSpecifierValue ""))) [
      foundOnlyEmptyFormatSpecifierValues = 0;

      if (= $hideLeadingZeroTimeIntervalParts $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_ALWAYS) [
        formatSpecifier = (concatword "%" $formatSpecifierRuleNumber);
        formatSpecifierPosition = (findStrPosWithoutPrecedingSubstring $formatString $formatSpecifier "%");
        formatString = (substr $formatString $formatSpecifierPosition);
      ]
    ]

    ++ formatSpecifierRuleNumber;
  ]

  execute (concat "generatedTimeString = (format $formatString" $formatSpecifierValues ")");

  return (colorizeTimeGeneralText (trimLeadingAndTrailingWhitespace $generatedTimeString));

]


// Private Functions

//
// Generates text from a given time interval and format specifier rule.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param array formatSpecifierRuleArray ($arg2) The format specifier rule array
// @param int hideLeadingZeroTimeIntervalParts ($arg3) 1 if leading zero time intervals should be hidden, 0 otherwise
// @param bool hideTimeIntervalPartIfZero ($arg4) 1 if the string should be empty if the time part is zero, 0 otherwise
// @param array colorConfig ($arg5) The color config to use to colorize the string
//
// @return string The generated text
//
const generateTextFromFormatSpecifierRule [

  timeIntervalArray = $arg1;
  formatSpecifierRuleArray = $arg2;
  hideLeadingZeroTimeIntervalParts = $arg3;
  hideTimeIntervalPartIfZero = $arg4;
  colorConfig = $arg5;

  formatSpecifierType = (getTimeFormatSpecifierRuleArrayFormatSpecifierType $formatSpecifierRuleArray);

  if (= $formatSpecifierType $TIME_FORMAT_SPECIFIER_TYPE_MINUTES) [
    formatSpecifierValue = (generateMinutesString $timeIntervalArray $formatSpecifierRuleArray $hideTimeIntervalPartIfZero $colorConfig);
  ][
    if (= $formatSpecifierType $TIME_FORMAT_SPECIFIER_TYPE_SECONDS) [
      formatSpecifierValue = (generateSecondsString $timeIntervalArray $formatSpecifierRuleArray $hideTimeIntervalPartIfZero $colorConfig);
    ][
      if (= $formatSpecifierType $TIME_FORMAT_SPECIFIER_TYPE_MILLISECONDS) [
        formatSpecifierValue = (generateMillisecondsString $timeIntervalArray $formatSpecifierRuleArray $colorConfig);
      ][
        if (= $formatSpecifierType $TIME_FORMAT_SPECIFIER_TYPE_TOTALTIMEUNIT) [
          formatSpecifierValue = (generateTotalTimeUnitNameString $timeIntervalArray $formatSpecifierRuleArray $hideLeadingZeroTimeIntervalParts $colorConfig);
        ][
          formatSpecifierValue = "";
        ]
      ]
    ]
  ]

  if (! (strcmp $formatSpecifierValue "")) [
    formatSpecifierValue = (concatword $formatSpecifierValue (colorizeTimeGeneralText "" $colorConfig));
  ]

  return $formatSpecifierValue;

]
