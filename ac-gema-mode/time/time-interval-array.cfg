//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Time interval array module for ac-gema-mode
//
// Provides functions to create, modify and fetch the values of time interval arrays.
// The time interval arrays are in the following format:
//   [ 1 => <totalMilliseconds>, 2 => <totalSeconds>, 3 => <minutes>, 4 => <seconds>, 5 => <milliseconds> ]
//
// Requires:
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;

//
// The last error message for an error that occurred during a time interval change
//
// @var string $lastTimeIntervalChangeErrorMessage
//
checkinit lastTimeIntervalChangeErrorMessage "";


// Public Functions

//
// Creates and returns a time interval array.
//
// @param int totalMilliseconds ($arg1) The total milliseconds of the time interval
//
// @return array The created time interval array
//
const createTimeIntervalArray [

  timeIntervalTotalMilliseconds = $arg1;

  timeIntervalMilliseconds = (mod $timeIntervalTotalMilliseconds 1000);
  timeIntervalTotalSeconds = (div $timeIntervalTotalSeconds 1000);

  timeIntervalMinutes = (div $timeIntervalTotalSeconds 60);
  timeIntervalSeconds = (mod $timeIntervalTotalSeconds 60);

  return (concat $timeIntervalTotalMilliseconds $timeIntervalTotalSeconds $timeIntervalMinutes $timeIntervalSeconds $timeIntervalMilliseconds);

]


//
// Returns the total milliseconds of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int The total milliseconds of the time interval
//
const getTimeIntervalTotalMilliseconds [
  return (at $arg1 0);
]

//
// Returns the total seconds of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int The total seconds of the time interval
//
const getTimeIntervalTotalSeconds [
  return (at $arg1 1);
]

//
// Returns the minutes part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int The minutes part of the time interval
//
const getTimeIntervalMinutes [
  return (at $arg1 2);
]

//
// Returns the seconds part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int The seconds part of the time interval
//
const getTimeIntervalSeconds [
  return (at $arg1 3);
]

//
// Returns the milliseconds part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int The milliseconds part of the time interval
//
const getTimeIntervalMilliseconds [
  return (at $arg1 4);
]


//
// Returns whether a time interval is a negative time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
//
// @return int 1 if the time interval is a negative time interval, 0 otherwise
//
const getIsTimeIntervalNegative [
  return (< (getTimeIntervalTotalMilliseconds $arg1) 0);
]


//
// Returns the last error message for an error that occurred during a time interval change.
//
// @return string The last error message or an empty string if no error occurred yet
//
const getLastTimeIntervalChangeErrorMessage [
  return $lastTimeIntervalChangeErrorMessage;
]


//
// Changes the minutes part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int newTimeIntervalMinutes ($arg2) The new minutes part for the time interval (Must be between 0 and 35791)
//
// @return array The modified time interval array or an empty string if an error occurred
//
const changeTimeIntervalMinutes [

  timeIntervalArray = $arg1;
  newTimeIntervalMinutes = $arg2;

  if (< $newTimeIntervalMinutes 0) [
    lastTimeIntervalChangeErrorMessage = $messageTimeIntervalMinutesTooLow;
  ][
    if (> $newTimeIntervalMinutes 35791) [
      lastTimeIntervalChangeErrorMessage = $messageTimeIntervalMinutesTooHigh;
    ][
      minutesDifference = (- $newTimeIntervalMinutes (getTimeIntervalMinutes $timeIntervalArray));
      return (addTimeIntervalMinutes $timeIntervalArray $minutesDifference);
    ]
  ]

]

//
// Changes the seconds part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int newTimeIntervalSeconds ($arg2) The new seconds part for the time interval (Must be between 0 and 59)
//
// @return array The modified time interval array or an empty string if an error occurred
//
const changeTimeIntervalArraySeconds [

  timeIntervalArray = $arg1;
  newTimeIntervalSeconds = $arg2;

  if (< $newTimeIntervalSeconds 0) [
    lastTimeIntervalChangeErrorMessage = $messageTimeIntervalSecondsTooLow;
  ][
    if (> $newTimeIntervalSeconds 59) [
      lastTimeIntervalChangeErrorMessage = $messageTimeIntervalSecondssTooHigh;
    ][
      secondsDifference = (- $newTimeIntervalSeconds (getTimeIntervalSeconds $timeIntervalArray));
      return (addTimeIntervalSeconds $timeIntervalArray $secondsDifference);
    ]
  ]

]

//
// Changes the milliseconds part of a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int newTimeIntervalMilliseconds ($arg2) The new milliseconds part for the time interval (Must be between 0 and 999)
//
// @return array The modified time interval array or an empty string if an error occurred
//
const changeTimeIntervalArrayMilliseconds [

  timeIntervalArray = $arg1;
  newTimeIntervalMilliseconds = $arg2;

  if (< $newTimeIntervalMilliseconds 0) [
    lastTimeIntervalChangeErrorMessage = $messageTimeIntervalMillisecondsTooLow;
  ][
    if (> $newTimeIntervalMilliseconds 999) [
      lastTimeIntervalChangeErrorMessage = $messageTimeIntervalMillisecondssTooHigh;
    ][
      millisecondsDifference = (- $newTimeIntervalMilliseconds (getTimeIntervalMilliseconds $timeIntervalArray));
      return (addTimeIntervalMilliseconds $timeIntervalArray $millisecondsDifference);
    ]
  ]

]


//
// Inverts a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array to invert
//
// @return array The inverted time interval array
//
const invertTimeInterval [
  totalMilliseconds = (getTimeIntervalTotalMilliseconds $arg1);
  return (createTimeIntervalArray (* $totalMilliseconds -1));
]


// Private Functions

//
// Adds a time difference in minutes to a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int minutesDifference ($arg2) The time difference in minutes
//
// @return array The modified time interval array or an empty string if an error occurred
//
const addTimeIntervalMinutes [
  return (addTimeIntervalSeconds $arg1 (* $arg2 60));
]

//
// Adds a time difference in seconds to a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int secondsDifference ($arg2) The time difference in seconds
//
// @return array The modified time interval array or an empty string if an error occurred
//
const addTimeIntervalSeconds [
  return (addTimeIntervalMilliseconds $arg1 (* $arg2 1000));
]

//
// Adds a time difference in milliseconds to a time interval.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param int millisecondsDifference ($arg2) The time difference in milliseconds
//
// @return array The modified time interval array or an empty string if an error occurred
//
const addTimeIntervalMilliseconds [

  timeIntervalArray = $arg1;
  millisecondsDifference = $arg2;

  timeIntervalDifferenceNotValidReason = (getTimeIntervalDifferenceNotValidReason $timeIntervalArray $millisecondsDifference);
  if (strcmp $timeIntervalDifferenceNotValidReason "") [
    // The time interval difference is valid
    totalMilliseconds = (getTimeIntervalTotalMilliseconds $timeIntervalArray);
    newTotalMilliseconds = (+ $totalMilliseconds $millisecondsDifference);

    return (createTimeIntervalArray $newTotalMilliseconds);
  ][
    lastTimeIntervalChangeErrorMessage = $timeIntervalDifferenceNotValidReason;
  ]

]

//
// Returns the reason why a time interval difference in milliseconds is not valid.
//
// @param array timeIntervalArray ($arg1) The timeInterval array to which the difference should be added
// @param int millisecondDifference ($arg2) The time difference in milliseconds
//
// @return string The error message or an empty string if the time interval difference is valid
//
const getTimeIntervalDifferenceNotValidReason [

  timeIntervalArray = $arg1;
  millisecondDifference = $arg2;

  totalMilliseconds = (getTimeIntervalTotalMilliseconds $timeIntervalArray);

  if (getIsTimeIntervalNegative $timeIntervalArray) [
    minimumNegativeDifference = (- (* $maximumAllowedIntegerValue -1) $totalMilliseconds);
    distanceToMinimumNegativeDifference = (- $millisecondsDifference $minimumNegativeDifference);
    if (< $distanceToMinimumNegativeDifference 0) [
      return (format $messageTimeIntervalDifferenceTooLow $distanceToMinimumNegativeDifference);
    ]
  ][
    maximumPositiveDifference = (- $maximumAllowedIntegerValue $totalMilliseconds);
    distanceToMaximumPositiveDifference = (- $millisecondsDifference $maximumPositiveDifference);
    if (> $distanceToMaximumPositiveDifference 0) [
      return (format $messageTimeIntervalDifferenceTooHigh $distanceToMaximumPositiveDifference);
    ]
  ]
]
