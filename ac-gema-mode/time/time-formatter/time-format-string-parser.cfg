//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Time format string parser module for ac-gema-mode
//
// Provides functions to parse the time format rules from time format strings.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-format-specifier-rule-array.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/custom-format-string-parser.cfg
//

persistidents 0;


// The available hideLeadingZeroTimeIntervalPartsRule values

const TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_NEVER 0;
const TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_IF_PRECEDED_BY_WHITESPACE 1;
const TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_ALWAYS 2;


//
// The available time format specifier types
//
// @var string $timeFormatSpecifierTypes
//
const timeFormatSpecifierTypes "isvT";

//
// The available time unit types
//
// @var string $timeUnitTypes
//
const timeUnitTypes "-+*";


//
// The last parsed time format string
//
// @var string $lastParsedTimeFormatString
//
cache lastParsedTimeFormatString "";

//
// The format specifier rules that were found in the last parsed time format string
//
// @var string[] $lastFoundTimeFormatSpecifierRules
//
cache lastFoundTimeFormatSpecifierRules [];

//
// The "hide leading zero time interval parts" rule that was found in the last parsed time format string
// The following rules are allowed:
//
// 0: Disabled
// 1: Hide leading zero time interval parts if they are preceded by whitespace
// 2: Hide leading zero time interval parts and remove any text that precedes them
//
// @var int $lastFoundHideLeadingZeroTimeIntervalPartsRule
//
cache lastFoundHideLeadingZeroTimeIntervalPartsRule 0;

//
// The number of time format specifiers before the first non whitespace character that were found in the
// last parsed time format string
//
// @var int $lastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter
//
cache lastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter 0;


// Public Functions

//
// Returns the format specifier rules that were found in the last parsed time format string.
//
// @return string[] The format specifier rules that were found in the last parsed time format string
//
function getLastFoundTimeFormatSpecifierRules [
  return $lastFoundTimeFormatSpecifierRules;
]

//
// Returns the "hide leading zero time interval parts" rule that was found in the last parsed time format string.
//
// @return int The "hide leading zero time interval parts" rule that was found in the last parsed time format string
//
function getLastFoundHideLeadingZeroTimeIntervalPartsRule [
  return $lastFoundHideLeadingZeroTimeIntervalPartsRule;
]

//
// Returns the number of time format specifiers before the first non whitespace character that were found in the last parsed time format string.
//
// @return int The number of time format specifiers before the first non whitespace character that were found in the last parsed time format string
//
function getLastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter [
  return $lastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter;
]


//
// Parses a given time format string if it doesn't match the last parsed time format string.
//
// @param string timeFormatString ($arg1) The time format string to parse
//
// @return string The corresponding format string for the "format" function
//
function parseTimeFormatString [

  timeFormatString = $arg1;
  if (! (strcmp $timeFormatString $lastParsedTimeFormatString)) [
    lastParsedTimeFormatString = $timeFormatString;
    lastGeneratedTimeFormatString = (doParseTimeFormatString $timeFormatString);
  ]

  return $lastGeneratedTimeFormatString;

]


// Private Functions

//
// Parses a given time format string and returns a corresponding format string for the "format" function.
// The parsed data is available via "getLastFoundTimeFormatSpecifierRules", "getLastFoundHideLeadingZeroTimeIntervalPartsRule"
// and "getLastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter".
//
// @param string timeFormatString ($arg1) The time format string to parse
//
// @return string The corresponding format string for the "format" function
//
function doParseTimeFormatString [

  timeFormatString = $arg1;

  if (strcmp (substr $timeFormatString 0 2) "--") [
    // The format string starts with "--"
    timeFormatString = (substr $timeFormatString 2);
    lastFoundHideLeadingZeroTimeIntervalPartsRule = $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_ALWAYS;
  ][
    if (strcmp (substr $timeFormatString 0 1) "-") [
      // The format string starts with "-"
      timeFormatString = (substr $timeFormatString 1);
      lastFoundHideLeadingZeroTimeIntervalPartsRule = $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_IF_PRECEDED_BY_WHITESPACE;
    ][
      lastFoundHideLeadingZeroTimeIntervalPartsRule = $TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_NEVER;
    ]
  ]

  generatedTimeFormatString = (parseCustomFormatString $timeFormatString $timeFormatSpecifierTypes -1 "getMetaDataAfterTimeFormatSpecifierTypeLength" "createTimeFormatSpecifierRule");

  lastFoundTimeFormatSpecifierRules = (getLastFoundFormatSpecifierRules);
  lastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter = (getLastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter);

  return $generatedTimeFormatString;

]

//
// Returns the length of meta data inside the data after a time format specifier type.
//
// @param string dataAfterType ($arg1) The data to check
//
// @return int The length of the meta data inside the given data
//
function getMetaDataAfterTimeFormatSpecifierTypeLength [

  dataAfterType = $arg1;

  metaDataAfterTypeLength = 0;
  loop i (strlen $dataAfterType) [
    dataAfterTypeCharacter = (substr $dataAfterType $i 1);

    if (= $i 0) [
      // First character
      if (! (strstr $timeUnitTypes $dataAfterTypeCharacter)) [
        // It is not one of the allowed time unit specifiers
        break;
      ]
    ][
      // Not the first character
      if (! (testchar $dataAfterTypeCharacter 0)) [
        // It is not a digit
        break;
      ]
    ]

    ++ metaDataAfterTypeLength;
  ]

  return $metaDataAfterTypeLength;
]

//
// Creates and returns a time format specifier rule.
//
// @param string formatSpecifierMetaDataBeforeType ($arg1) The meta data before the format specifier type
// @param string formatSpecifierType ($arg2) The format specifier type
// @param string formatSpecifierMetaDataAfterType ($arg3) The meta data after the format specifier type
//
// @return string The created format specifier rule
//
function createTimeFormatSpecifierRule [

  formatSpecifierMetaDataBeforeType = $arg1;
  formatSpecifierType = $arg2;
  formatSpecifierMetaDataAfterType = $arg3;

  if (strcmp $formatSpecifierMetaDataBeforeType "") [
    numberOfZeroPaddingDigits = 0;
  ][
    numberOfZeroPaddingDigits = $formatSpecifierMetaDataBeforeType;
  ]

  if (strcmp $formatSpecifierMetaDataAfterType "") [
    timeUnitType = $TIME_FORMAT_SPECIFIER_TIME_UNIT_TYPE_NONE;
    numberOfTimeUnitTypePaddingWhitespaces = 0;
  ][
    timeUnitTypeString = (substr $formatSpecifierMetaDataAfterType 0 1);
    numberOfTimeUnitTypePaddingWhitespaces = (substr $formatSpecifierMetaDataAfterType 1);
    if (strcmp $numberOfTimeUnitTypePaddingWhitespaces "") [
      numberOfTimeUnitTypePaddingWhitespaces = 0;
    ]

    timeUnitType = (strpos $timeUnitTypes $timeUnitTypeString);
  ]

  timeFormatSpecifierRuleArray = (createTimeFormatSpecifierRuleArray $formatSpecifierType $numberOfZeroPaddingDigits $timeUnitType $numberOfTimeUnitTypePaddingWhitespaces);

  return (strreplace $timeFormatSpecifierRuleArray " " "_");
]
