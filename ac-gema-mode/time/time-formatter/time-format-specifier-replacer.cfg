//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Time format specifier replacer module for ac-gema-mode
//
// Provides functions to generate strings from given time intervals and time format specifier rules. 
//
// Requires:
//   * scripts/ac-gema-mode/time/time-formatter/time-colorizer.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-format-specifier-rule-array.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-unit-name-fetcher.cfg
//   * scripts/ac-gema-mode/time/time-interval-array.cfg
//   * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;


// Public Functions

//
// Generates and returns a minutes string from a given time interval and time format specifier rule.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param array timeFormatSpecifierRuleArray ($arg2) The time format specifier rule
// @param bool returnEmptyStringIfZero ($arg3) 1 if the string should be empty if the minutes part is zero, 0 otherwise
// @param array colorConfig ($arg4) The color config to use to colorize the string
//
// @return string The generated minutes string
//
const generateMinutesString [

  timeIntervalArray = $arg1;
  timeFormatSpecifierRuleArray = $arg2;
  returnEmptyStringIfZero = $arg3;
  colorConfig = $arg4;

  timeIntervalMinutes = (getTimeIntervalMinutes $arg1);
  if (&& $returnEmptyStringIfZero (= $timeIntervalMinutes 0)) [
    minutesString = "";
  ][

    minutesDigitsString = (generateTimePartDigitsString $timeIntervalMinutes $timeFormatSpecifierRuleArray $colorConfig);
    minutesTimeUnitNameString = (generateTimeUnitNameString $timeFormatSpecifierRuleArray "getMinutesTimeUnitName" $colorConfig);
    minutesString = (concatword $minutesDigitsString $minutesTimeUnitNameString);

  ]

  return $minutesString;

]

//
// Generates and returns a seconds string from a given time interval and time format specifier rule.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param array timeFormatSpecifierRuleArray ($arg2) The time format specifier rule
// @param bool returnEmptyStringIfZero ($arg3) 1 if the string should be empty if the seconds part is zero, 0 otherwise
// @param array colorConfig ($arg4) The color config to use to colorize the string
//
// @return string The generated seconds string
//
const generateSecondsString [

  timeIntervalArray = $arg1;
  timeFormatSpecifierRuleArray = $arg2;
  returnEmptyStringIfZero = $arg3;
  colorConfig = $arg4;

  timeIntervalSeconds = (getTimeIntervalSeconds $arg1);
  if (&& $returnEmptyStringIfZero (= $timeIntervalSeconds 0)) [
    secondsString = "";
  ][

    secondsDigitsString = (generateTimePartDigitsString $timeIntervalSeconds $timeFormatSpecifierRuleArray $colorConfig);
    secondsTimeUnitNameString = (generateTimeUnitNameString $timeFormatSpecifierRuleArray "getSecondsTimeUnitName" $colorConfig);
    secondsString = (concatword $secondsDigitsString $secondsTimeUnitNameString);

  ]

  return $secondsString;

]

//
// Generates and returns a milliseconds string from a given time interval and time format specifier rule.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param array timeFormatSpecifierRuleArray ($arg2) The time format specifier rule
// @param array colorConfig ($arg3) The color config to use to colorize the string
//
// @return string The generated milliseconds string
//
const generateMillisecondsString [

  timeIntervalArray = $arg1;
  timeFormatSpecifierRuleArray = $arg2;
  colorConfig = $arg3;

  timeIntervalMilliseconds = (getTimeIntervalMilliseconds $arg1);

  // Milliseconds are always shown even if they are 0
  millisecondsDigitsString = (generateTimePartDigitsString $timeIntervalMilliseconds $timeFormatSpecifierRuleArray $colorConfig);
  millisecondsTimeUnitNameString = (generateTimeUnitNameString $timeFormatSpecifierRuleArray "getMillisecondsTimeUnitName" $colorConfig);
  millisecondsString = (concatword $millisecondsDigitsString $millisecondsTimeUnitNameString);

  return $millisecondsString;

]

//
// Generates and returns a total time unit name string from a given time interval and time format specifier rule.
//
// @param array timeIntervalArray ($arg1) The time interval array
// @param array timeFormatSpecifierRuleArray ($arg2) The time format specifier rule
// @param int hideLeadingZeroTimeIntervalParts ($arg3) 1 if leading zero time intervals should be hidden, 0 otherwise
// @param array colorConfig ($arg4) The color config to use to colorize the string
//
// @return string The generated milliseconds string
//
const generateTotalTimeUnitNameString [

  timeInterval = $arg1;
  timeFormatSpecifierRuleArray = $arg2;
  hideLeadingZeroTimeIntervalParts = $arg3;
  colorConfig = $arg4;

  if ($hideLeadingZeroTimeIntervalParts) [
    // Leading zero time interval parts should be hidden, find the biggest non zero time unit
    if (> (getTimeIntervalMinutes $timeInterval) 0) [
      getTimeUnitNameFunctionName = "getMinutesTimeUnitName";
    ][
      if (> (getTimeIntervalSeconds $timeInterval) 0) [
        getTimeUnitNameFunctionName = "getSecondsTimeUnitName";
      ][
        // Minimum time unit is milliseconds, even if the milliseconds part is 0
        getTimeUnitNameFunctionName = "getMillisecondsTimeUnitName";
      ]
    ]
  ][
    // Leading zero time intervals should not be hidden, use the minutes time unit name
    getTimeUnitNameFunctionName = "getMinutesTimeUnitName";
  ]

  return (generateTimeUnitNameString $timeFormatSpecifierRuleArray $getTimeUnitNameFunctionName $colorConfig);

]


// Private Functions

//
// Generates and returns a time part digits string.
//
// @param int timePartDigits ($arg1) The time part digits (minutes, seconds or milliseconds)
// @param array timeFormatSpecifierRuleArray ($arg2) The time format specifier rule
// @param array colorConfig ($arg3) The color config to use to colorize the string
//
// @return string The generated time part digits string
//
const generateTimePartDigitsString [

  timePartDigits = $arg1;
  timeFormatSpecifierRuleArray = $arg2;
  colorConfig = $arg3;

  numberOfZeroPaddingDigits = (getTimeFormatSpecifierRuleArrayNumberOfZeroPaddingDigits $timeFormatSpecifierRuleArray);

  // Generate the digits string (l0 adds leading zeros)
  return (colorizeTime (l0 $numberOfZeroPaddingDigits $timePartDigits) $colorConfig);

]

//
// Generates and returns a time unit name string.
//
// @param array timeFormatSpecifierRuleArray ($arg1) The time format specifier rule
// @param string getTimeUnitNameFunctionName ($arg2) The name of the function to use to fetch the time unit name
// @param array colorConfig ($arg3) The color config to use to colorize the string
//
// @return string The generated time unit name string
//
const generateTimeUnitNameString [

  timeFormatSpecifierRuleArray = $arg1;
  getTimeUnitNameFunctionName = $arg2;
  colorConfig = $arg3;

  numberOfPaddingWhitespaces = (getTimeFormatSpecifierRuleArrayNumberOfTimeUnitTypePaddingWhitespaces $timeFormatSpecifierRuleArray);
  timeUnitNamePaddingWhitespace = (strrepeat " " $numberOfPaddingWhitespaces);

  timeUnitType = (getTimeFormatSpecifierRuleArrayTimeUnitType $timeFormatSpecifierRuleArray);
  timeUnitName = (colorizeTimeUnit ($getTimeUnitNameFunctionName $timeUnitType) $colorConfig);

  return (concatword $timeUnitNamePaddingWhitespace $timeUnitName);

]
