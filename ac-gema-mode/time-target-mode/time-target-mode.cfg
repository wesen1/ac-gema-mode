//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

exec "scripts/ac-gema-mode/time-target-mode/time-target.cfg";
exec "scripts/ac-gema-mode/time-target-mode/count-down.cfg";
exec "scripts/ac-gema-mode/time-target-mode/time-target-auto-updater.cfg";

//
// Time target module for ac-gema-mode
// Provides methods to de-/activate the time target mode.
// Also provides methods to fetch the current time target mode state.
//
// Requires:
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/score-attempt.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target.cfg
//   * scripts/ac-gema-mode/time-target-mode/count-down.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-auto-updater.cfg
//

// Options

//
// Option to auto reset the time target to 0 on quit
//
// @var int $optionResetTimeTargetOnQuit
//
check2init optionResetTimeTargetOnQuit 1;


//
// Stores whether the time target mode is currently active
//
// @var int $timeTargetModeIsActive
//
check2init timeTargetModeIsActive 0;


persistidents 0;

// Public Functions

//
// Sets the time target mode state (Enables/Disables the time target mode).
//
// @param int $arg1 The state to which the time target mode will be set
//
const setTimeTargetModeState [

  newTimeTargetModeState = $arg1;
  timeTargetModeStateCanBeChanged = (!= $timeTargetModeIsActive $newTimeTargetModeState);

  if (&& (= $newTimeTargetModeState 1) (|| $timeTargetModeStateCanBeChanged (! (isTimeTargetModeActive)))) [
    // If the time target mode shall be activated and either:
    //   * The time target mode state can be changed
    //   * The time target mode is not active despite $timeTargetModeIsActive matching the new time target mode state

    timeTargetModeCanNotBeActivatedReason = (getTimeTargetModeCanNotBeActivatedReason);
    if (> (strlen $timeTargetModeCanNotBeActivatedReason) 0) [
      printGemaNotification (format $messageTimeTargetModeCanNotBeActivated $timeTargetModeCanNotBeActivatedReason);
      timeTargetModeStateCanBeChanged = 0;
    ]

  ]

  // Update the time target mode state
  if ($timeTargetModeStateCanBeChanged) [

    timeTargetModeIsActive = $arg1;

    if ($timeTargetModeIsActive) [
      onEnableTimeTargetMode;
    ][
      onDisableTimeTargetMode;
    ]

  ]

]

//
// Returns whether the time target mode is currently active.
//
// @return int 1 if the time target mode is active, 0 otherwise
//
const isTimeTargetModeActive [
  return (&& (isGemaModeActive) $timeTargetModeIsActive);
]


// Private Functions

//
// Returns the reason why the time target mode can not be activated.
//
// @return String The reason or an empty string if the time target mode can be activated
//
const getTimeTargetModeCanNotBeActivatedReason [

  if (! (isGemaModeActive)) [
    return $messageGemaModeNotActive;
  ][
    if (< $timeTarget 0) [
      return $messageInvalidTimeTarget;
    ]
  ]

]

//
// Shows a message that indicates whether the time target was beaten.
//
// @param int $arg1 The record time in milliseconds
//
const showTimeTargetScoreString [

  if (< $arg1 $timeTarget)[
    printGemaNotification $messageTimeTargetBeaten;
  ][
    if (= $arg1 $timeTarget)[
      printGemaNotification $messageTimeTargetTied;
    ][
      printGemaNotification $messageSlowerThanTimeTarget;
    ]
  ]

]

//
// Starts a new count down for the time target.
//
// @param int $arg1 The count down time in milliseconds
//
const startCountDown [

  countDownMilliseconds = $arg1;
  if (> $countDownMilliseconds 0) [
    initializeCountDown $countDownMilliseconds $messageTimeTargetFinished;
  ]

]


// Custom Events

//
// Event handler that is called when the time target mode state changes to enabled.
//
checkinit onEnableTimeTargetMode [
]

//
// Event handler that is called when the time target mode state changes to disabled.
//
checkinit onDisableTimeTargetMode [
  setCountDownModeState 0;
]


// Event handlers

//
// Event handler that is called when the time target is changed with 'setTimeTarget'.
//
checkinit onTimeTargetChange [

  // Abort the running countdown
  if (isCountDownActive) [
    abortCountDown;
  ]

  // Start a new countdown with the remaining time target time
  remainingCountDownMilliseconds = (- $timeTarget (getTimeSinceScoreAttemptStart));
  startCountDown $remainingCountDownMilliseconds;

]

//
// Event handler that is called after a score attempt was started.
//
checkinit onScoreAttemptStartAfter [
  if (isCountDownModeActive) [
    startCountDown $timeTarget;
  ]
]

//
// Event handler that is called after a score attempt was finished.
//
// @param int $arg1 The score weapon id
// @param int $arg2 The record time in milliseconds
//
checkinit onScoreAttemptFinishAfter [

  if (isTimeTargetModeActive) [

    scoreWeaponId = $arg1;
    newRecordTime = $arg2;

    if (&& (isCountDownModeActive) (isCountDownActive)) [
      abortCountDown;
    ]

    // Check if the time target matches the score time compare value
    if (= $optionScoreTimeCompareValue 0) [
      scoreTimeCompareValue = (loadMapRecord (curmap) (getBestMapRecordWeaponId));
    ][
      scoreTimeCompareValue = (loadMapRecord (curmap) $scoreWeaponId);
    ]

    // Don't show the score string when the time target matches the map record because the map record score
    // string and time target string will always show the same information in that case
    if (!= $timeTarget $scoreTimeCompareValue) [
      showTimeTargetScoreString $newRecordTime;
    ]

  ]

]

//
// Event handler that is called after a score attempt was aborted.
//
checkinit onScoreAttemptAbortAfter [
  if (&& (isCountDownModeActive) (isCountDownActive)) [
    abortCountDown;
  ]
]

//
// Event handler that is called when the game is closed.
//
checkinit onQuit [
  if ($optionResetTimeTargetOnQuit) [
    setTimeTarget 0;
  ]
]
