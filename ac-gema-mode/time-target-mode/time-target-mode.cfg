//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Time target module for ac-gema-mode
//
// Handles printing of comparisons of the current time target to score times and manages shown countdowns.
//
// Requires:
//   * scripts/ac-gema-mode/colors.cfg
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/current-score-attempt.cfg
//   * scripts/ac-gema-mode/strings
//   * scripts/ac-gema-mode/time-target-mode/countdown-mode/countdown-mode.cfg
//   * scripts/ac-gema-mode/time-target-mode/countdown-mode/countdown.cfg
//   * scripts/ac-gema-mode/time-target-mode/current-time-target-mode-state.cfg
//   * scripts/ac-gema-mode/time-target-mode/current-time-target.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-auto-updater.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

// Options

//
// Option to show the difference in milliseconds to the time target on score (Default: 1)
//
// @var int $optionShowDifferenceToTimeTarget
//
option optionShowDifferenceToTimeTarget 1;

persistidents 0;


// Public Functions

//
// Returns whether the time target mode is currently active.
//
// @return int 1 if the time target mode is active, 0 otherwise
//
function isTimeTargetModeActive [
  return (&& (isGemaModeActive) (= (getCurrentTimeTargetModeState) 1));
]


// Private Functions

//
// Returns a message that indicates whether the time target was beaten.
//
// @param int scoreTime ($arg1) The score time in milliseconds
//
// @return string The message
//
function getTimeTargetScoreString [

  timeDifference = (- (getCurrentTimeTargetTotalMilliseconds) $arg1);

  if (> $timeDifference 0) [

    if (= $optionShowDifferenceToTimeTarget 1) [
      timeTargetDifferenceString = (generateTimeStringFromMilliseconds $timeDifference $colorsTimeTargetTime);
      return (format $messageTimeTargetBeatenWithDifference $timeTargetDifferenceString);
    ][
      return $messageTimeTargetBeaten;
    ]

  ][

    if (= $timeDifference 0) [
      // The score time and time target match, no need to show the difference of 0 milliseconds
      return $messageTimeTargetTied;
    ][
      if (= $optionShowDifferenceToTimeTarget 1) [
        timeTargetDifferenceString = (generateTimeStringFromMilliseconds (* $timeDifference -1) $colorsTimeTargetTime);
        return (format $messageSlowerThanTimeTargetWithDifference $timeTargetDifferenceString);
      ][
        return $messageSlowerThanTimeTarget;
      ]
    ]
  ]

]

//
// Starts a new countdown for the current time target.
//
// @param int countdownDuration ($arg1) The countdown duration in milliseconds
//
function startTimeTargetCountdown [
  timeTargetCountdownMilliseconds = $arg1;
  if (> $timeTargetCountdownMilliseconds 0) [
    startCountdown $timeTargetCountdownMilliseconds $messageTimeTargetFinished;
  ]
]


// Event handlers

//
// Event handler that is called when the time target is changed via the "changeCurrentTimeTarget" function.
//
eventlistener onTimeTargetChanged [

  if (isCountdownModeActive) [
    if (isCountdownActive) [
      // Abort the running countdown
      abortCountdown;
    ]

    if (isScoreAttemptActive) [
      // Start a new countdown with the remaining time target time
      startTimeTargetCountdown (- (getCurrentTimeTargetTotalMilliseconds) (getMillisecondsPassedSinceCurrentScoreAttemptStart));
    ]
  ]

]

//
// Event handler that is called after the current score attempt was started.
//
eventlistener onCurrentScoreAttemptStarted [
  if (isCountdownModeActive) [
    startTimeTargetCountdown (getCurrentTimeTargetTotalMilliseconds);
  ]
]

//
// Event handler that is called after the current score attempt was finished.
//
// @param array scoreAttemptMapRecord ($arg1) The map record that was created from the score attempt
// @param array comparisonMapRecord ($arg2) The map record to which the score attempt map record will be compared
// @param int isComparisonToBestMapRecord ($arg3) 1 if the comparison map record is the best map record for its map, 0 otherwise
//
eventlistener onCurrentScoreAttemptFinished [

  if (&& (isTimeTargetModeActive) (> (getCurrentTimeTargetTotalMilliseconds) 0)) [

    mapRecord = $arg1;
    scoreAttemptCompareTime = (getMapRecordScoreTime $arg2);

    if (isCountdownActive) [
      abortCountdown;
    ]

    // Don't show the score string when the time target matches the score time compare value because
    // the score string and time target string would show the same information in that case
    if (!= (getCurrentTimeTargetTotalMilliseconds) $scoreAttemptCompareTime) [
      printGemaNotification (getTimeTargetScoreString (getMapRecordScoreTime $mapRecord));
    ]

    applyDelayedTimeTargetUpdateIfRequired;

  ]

]

//
// Event handler that is called after the current score attempt was aborted.
//
eventlistener onCurrentScoreAttemptAborted [
  if (isCountdownActive) [
    abortCountdown;
  ]
]
