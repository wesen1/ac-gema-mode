//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

//
// Time target module for ac-gema-mode
// Handles setting and getting of the current time target
//
// Requires
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-mode.cfg
//   * scripts/ac-gema-mode/util/time-parser.cfg
//


//
// The current time target in milliseconds
//
// @var int $timeTarget
//
check2init timeTarget 0;


persistidents 0;

// Public Functions

//
// Returns the time target.
//
// @return int The time target in milliseconds
//
const getTimeTarget [
  return $timeTarget;
]


// Stores the maximum allowed integer value to calculate the maximum allowed time target
const maximumAllowedIntegerValue 2147483647;


//
// Returns the minutes part of the time target.
//
// @return int The minutes part of the time target
//
const timeTargetGetMinutes [
  return (at (timeParserConvertMilliseconds $timeTarget) 0);
]

//
// Changes the minutes part of the time target.
//
// @param int $arg1 The minutes part of the time target
//
const timeTargetSetMinutes [

  if (|| (< $arg1 0) (> $arg1 35791)) [
    printGemaNotification $messageInvalidTimeTargetMinutes;
  ][
    timeTargetDifferenceMinutes = (- $arg1 (timeTargetGetMinutes));
    timeTargetDifferenceMilliseconds = (* (* $timeTargetDifferenceMinutes 60) 1000);

    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]

//
// Returns the seconds part of the time target.
//
// @return int The seconds part of the time target
//
const timeTargetGetSeconds [
  return (at (timeParserConvertMilliseconds $timeTarget) 1);
]

//
// Changes the seconds part of the time target.
//
// @param int $arg1 The seconds part of the time target
//
const timeTargetSetSeconds [

  if (|| (< $arg1 0) (> $arg1 59)) [
    printGemaNotification $messageInvalidTimeTargetSeconds;
  ][
    timeTargetDifferenceSeconds = (- $arg1 (timeTargetGetSeconds));
    timeTargetDifferenceMilliseconds = (* $timeTargetDifferenceSeconds 1000);

    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]

//
// Returns the milliseconds part of the time target.
//
// @return int The milliseconds part of the time target
//
const timeTargetGetMilliseconds [
  return (at (timeParserConvertMilliseconds $timeTarget) 2);
]

//
// Changes the milliseconds part of the time target.
//
// @param int $arg1 The milliseconds part of the time target
//
const timeTargetSetMilliseconds [

  if (|| (< $arg1 0) (> $arg1 999)) [
    printGemaNotification $messageInvalidTimeTargetMilliseconds;
  ][
    timeTargetDifferenceMilliseconds = (- $arg1 (timeTargetGetMilliseconds));
    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]


// Private Functions

//
// Sets the time target.
//
// @param int $arg1 The time target in milliseconds
//
const setTimeTarget [

  newTimeTarget = $arg1;

  if (&& (isTimeTargetModeActive (< $newTimeTarget 0))) [
    printGemaNotification (format $messageTimeTargetCanNotBeSet $messageInvalidTimeTarget);
  ][
    timeTarget = $newTimeTarget;
  ]

]

//
// Adds a time difference in milliseconds to the time target.
//
// @param int $arg1 The time difference in milliseconds
//
const addMillisecondsToTimeTarget [

  maximumAllowedDifference = (- $maximumAllowedIntegerValue $timeTarget);

  if (> $arg1 $maximumAllowedDifference) [
    printGemaNotification (format $messageTimeTargetExceedsMaximum (generateTimeString $maximumAllowedIntegerValue 1));
  ][
    if (< $arg1 (- 0 $timeTarget)) [
      printGemaNotification (format $messageTimeTargetFallsBelowMinimum (generateTimeString 0 1));
    ][
      setTimeTarget (+ $timeTarget $arg1);
    ]
  ]

]
