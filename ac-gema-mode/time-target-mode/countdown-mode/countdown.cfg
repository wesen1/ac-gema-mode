//
// @author wesen
// @copyright 2018-2020 wesen <wesen-ac@web.de>
//

//
// Countdown module for ac-gema-mode
//
// Handles running of countdowns.
// There can only be one active countdown at a time.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

persistidents 0;


// Global variables

//
// The number of remaining coutndown milliseconds of the current running countdown
//
// @var int $remainingCountdownMilliseconds
//
cache remainingCountdownMilliseconds -1;

//
// The timestamp of the last countdown tick in milliseconds since game start
//
// @var int $lastCountdownTickTimestamp
//
cache lastCountdownTickTimestamp 0;


// Public Functions

//
// Aborts the current countdown.
//
function abortCountdown [
  remainingCountdownMilliseconds = -1;
]

//
// Returns whether a countdown is active at the moment.
//
// @return int 1 if there is an active countdown, 0 otherwise
//
function isCountdownActive [
  return (> $remainingCountdownMilliseconds 0);
]


//
// Runs a countdown.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
// @param int countdownMilliseconds ($arg2) The duration of the countdown in milliseconds
//
function runCountdown [

  lastCountdownTickTimestamp = (millis);

  countdownIdentifier = $arg1;
  remainingCountdownMilliseconds = $arg2;
  initialCountdownTickMilliseconds = (mod $arg2 1000);

  sleep $initialCountdownTickMilliseconds [
    countdownTick $countdownIdentifier $initialCountdownTickMilliseconds;
  ]

]


// Private Functions

//
// Fires the "onCountdownTick" event if this is not the last tick or the "onCountdownFinished" event if
// this is the last tick.
// Also calls this function again after one second with the updated number of remaining milliseconds if
// it this is not the last tick.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
// @param int lastTickDuration ($arg2) The duration of the last countdown tick in milliseconds
//
//
function countdownTick [

  if (&& (>= (- $remainingCountdownMilliseconds $arg2) 0) (>= (- (millis) $lastCountdownTickTimestamp) $arg2)) [
    // At least 0 countdown milliseconds are remaining and at least <lastTickDuration> milliseconds
    // passed since the last countdown tick timestamp

    lastCountdownTickTimestamp = (millis);

    countdownIdentifier = $arg1;
    remainingCountdownMilliseconds = (- $remainingCountdownMilliseconds $arg2);

    if (= $remainingCountdownMilliseconds 0) [
      remainingCountdownMilliseconds = -1;
      onCountdownFinished $countdownIdentifier;
    ][
      onCountdownTick $countdownIdentifier $remainingCountdownMilliseconds;
      sleep 1000 [
        countdownTick $countdownIdentifier 1000;
      ]
    ]

  ]

]


// Custom Events

//
// Event handler that is called on each countdown tick.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
// @param int remainingCountdownMilliseconds ($arg2) The number of remaining countdown milliseconds
//
event onCountdownTick [
]

//
// Event handler that is called when a countdown is finished.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
//
event onCountdownFinished [
]
