//
// @author wesen
// @copyright 2018-2020 wesen <wesen-ac@web.de>
//

//
// Countdown mode module for ac-gema-mode
//
// Provides functions to start a time target countdown.
// Also handles automatic stopping of the countdown.
//
// Requires:
//   * scripts/ac-gema-mode/colors.cfg
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/strings
//   * scripts/ac-gema-mode/time/time-formatter.cfg
//   * scripts/ac-gema-mode/time/time-format-manager.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-mode.cfg
//   * scripts/ac-gema-mode/time-target-mode/countdown-mode/current-countdown-mode-state.cfg
//   * scripts/ac-gema-mode/time-target-mode/countdown-mode/countdown.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

persistidents 0;


// Global variables

//
// The "countdown finished" message of the current running time target countdown
//
// @var string $currentTimeTargetCountdownFinishedMessage
//
cache currentTimeTargetCountdownFinishedMessage "";


// Public Functions

//
// Returns whether the countdown mode is currently active.
//
// @return int 1 if the countdown mode is active, 0 otherwise
//
function isCountdownModeActive [
  return (&& (isTimeTargetModeActive) (= (getCurrentCountdownModeState) 1));
]

//
// Starts a new time target countdown.
//
// @param int timeTarget ($arg1) The time target in milliseconds
// @param string countdownFinishedMessage ($arg2) The message to show when the countdown is finished
//
function startCountdown [
  currentTimeTargetCountdownFinishedMessage = $arg2;
  runCountdown "TimeTargetCountdown" $arg1;
]


// Private Functions

//
// Returns the countdown colors based on the number of remaining milliseconds.
//
// @param int remainingCountdownMilliseconds ($arg1) The number of remaining countdown milliseconds
//
// @return array The countdown colors
//
// @example `getCountdownColors 14000` Returns $colorsCountdownDefault
// @example `getCountdownColors 8000` Returns $colorsCountdownLessThanTenSecondsRemaining
// @example `getCountdownColors 2000` Returns $colorsCountdownLessThanFourSecondsRemaining
//
function getCountdownColors [

  if (< $arg1 4000)[
    return $colorsCountdownLessThanFourSecondsRemaining;
  ][
    if (< $arg1 10000)[
      return $colorsCountdownLessThanTenSecondsRemaining;
    ][
      return $colorsCountdownDefault;
    ]
  ]

]


// Event Handlers

//
// Event listener that will be called after saved.cfg was loaded.
//
eventlistener afterinit [
  addTimeFormatScope "Countdown" $colorsCountdownDefault "%02i:%02s";
]

//
// Event handler that is called when the countdown mode state changes from "enabled" to "disabled".
//
eventlistener onCountdownModeDisabled [
  abortCountdown;
]

//
// Event handler that is called on each countdown tick.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
// @param int remainingCountdownMilliseconds ($arg2) The number of remaining countdown milliseconds
//
eventlistener onCountdownTick [

  if (strcmp $arg1 "TimeTargetCountdown") [
    echo (generateTimeStringFromMilliseconds $arg2 (getCountdownColors $arg2) (getTimeFormatForScope "Countdown"));
  ]

]

//
// Event handler that is called when a countdown is finished.
//
// @param string countdownIdentifier ($arg1) The countdown identifier
//
eventlistener onCountdownFinished [

  if (strcmp $arg1 "TimeTargetCountdown") [
    echo (format $messageCountdownFinishMessage $currentTimeTargetCountdownFinishedMessage);
  ]

]
