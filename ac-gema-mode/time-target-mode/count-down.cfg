//
// @author wesen
// @copyright 2018-2020 wesen <wesen-ac@web.de>
//

//
// Countdown module for ac-gema-mode
//
// Handles printing of countdowns
// There can only be one active countdown at a time
//
// Requires:
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-mode.cfg
//   * scripts/ac-gema-mode/util/time-parser.cfg
//

// Global variables

//
// Stores whether the count down mode is currently active
//
// @var int $countDownModeIsActive
//
check2init countDownModeIsActive 0;


persistidents 0;

//
// Stores whether a countdown is currently running
//
// @var int $countDownIsActive
//
check2init countDownIsActive 0;

//
// The initial number of seconds of the current countdown
//
// @var int $countDownSeconds
//
check2init countDownSeconds 0;

//
// The timestamp of the last countdown change
//
// @var int $lastCountDownChangeTimeStamp
//
check2init lastCountDownChangeTimeStamp 0;


//
// Sets the countdown mode state (Enables/Disables the count down mode).
//
// @param int newState ($arg1) The new countdown mode state
//
// @example `setCountDownModeState 1` Activates the countdown mode if it can be activated
//
const setCountDownModeState [

  newCountDownModeState = $arg1;
  countDownModeStateCanBeChanged = (!= $countDownModeIsActive $newCountDownModeState);

  if (&& (= $newCountDownModeState 1) (|| $countDownModeStateCanBeChanged (! (isCountDownModeActive)))) [
    // If the countdown mode shall be activated and either:
    //   * The countdown mode state can be changed
    //   * The countdown mode is not active despite $countDownModeIsActive matching the new countdown mode state

    countDownModeCanNotBeActivatedReason = (getCountDownModeCanNotBeActivatedReason);
    if (> (strlen $countDownModeCanNotBeActivatedReason) 0) [
      printGemaNotification (format $messageCountDownModeCanNotBeActivated $countDownModeCanNotBeActivatedReason);
      countDownModeStateCanBeChanged = 0;
    ]

  ]

  if ($countDownModeStateCanBeChanged) [
    countDownModeIsActive = $newCountDownModeState;
    if (! $countDownModeIsActive) [
      abortCountDown;
    ]
  ]

]

//
// Returns whether the countdown mode is currently active.
//
// @return int 1 if the countdown mode is active, 0 otherwise
//
const isCountDownModeActive [
  return (&& (isTimeTargetModeActive) $countDownModeIsActive);
]

//
// Aborts the current count down.
//
const abortCountDown [
  countDownIsActive = 0;
]

//
// Returns whether there is a countdown running at the moment.
//
// @return int 1 if there is a countdown running at the moment, 0 otherwise
//
const isCountDownActive [
  return (&& (isCountDownModeActive) $countDownIsActive);
]

//
// Shows a countdown in seconds in the console.
//
// @param int countDownDuration ($arg1) The duration of the countdown in milliseconds
// @param string countDownFinishMessage ($arg2) The message to show when the countdown is finished
//
// @example `initializeCountDown 10000 hello` Counts down from 10 to 1 seconds and prints "hello" when the countdown reaches 0 seconds
//
const initializeCountDown [

  lastCountDownChangeTimeStamp = 0;
  countDownIsActive = 1;
  countDownFinishedMessage = $arg2;

  parsedCountDownTime = (timeParserConvertMilliseconds $arg1);
  countDownSeconds = (+ (at $parsedCountDownTime 1) (* (at $parsedCountDownTime 0) 60));
  countDownMilliseconds = (at $parsedCountDownTime 2);

  sleep $countDownMilliseconds [
    showCountDown $countDownSeconds $countDownFinishedMessage;
  ]

]


// Private Functions

//
// Returns the reason why the countdown mode can not be activated.
//
// @return string The reason or an empty string if the countdown mode can be activated
//
const getCountDownModeCanNotBeActivatedReason [
  if (! (isTimeTargetModeActive)) [
    return $messageTimeTargetModeNotActive;
  ]
]

//
// Displays the remaining seconds, counts down a second and calls this function again after one second with
// the updated number of remaining seconds.
// If the number of remaining seconds is 0 the count down finish message will be displayed instead.
//
// @param int numberOfRemainingSeconds ($arg1) The number of remaining seconds
// @param string countDownFinishMessage ($arg2) The message to show when the countdown is finished
//
// @example `showCountDown 10 done` Shows "00:10" and calls itself again after 1 second with the arguments "9" and "done"
// @example `showCountDown 0 finished` Shows the message "finished"
//
const showCountDown [

  if (&& (isCountDownActive) (isValidShowCountDownCall $arg1)) [

    remainingSeconds = $arg1;
    countDownFinishedMessage = $arg2;

    if (= $remainingSeconds 0) [
      countDownIsActive = 0;
      echo (format $messageCountDownFinishMessage $countDownFinishedMessage);
    ][

      echo (concat (getCountDownColor $remainingSeconds) (generateTimeString (* $remainingSeconds 1000) 0));
      lastCountDownChangeTimeStamp = (millis);

      sleep 1000 [
        showCountDown (- $remainingSeconds 1) $countDownFinishedMessage;
      ]
    ]

  ]

]

//
// Returns whether a showCountDown function call is valid.
//
// @param int numberOfRemainingSeconds ($arg1) The number of remaining seconds
//
// @return int 1 if the showCountDown function call is valid, 0 otherwise
//
const isValidShowCountDownCall [

  result 0;

  if ($lastCountDownChangeTimeStamp) [
    if (>= (- (millis) $lastCountDownChangeTimeStamp) 1000) [
      return 1;
    ]
  ][
    if (= $arg1 $countDownSeconds) [
      return 1;
    ]
  ]

]

//
// Returns the countdown color based on the number of remaining seconds.
//
// @param int numberOfRemainingSeconds ($arg1) The number of remaining seconds
//
// @return string The countdown color
//
// @example `getCountDownColor 14` Returns $countDownColorDefault
// @example `getCountDownColor 8` Returns $countDownColorLessThanTenSecondsRemaining
// @example `getCountDownColor 2` Returns $countDownColorLessThanFourSecondsRemaining
//
const getCountDownColor [

  countDownColor = $colorCountDownDefault;

  if (< $arg1 4)[
    countDownColor = $colorCountDownLessThanFourSecondsRemaining;
  ][
    if (< $arg1 10)[
      countDownColor = $colorCountDownLessThanTenSecondsRemaining;
    ]
  ]

  return (c $countDownColor);

]
