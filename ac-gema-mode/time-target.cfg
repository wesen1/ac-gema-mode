//
// @author wesen
// @copyright 2017-2018 wesen <wesen-ac@web.de>
//

//
// Time target module for ac-gema-mode
//
// Handles the time target mode
//
// Requires:
//   * scripts/ac-gema-mode/count-down.cfg
//   * scripts/ac-gema-mode/environment-checker.cfg
//   * scripts/ac-gema-mode/time-parser.cfg
//

check2init timeTargetModeActive 0;  // De-/activates time target mode
check2init timeTarget 0;            // The time target in milliseconds

persistidents 0;

//
// Sets the time target mode state.
//
// @param int $arg1 The new time target mode state
//                  0: Deactivates the time target mode
//                  1: Activates the time target mode
//
const setTimeTargetModeActive [

  if (isGemaModeActive) [

    timeTargetModeActive = $arg1;
    if (! $arg1) [
      setCountDownTime 0;
    ]

  ][
    printGemaNotification (concat (c $colorError) "Can not change the time target mode state: Gema mode is not activated.");
  ]
]

//
// Returns whether the time target mode is currently active.
//
// @return int 0: Time target mode is not active
//             1: Time target mode is active
//
const isTimeTargetModeActive [

  if (&& (isGemaModeActive) (&& $timeTargetModeActive (> $timeTarget 0))) [
    return 1;
  ][
    return 0;
  ]

]


//
// Sets the time target.
//
// @param int $arg1 The time target in milliseconds
//
const setTimeTarget [
  timeTarget = $arg1;
]

//
// Returns the time target.
//
// @return int The time target in milliseconds
//
const getTimeTarget [
  return $timeTarget;
]


// Stores the maximum allowed integer value to calculate the maximum allowed time target
const maximumAllowedIntegerValue 2147483647;

//
// Adds a time difference in milliseconds to the time target.
//
// @param int $arg1 The time difference in milliseconds
//
const addMillisecondsToTimeTarget [

  maximumAllowedDifference = (- $maximumAllowedIntegerValue $timeTarget);

  if (> $arg1 $maximumAllowedDifference) [
    printGemaNotification (concat (c $colorError) "The time target may not be bigger than" (generateTimeString $maximumAllowedIntegerValue 1));
  ][
    if (< $arg1 (- 0 $timeTarget)) [
      printGemaNotification (concat (c $colorError) "The time target may not be smaller than" (generateTimeString 0 1));
    ][
      setTimeTarget (+ $timeTarget $arg1);
    ]
  ]

]


//
// Returns the minutes part of the time target.
//
// @return int The minutes part of the time target
//
const timeTargetGetMinutes [
  return (at (timeParserConvertMilliseconds $timeTarget) 0);
]

//
// Changes the minutes part of the time target.
//
// @param int $arg1 The minutes part of the time target
//
const timeTargetSetMinutes [

  if (|| (< $arg1 0) (> $arg1 35791)) [
    printGemaNotification (concat (c $colorError) "Error: The minutes of the time target must be between 0 and 35791.");
  ][
    timeTargetDifferenceMinutes = (- $arg1 (timeTargetGetMinutes));
    timeTargetDifferenceMilliseconds = (* (* $timeTargetDifferenceMinutes 60) 1000);

    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]

//
// Returns the seconds part of the time target.
//
// @return int The seconds part of the time target
//
const timeTargetGetSeconds [
  return (at (timeParserConvertMilliseconds $timeTarget) 1);
]

//
// Changes the seconds part of the time target.
//
// @param int $arg1 The seconds part of the time target
//
const timeTargetSetSeconds [

  if (|| (< $arg1 0) (> $arg1 59)) [
    printGemaNotification (concat (c $colorError) "Error: The seconds of the time target must be between 0 and 59.");
  ][
    timeTargetDifferenceSeconds = (- $arg1 (timeTargetGetSeconds));
    timeTargetDifferenceMilliseconds = (* $timeTargetDifferenceSeconds 1000);

    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]

//
// Returns the milliseconds part of the time target.
//
// @return int The milliseconds part of the time target
//
const timeTargetGetMilliseconds [
  return (at (timeParserConvertMilliseconds $timeTarget) 2);
]

//
// Changes the milliseconds part of the time target.
//
// @param int $arg1 The milliseconds part of the time target
//
const timeTargetSetMilliseconds [

  if (|| (< $arg1 0) (> $arg1 999)) [
    printGemaNotification (concat (c $colorError) "Error: The milliseconds of the time target must be between 0 and 999.");
  ][
    timeTargetDifferenceMilliseconds = (- $arg1 (timeTargetGetMilliseconds));
    addMillisecondsToTimeTarget $timeTargetDifferenceMilliseconds;
  ]

]


////////////////////////////////////////////////////////////////////////////////////
// on Score functions
////////////////////////////////////////////////////////////////////////////////////

//
// Shows a message that indicates whether the time target was beaten.
//
// @param int $arg1 The record time in milliseconds
//
const showTimeTargetScoreString [

  if (< $arg1 $timeTarget)[
    printGemaNotification (concat (c $colorTimeTargetBeaten) "You were faster than your time target");
  ][
    if (= $arg1 $timeTarget)[
      printGemaNotification (concat (c $colorTimeTargetTied) "Tied your time target");
    ][
      printGemaNotification (concat (c $colorTimeTargetNotBeaten) "You were slower than your time target");
    ]
  ]

]
