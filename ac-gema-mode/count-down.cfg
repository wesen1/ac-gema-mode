//
// @author wesen
// @copyright 2018 wesen <wesen-ac@web.de>
//

//
// Count down module for ac-gema-mode
//
// Handles printing of count downs
//
// Requires:
//   * scripts/ac-gema-mode/time-parser.cfg
//   * scripts/ac-gema-mode/time-target.cfg
//
check2init countDownModeActive 0;   // De-/activates countdown mode
check2init countDownTime 0;         // Stores the initial time of the current count down in milliseconds
check2init lastCountDownChange 0;   // Stores the milliseconds since game start of the last countdown change

persistidents 0;

//
// Changes the countDownModeActive variable.
//
// @param int $arg1 The new count down state
//                  0: Deactivates the count down
//                  1: Activates the count down
//
const setCountDownModeActive [

  if (&& (! (isTimeTargetModeActive)) $arg1) [
    printGemaNotification (concat (c $colorError) "Can not activate count down: Time target mode is not activated.");
  ][
    countDownModeActive = $arg1;
  ]

]

//
// Returns whether the countdown mode is currently active.
//
// @return int 0: Countdown mode is not active
//             1: Countdown mode is active
//
const isCountDownModeActive [
  return $countDownModeActive;
]

//
// Sets the count down time.
// Set the time to 0 to disable the count down.
//
// @param int $arg1 The new count down time
//
const setCountDownTime [
  countDownTime = $arg1;
]

//
// Returns whether there is a countdown currently running.
//
// @return int 0: There is a countdown currently running
//             1: There is no countdown currently running
//
const isCountDownActive [

  if (> $countDownTime 0) [
    return 1;
  ][
    return 0;
  ]

]


//
// Shows a count down in seconds in the console.
//
// @param int $arg1 The length of the count down in milliseconds
//
const initializeCountDown [

  lastCountDownChange = 0;
  countDownTime = $arg1;
  parsedCountDownTime = (timeParserConvertMilliSeconds $countDownTime);

  countDownSeconds = (+ (at $parsedCountDownTime 1) (* (at $parsedCountDownTime 0) 60));
  countDownMilliseconds = (at $parsedCountDownTime 2);

  sleep $countDownMilliseconds [
    showCountDown $countDownSeconds 1000;
  ]

]

//
// Counts down a second and displays the seconds remaining.
//
// @param int $arg1 Remaining seconds
//
const showCountDown [

  // If last count down change is at least 1000 milliseconds ago or
  // if last count down change is 0 and the count down seconds are equal to the initial number of countdown seconds
  if (&& (isCountDownActive) (|| (&& $lastCountDownChange (>= (- (millis) $lastCountDownChange) 1000)) (&& (! $lastCountDownChange) (= $arg1 $countDownSeconds)))) [

    remainingSeconds = $arg1;

    if (= $remainingSeconds 0) [
      countDownTime = 0;
      echo (c 3) "Time target finished";
    ][

      echo (concat (getCountDownColor $remainingSeconds) (generateTimeString (* $remainingSeconds 1000) 0));
      lastCountDownChange = (millis);

      sleep 1000 [
        showCountDown (- $remainingSeconds 1) 0
      ]
    ]

  ]

]

//
// Returns the count down color based on the amount of seconds remaining.
//
// @param int $arg1 The amount of seconds remaining
//
// @return String The count down color
//
const getCountDownColor [

  countDownColor = "J";

  if (< $arg1 4)[
    countDownColor = "3";
  ][
    if (< $arg1 10)[
      countDownColor = "9";
    ]
  ]

  return (c $countDownColor);

]
