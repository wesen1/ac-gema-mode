// Ingame Reference
docsection "ac-gema-mode";

// array-utils.cfg
docident "array_length" "Returns the number of elements inside an array";
docargument "A" "The array";
docargument "S" "The array separator";
docexample "array_length 'a b c' ' '" "Returns 3";
docexample "array_length 'a  b c' '  '" "Returns 2";

docident "array_getIndexStartPosition" "Returns the start position of an array index inside the total array string";
docargument "A" "The array";
docargument "S" "The array separator";
docargument "I" "The index position";
docexample "array_getIndexStartPosition 'hello world' ' ' 1" "Returns 6";

docident "array_getIndexEndPosition" "Returns the end position of an array index inside the total array string";
docargument "A" "The array";
docargument "S" "The array separator";
docargument "I" "The index position";
docexample "array_getIndexEndPosition 'hello world' ' ' 0" "Returns 4";

docident "array_slice" "Returns a part of an array";
docargument "A" "The array";
docargument "S" "The array separator";
docargument "B" "The start index";
docargument "E" "The end index (optional)";
docexample "array_slice 'a b c' ' ' 1" "Returns 'b c'";
docexample "array_slice 'a b c' ' ' 1 1" "Returns 'b'";

docident "array_init" "Initializes an empty array";
docargument "S" "The array separator";
docargument "N" "The number of array dimensions";
docexample "array_init '  ' 3" "Returns '<empty>  <empty>  <empty>'";

docident "array_pad" "Fills an array with empty fields until it reaches a specific size";
docargument "A" "The array";
docargument "S" "The array separator";
docargument "N" "The total size of the array";
docexample "array_pad 'a b' ' ' 4" "Returns 'a b <empty> <empty>'";

docident "array_getNumberOfDimensions" "Returns the number of dimensions in an array";
docargument "A" "The array";
docargument "D" "The dimension that was found in an earlier cycle of this function";
docexample "array_getNumberOfDimensions 'a'" "Returns 0";
docexample "array_getNumberOfDimensions 'a b  c d'" "Returns 2";

docident "array_replace" "Replaces an entry inside an array";
docargument "A" "The array";
docargument "S" "The array separator";
docargument "I" "The index";
docargument "V" "The value to set at the index";
docexample "array_replace 'a b c' ' ' 1 new" "Returns 'a new c'";
docexample "array_replace 'a b c' ' ' 5 new" "Returns 'a b c'";

docident "array_set" "Adds an entry to an array";
docargument "A" "The array";
docargument "D" "The dimension ids";
docargument "V" "The value to set at the specified position";
docexample "array_set 'a b  c d' '1 0' new" "Returns 'a b  new d'";

docident "array_get" "Reads an entry from an array";
docargument "A" "The array";
docargument "D" "The dimension ids";
docexample "array_get 'a b  c d' '1 0'" "Returns 'c'";


// colors.cfg
docident "colorError" "Stores the color for gema mode error messages (Default: 3)";
docident "colorWarning" "Stores the color for gema mode warning messages (Default: D)";
docident "colorSuccess" "Stores the color for gema mode success messages (Default: J)";
docident "colorGemaModeDeactivated" "Stores the color for gema mode deactivated info messages (Default: 3)";
docident "colorRunAborted" "Stores the color for gema run aborted messages (Default: 3)";

docident "colorRecordInfo" "Stores the general color for gema record info messages (Default: J)";
docident "colorPlayerName" "Stores the color for gema record names (Default: F)";
docident "colorRecordTime" "Stores the color for gema record times (Default: P)";
docident "colorNoRecord" "Stores the color for 'No record' messages (for maps without map records) (Default: E)";
docident "colorNewRecord" "Stores the color for 'New Record' messages (Default: I)";
docident "colorRecordTied" "Stores the color for 'Record tied' messages (Default: Q)";
docident "colorRecordSlower" "Stores the color for 'Record slower' messages (Default: 4)";

docident "colorTimeTargetBeaten" "Stores the color for 'Time target beaten' messages (Default: I)";
docident "colorTimeTargetTied" "Stores the color for 'Time target tied' messages (Default: Q)";
docident "colorTimeTargetNotBeaten" "Stores the color for 'Slower than time target' messages (Default: 4)";

docident "colorCountDownDefault" "Stores the color for remaining countdown seconds above 9 seconds (Default: J)";
docident "colorCountDownLessThanTenSecondsRemaining" "Stores the color for remaining countdown seconds above 3 seconds and below 10 seconds (Default: 9)";
docident "colorCountDownLessThanFourSecondsRemaining" "Stores the color for remaining countdown seconds below 4 seconds (Default: 3)";
docident "colorCountDownFinished" "Stores the color for the countdown finished message (Default: 3)";

docident "colorMenuDefault" "Stores the default color of menus (Default: 5)";
docident "colorGemaModeMenuTitle" "Stores the color for the 'Gema Mode' menu title (Default: L)";
docident "colorEnableGemaMode" "Stores the color for the 'Enable gema mode' menu item (Default: X)";
docident "colorRecordInfoTitle" "Stores the color for the record related titles in the main menu of the gema mode (Default: T)";
docident "colorMapName" "Stores the color for gema map names (Default: H)";
docident "colorClose" "Stores the color for the 'Close' menu items (Default: V)";

docident "colorDeleteRecordTitle" "Stores the color for the 'Delete record' menu item and the menu title (Default: 3)";
docident "colorDeleteRecordText" "Stores the color for the text in the 'Delete record' menu (Default: 3)";
docident "colorDeleteRecordOptionYes" "Stores the color for the yes option in the 'Delete record' menu (Default: 5)";
docident "colorDeleteRecordOptionNo" "Stores the color for the no option in the 'Delete record' menu (Default: 5)";

docident "colorTimeTargetTitle" "Stores the color for the time target menu title (Default: E)";
docident "colorTimeTargetTime" "Stores the color for the time target time (Default: D)";
docident "colorTimeTargetEnable" "Stores the color for the 'Enable time target mode' text (Default: E)";
docident "colorCountDownEnable" "Stores the color for the 'Show countdown' text (Default: 2)";

docident "colorOptionsTitle" "Stores the color for the 'Options' menu item and the menu title (Default: 2)";
docident "colorGeneralOption" "Stores the color for general gema options (Default: 1)";
docident "colorTimeTargetOption" "Stores the color for the time target options (Default: E)";


// count-down.cfg
docident "countDownModeActive" "Defines whether the countdown mode is activated";
docident "countDownTime" "Stores the initial time of the current countdown in milliseconds";
docident "lastCountDownChange" "Stores the milliseconds since game start of the last countdown change";

docident "setCountDownModeActive" "Sets the countdown mode state";
docargument "S" "The new countdown state" "0, 1" 0;
docexample "setCountDownModeActive 1" "Activates the countdown mode";

docident "setCountDownTime" "Sets the countdown time in milliseconds";
docargument "T" "The countdown time in milliseconds" "" 1;
docremark "Set the countdown time to 0 to disable the countdown";

docident "isCountDownModeActive" "Returns whether the countdown mode is currently active";
docremark "0: Countdown mode is not active";
docremark "1: Countdown mode is active";

docident "initializeCountDown" "Shows a countdown in seconds in the console";
docargument "L" "The length of the countdown in milliseconds";
docargument "M" "The message to show when the countdown is finished";
docexample "initializeCountDown 10000 hello" "Show a 10 seconds countdown and prints 'hello' when the countdown is finished";

docident "showCountDown" "Counts down a second and displays the seconds remaining";
docargument "S" "The number of remaining seconds";
docargument "M" "The message to show when the countdown is finished";
docexample "showCountDown 10 hello" "Shows '00:10' and then calls itself again with the arguments '9 hello'";
docexample "showCountDown 0 hello" "Shows the message 'hello'";

docident "getCountDownColor" "Returns the countdown color based on the amount of seconds remaining";
docargument "S" "The amount of seconds remaining";
docexample "getCountDownColor 14" "Returns the $countDownColorDefault variable";
docexample "getCountDownColor 8" "Returns the $countDownColorLessThanTenSecondsRemaining variable";
docexample "getCountDownColor 2" "Returns the $countDownColorLessThanFourSecondsRemaining variable";


// environment-checker.cfg
docident "gemaModeActive" "Defines whether the gema mode is activated";

docident "setGemaModeActive" "Sets the gemaModeActive variable";
docargument "S" "The new gema mode state" "0, 1" 0;
docexample "setGemaModeActive 1" "Activates the gema mode";

docident "isGemaModeActive" "Returns whether the gema mode is currently active";
docremark "0: Gema mode is not active";
docremark "1: Gema mode is active";

docident "isGema" "Returns whether the current environment is gema compatible (CTF and gema map name)";
docremark "0: Environment is not gema compatible";
docremark "1: Environment is gema compatible";


// map-name-checker.cfg
docident "gemaMapNameImplicits" "Stores implict words that imply that a map name containg one of them is a gema map name";
docremark "Default words: jigsaw, deadmeat-10";

docident "gemaMapNameCodes" "Stores the accepted characters for each letter of the word 'gema'";
docremark "Default letters: g, 3e, m, a@4";

docident "isGemaMapName" "Returns whether a map name is a gema map name";
docargument "M" "The map name" "" 1;
docremark "Calls 'containsGemaMapNameImplict <mapname>' and 'containsGemaMapNameCodes <mapname>'";
docremark "0: Map name is not a gema map name";
docremark "1: Map name is a gema map name";

docident "containsGemaMapNameImplicit" "Checks whether a map name contains one of the implicit words";
docargument "M" "The map name" "" 1;
docremark "0: Map name does not contain any of the implicit words";
docremark "1: Map name contains one of the implicit words";
docexample "containsGemaMapNameImplicit jigsaw-map-1" "Will return 1 because 'jigsaw-map-1' contains the implicit word 'jigsaw'";
docexample "containsGemaMapNameImplicit ac_douze" "Will return 0 because 'ac_douze' does not contain any of the implicit words";

docident "containsGemaMapNameCodes" "Checks whether a map name contains ge3ma@4";
docargument "M" "The map name" "" 1;
docremark "0: Map name does not contain ge3ma@4";
docremark "1: Map name contains ge3ma@4";
docexample "containsGemaMapNameCodes gema_warm_up" "Will return 4 because 'gema_warm_up' contains the word 'gema'";
docexample "containsGemaMapNameCodes ac_douze" "Will return 0 because 'ac_douze' does not contain ge3ma@4";


// map-record.cfg
docident "getMapRecordListAlias" " Returns the map record list alias for a specific map";
docargument "M" "The map name";
docexample "getMapRecordListAlias gibbed-gema11" "Returns ::gema_records_gibbed-gema11";

docident "saveMapRecord" "Saves a map record if it is better than the previous one";
docargument "M" "The map name" "" 1;
docargument "R" "The record time in milliseconds" "" 1;
docargument "W" "The weapon id";
docremark "Saves the record time in a persistent variable";

docident "loadMapRecord" "Loads a record";
docargument "M" "The map name" "" 1;
docargument "W" "The weapon id";

docident "deleteMapRecord" "Deletes a record";
docargument "M" "The map name" "" 1;
docargument "W" "The weapon id";

docident "getBestMapRecordWeaponId" "Returns the weapon id of the best map record";
docargument "M" "The map name";
docremark "Returns -1 when there is no record for the target map";


// map-record-printer.cfg
docident "optionShowNameOnScore" "Defines whether the player name will be shown in the score string (Default: 0)";

docident "printMapRecordScoreString" "Generates and prints the map record output for when the player scores";
docargument "R" "The record time in milliseconds" "" 1;
docexample "printMapRecordString 1100" "Will print 'You scored after 00:01,100 minutes' (when $optionShowNameOnScore is 0)";

docident "printMapRecordStatusString" "Prints the record status (new record, tied record, no new record)";
docargument "M" "The map name" "" 1;
docargument "R" "The record time in milliseconds" "" 1;
docexample "printMapRecordStatusString 1500" "Will print '*** New best time ***' when the previous map record was slower or not set";

docident "printMapStatistics" "Shows the best record of a map";
docargument "M" "The map name" "" 1;
docexample "printMapStatistics gema_warm_up" "Will print 'Your best time for this map is 00:31,240' if your best record is 31,240 seconds";

docident "getMapRecordMenuString" "Returns a record string for the menus";
docargument "M" "The map name" "" 1;
docexample "getMapRecordMenuString gibbed-gema11" "Will return 'No record' when there is no record for gibbed-gema11";


// menus.cfg
docident "menuGemaModeTitle" "Stores the title for the 'Gema Mode' main menu";
docident "gemaModeSubMenuPrefix" "Stores the prefix for all 'Gema Mode' sub menu titles";
docident "menuDeleteRecordTitle" "Stores the title for the 'Delete record' menu";
docident "menuTimeTargetTitle" "Stores the title for the 'Time Target' menu";
docident "menuOptionsTitle" "Stores the title for the 'Options' menu";

docident "showDeleteRecordMenu" "Shows the delete record menu if there is a record for the map";
docargument "M" "The map name" "" 1;


// notification-printer.cfg
docident "optionShowNotifications" "Defines whether notifications are printed (Default: 1)";

docident "printGemaNotification" "Prints a gema mode notification";
docargument "T" "The text to print" "" 1;
docremark "Echos the text if $optionShowNotifications is 1";


// run-system.cfg
docident "optionAutoActivateGemaMode" "Defines whether the gema mode shall be automatically activated on gema maps (Default: 0)";
docident "startTime" "Stores the start time of the current run";
docident "scoreWeapon" "The weapon that is used during the current run";

docident "checkEditing" "Detects whether the player changes to edit mode";

docident "checkTeam" "Detects whether the player team changes";
docargument "T" "The current player team" "0, 1" 0;

docident "abortRun" "Aborts the current run";
docident "startRun" "Initializes a new run";
docident "isRunActive" "Returns whether a run is active at the moment";


// string-utils.cfg
docident "substr_replace" "Replaces a part of a string with a sub string and returns the result";
docargument "S" "The string" "" 1;
docargument "R" "The replacement string" "" 1;
docargument "S" "The start position" "" 1;
docargument "E" "The end position" "" 1;
docexample "substr_replace hello world 2" "Returns 'heworld'";
docexample "substr_replace hello universe 0 1" "Returns 'universello'";

docident "strrepeat" "Returns a string repeated x times";
docargument "S" "The string that will be repeated" "" 1;
docargument "N" "The number of repeats" "" 1;
docexample "strrepeat x 5" "Returns 'xxxxx'";

docident "substr_count" "Counts the number of occurrences of a substring inside a string";
docargument "H" "The haystack" "" 1;
docargument "N" "The needle" "" 1;
docexample "substr_count 'hello world' l" "Returns 3";


// time-parser.cfg
docident "timeParserConvertMilliseconds" "Converts milliseconds to an array in the format [ <minutes> <seconds> <milliseconds> ]";
docargument "T" "The time in milliseconds" "" 1;
docexample "timeParserConvertMilliseconds 1500" "Will return '0 1 500'";

docident "addLeadingZerosToNumber" "Adds leading zeros to a number and returns the string";
docargument "N" "The number" "" 1;
docargument "A" "The amount of digits that the number must have" "" 1;
docexample "addLeadingZerosToNumber 46 4" "Will return '0046'";

docident "generateTimeString" "Generates and returns a time string in the format <minutes>:<seconds>:<milliseconds> from a time in milliseconds";
docargument "T" "The time in milliseconds" "" 1;
docexample "generateTimeString 6700" "Will return '00:06,700'";


// time-target.cfg
docident "timeTargetModeActive" "Defines whether the time target mode is activated";
docident "timeTarget" "Stores the time target in milliseconds";

docident "optionResetTimeTargetOnQuit" "Defines whether the time target will be auto reset to 0 on quitting the game (Default: 1)";
docident "optionAutoSetTimeTargetToMapRecord" "Defines whether the time target will be auto set to the map record of the current map (Default: 0)";

docident "showTimeTargetWarningMessage" "Displays a warning about invalid time targets";

docident "setTimeTargetModeActive" "Sets the time target mode state";
docargument "S" "The new time target mode state" "0, 1" 0;
docexample "setTimeTargetModeActive 1" "Activates the time target mode";

docident "isTimeTargetModeActive" "Returns whether the time target mode is currently active";
docremark "0: Time target mode is not active";
docremark "1: Time target mode is active";

docident "setTimeTarget" "Sets the time target";
docargument "T" "The time target in milliseconds" "" 1;
docexample "setTimeTarget 10000" "Sets the time target to 10000 milliseconds (or 10 seconds)";

docident "getTimeTarget" "Returns the time target in milliseconds";

docident "maximumAllowedIntegerValue" "Stores the maximum allowed integer value to calculate the maximum allowed time target";

docident "addMillisecondsToTimeTarget" "Adds a time difference in milliseconds to the time target";
docargument "T" "The time difference in milliseconds" "" 1;
docexample "addMillisecondsToTimeTarget 500" "Adds 500 milliseconds to the time target";

docident "timeTargetGetMinutes" "Returns the minutes part of the time target";

docident "timeTargetSetMinutes" "Changes the minutes part of the time target";
docargument "M" "The minutes part of the time target" "0 ... 35791" 1;
docexample "timeTargetSetMinutes 5" "Sets the minutes part of the time target to 5";

docident "timeTargetGetSeconds" "Returns the seconds part of the time target";

docident "timeTargetSetSeconds" "Changes the seconds part of the time target";
docargument "S" "The seconds part of the time target" "0 ... 60" 1;
docexample "timeTargetSetSeconds 47" "Sets the seconds part of the time target to 47";

docident "timeTargetGetMilliseconds" "Returns the milliseconds part of the time target";

docident "timeTargetSetMilliseconds" "Changes the milliseconds part of the time target";
docargument "M" "The milliseconds part of the time target" "0 ... 999" 1;

docident "showTimeTargetScoreString" "Shows a message that indicates whether the time target was beaten";
docargument "T" "The record time in milliseconds";


// weapon-system.cfg
docident "getWeaponName" "Returns the weapon name from a weapon id";
docargument "W" "The weapon id" "" 1;

docident "updateScoreWeapon" "Checks whether a weapon used aborts knife only or pistol only mode and returns the updated weapon id";
docargument "W" "The weapon id";
docargument "S" "The current score weapon id";
