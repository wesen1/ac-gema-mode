docsection [ac-gema-mode];

docident [AC_GEMA_MODE_VERSION][The current version number of ac-gema-mode];

docident [AC_GEMA_MODE_AUTHORS][The authors of ac-gema-mode];

docident [optionResetTimeTargetOnQuit][Option to auto reset the time target to 0 on quit (Default: 1)];

docident [optionAutoSetTimeTargetMode][Option to auto set the time target (Default: 0)];
docremark [0: Disabled];
docremark [1: Best Map Record];
docremark [2: Best Primary Weapon Record];
docremark [3: Best Score Attempt Weapon Record];

docident [delayedTimeTargetUpdate][A delayed time target update that was detected but should not be applied instantly This is used to prevent saving of new map records from changing the time target before its comparison to the score attempt map record time is shown in the console];

docident [remainingCountdownMilliseconds][The number of remaining coutndown milliseconds of the current running countdown];

docident [lastCountdownTickTimestamp][The timestamp of the last countdown tick in milliseconds since game start];

docident [currentTimeTargetCountdownFinishedMessage][The "countdown finished" message of the current running time target countdown];

docident [optionShowDifferenceToTimeTarget][Option to show the difference in milliseconds to the time target on score (Default: 1)];

docident [currentTimeTarget][The current time target];

docident [lastFoundFormatSpecifierRules][The last found format specifier rules];

docident [lastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter][The last number of format specifiers before the first non whitespace character];

docident [lastGeneratedFormatString][The last generated format string for the "format" function];

docident [formatSpecifierStarted][Stores whether a format specifier is currently started If 1 the next format string characters will be applied to the current format specifier];

docident [currentFormatSpecifierMetaDataBeforeType][The meta data before the type identifier of the current format specifier];

docident [currentFormatSpecifierType][The type identifier of the current format specifier];

docident [currentFormatSpecifierDataAfterType][The data after the type identifier of the current format specifier This may or may not be meta data];

docident [currentFormatSpecifierDataAfterTypeLength][The length of the data after the type identifier of the current format specifier];

docident [currentFormatSpecifierNumber][The current format specifier number Will be increased and used when a new unique format specifier is found];

docident [TEMPORARY_WHITESPACE][A temporary replacement for whitespaces that should be used to modify strings that contain whitespaces before adding them to a list];
docremark [This is just a character that is non printable and thus can be safely assumed to not be contained in any of];
docremark [the list item strings.];

docident [weaponNames][The list of weapon name aliases];
docremark [The name position inside the array matches the weapon id];

docident [teamNames][The list of team name aliases];
docremark [The name position inside the array matches the team id];

docident [optionShowNotifications][Option to enable ac-gema-mode notifications (Default: 1)];

docident [colorInfo][The color for gema mode info messages (Default: 3)];

docident [colorError][The color for gema mode error messages (Default: 3)];

docident [colorWarning][The color for gema mode warning messages (Default: B)];

docident [colorSuccess][The color for gema mode success messages (Default: J)];

docident [colorGemaModeDisabled][The color for gema mode disabled info messages (Default: 3)];

docident [colorScoreAttemptAborted][The color for score attempt aborted messages (Default: 3)];

docident [colorsTimeDifference][The colors for time differences (Default: Q T J)];

docident [colorRecordInfo][The general color for gema record info messages (Default: J)];

docident [colorPlayerName][The color for gema record player names (Default: F)];

docident [colorsRecordTime][The color for gema record times (Default: M N $colorRecordInfo)];

docident [colorNoRecord][The color for "No record" messages (for maps without map records) (Default: Y)];

docident [colorNewRecord][The color for "New Record" messages (Default: I)];

docident [colorRecordTied][The color for "Record tied" messages (Default: Q)];

docident [colorRecordSlower][The color for "Record slower" messages (Default: 4)];

docident [colorBestMapRecordWeapon][The color for the best map record weapon in the "Weapon Records" menu (Default: I)];

docident [colorsBestMapRecordScoreTime][The colors for the best map record score time in the "Weapon Records" menu (Default: 2 G $colorRecordInfo)];

docident [colorMapRecordTimestampDate][The color for timestamp date parts (Default: X)];

docident [colorMapRecordTimestampTime][The color for timestamp time parts (Default: X)];

docident [colorMissingWeapons][The color for the "Missing weapons" message (Default: 3)];

docident [colorTimeTargetInfo][The color for time target info messages (Default: E)];

docident [colorTimeTargetBeaten][The color for "Time target beaten" messages (Default: I)];

docident [colorTimeTargetTied][The color for "Time target tied" messages (Default: Q)];

docident [colorTimeTargetNotBeaten][The color for "Slower than time target" messages (Default: 4)];

docident [colorsCountdownDefault][The colors for remaining countdown seconds above 9 seconds (Default: J J J)];

docident [colorsCountdownLessThanTenSecondsRemaining][The colors for remaining countdown seconds above 3 seconds and below 10 seconds (Default: 9 9 9)];

docident [colorsCountdownLessThanFourSecondsRemaining][The colors for remaining countdown seconds below 4 seconds (Default: 3 3 3)];

docident [colorCountdownFinished][The color for the countdown finished message (Default: 3)];

docident [colorTeamCLA][The color for the team CLA (Default: 3)];

docident [colorTeamRVSF][The color for the team RVSF (Default: 1)];

docident [colorsRecordTimeCLA][The colors for team based colored score times for team CLA (Default: $colorTeamCLA 7 $colorRecordInfo)];

docident [colorsRecordTimeRVSF][The colors for team based colored score times for team RVSF (Default: $colorTeamRVSF R $colorRecordInfo)];

docident [colorWeapon][The color for weapon names (Default: D)];

docident [colorMenuDefault][The default color of menus (Default: 5)];

docident [colorGemaModeMenuTitle][The color for the "Gema Mode" menu title (Default: L)];

docident [colorEnableGemaMode][The color for the "Enable gema mode" menu item (Default: 1)];

docident [colorRecordInfoTitle][The color for the record related titles in the main menu of the gema mode (Default: T)];

docident [colorMapName][The color for gema map names (Default: H)];

docident [colorMapRevision][The color for map revisions (Default: I)];

docident [colorMapInfo][The general color for map info messages];

docident [colorClose][The color for the "Close" menu items (Default: V)];

docident [colorMapRecordsTitle][The color for the "Map records" menu title (Default: 1)];

docident [colorWeaponMapRecordDefault][The default color for weapon map record info strings (Default: 4)];

docident [colorMigrateRecordsTitle][The color for the "Migrate records" menu item and title (Default: Q)];

docident [colorMigrateRecordsText][The color for the confirm question in the "Migrate records" menu (Default: Q)];

docident [colorMigrateRecordsOptionYes][The color for the yes option in the "Migrate records" menu (Default: 5)];

docident [colorMigrateRecordsOptionNo][The color for the no option in the "Migrate records" menu (Default: 5)];

docident [colorDeleteRecordTitle][The color for the "Delete record" title (Default: 3)];

docident [colorDeleteRecordText][The color for the text in the "Delete record" menu (Default: 3)];

docident [colorDeleteRecordOptionYes][The color for the yes option in the "Delete record" menu (Default: 5)];

docident [colorDeleteRecordOptionNo][The color for the no option in the "Delete record" menu (Default: 5)];

docident [colorTimeTargetTitle][The color for the time target menu title (Default: E)];

docident [colorTimeTargetTimeUnits][The color for the time target time units (Default: K)];

docident [colorsTimeTargetTime][The colors for the time target time (Default: J $colorTimeTargetTimeUnits J)];

docident [colorTimeTargetEnable][The color for the "Enable time target mode" text (Default: E)];

docident [colorCountdownEnable][The color for the "Show countdown" text (Default: 2)];

docident [colorOptionsTitle][The color for the "Options" menu item and the menu title (Default: 2)];

docident [colorGeneralOption][The color for general gema options (Default: 1)];

docident [colorTimeTargetOption][The color for the time target options (Default: E)];

docident [colorMiscellaneousOption][The color for miscellaneous options (Default: Y)];

docident [colorLanguage][The color for language names];

docident [colorCurrentLanguage][The color for the current active language in the "Change Language" dialog];

docident [colorAboutTitle][The color for the "About" menu title (Default: P)];

docident [colorAboutHeader][The color for headers inside the "About" menu (Default: P)];

docident [colorAboutParagraph][The color for paragraphs inside the "About" menu (Default: 5)];

docident [SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD][The $optionScoreTimeCompareValue value that will cause a comparison to the best map record];

docident [SCORE_TIME_COMPARE_VALUE_SCORE_WEAPON_MAP_RECORD][The $optionScoreTimeCompareValue value that will cause a comparison to the score weapon map record];

docident [optionScoreTimeCompareValue][Option to set the comparison value for score times (Default: 1)];
docremark [0: Best map record];
docremark [1: Best score weapon record];

docident [currentScoreAttemptCompareMapRecord][Stores the map record to which the score attempt map record will be compared This is either the best record with the current score weapon or the best map record];

docident [optionShowSecondaryWeaponModeAbortedMessages][Option to show messages that the knife or pistol only mode were aborted because the player used a different weapon (Default: 0)];

docident [currentScoreAttempt][The current score attempt];

docident [lastTimeIntervalChangeErrorMessage][The last error message for an error that occurred during a time interval change];

docident [defaultTimeFormat][The default time format that will be used if no custom time format is configured];
docremark [The following format string configurations are available:];
docremark ["--" At the beginning = Cut off every leading text until the first non zero time part];
docremark ["-" At the beginning = Cut off every leading text until the first non zero time part or the first non whitespace character];
docremark [The following time format specifiers are available:];
docremark ["%i" = Minutes];
docremark ["%s" = Seconds];
docremark ["%v" = Milliseconds];
docremark ["%T" = Total time string time unit (Largest non zero time unit)];
docremark [You can add a number of padding zeros between "%" and <format specifier type identifier> to pad the digits by x zeros.];
docremark [You can also configure the time unit type with the character after the format specifier type identifier:];
docremark ["-" = Abbreviated time unit name for that time unit];
docremark ["+" After a time unit = Full time unit name for that time unit];
docremark ["*" After a time unit = Custom time unit name for that time unit];
docremark [<anything else | nothing> = No time unit name is shown];
docremark [Numbers after the time unit type configure by how many whitespaces the time unit name will be separated];
docremark [from the time digits.];

docident [optionTimeUnitNameMinutesCustom][The custom name for the minutes time unit];

docident [optionTimeUnitNameSecondsCustom][The custom name for the seconds time unit];

docident [optionTimeUnitNameMillisecondsCustom][The custom name for the milliseconds time unit];

docident [TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_NEVER][];

docident [TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_IF_PRECEDED_BY_WHITESPACE][];

docident [TIME_FORMAT_STRING_HIDE_LEADING_ZERO_TIME_PARTS_ALWAYS][];

docident [timeFormatSpecifierTypes][The available time format specifier types];

docident [timeUnitTypes][The available time unit types];

docident [lastParsedTimeFormatString][The last parsed time format string];

docident [lastFoundTimeFormatSpecifierRules][The format specifier rules that were found in the last parsed time format string];

docident [lastFoundHideLeadingZeroTimeIntervalPartsRule][The "hide leading zero time interval parts" rule that was found in the last parsed time format string The following rules are allowed: 0: Disabled 1: Hide leading zero time interval parts if they are preceded by whitespace 2: Hide leading zero time interval parts and remove any text that precedes them];

docident [lastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter][The number of time format specifiers before the first non whitespace character that were found in the last parsed time format string];

docident [TIME_FORMAT_SPECIFIER_TYPE_MINUTES][];

docident [TIME_FORMAT_SPECIFIER_TYPE_SECONDS][];

docident [TIME_FORMAT_SPECIFIER_TYPE_MILLISECONDS][];

docident [TIME_FORMAT_SPECIFIER_TYPE_TOTALTIMEUNIT][];

docident [TIME_FORMAT_SPECIFIER_TIME_UNIT_TYPE_NONE][];

docident [TIME_FORMAT_SPECIFIER_TIME_UNIT_TYPE_FULL][];

docident [TIME_FORMAT_SPECIFIER_TIME_UNIT_TYPE_ABBREVIATED][];

docident [TIME_FORMAT_SPECIFIER_TIME_UNIT_TYPE_CUSTOM][];

docident [dateFormat][Date format for the generated timestamp date strings Available format specifiers are: %Y = Year number (4 digits) %m = Month number (2 digits) %d = Day number (2 digits)];

docident [timeFormat][Time format for the generated timestamp time strings Available format specifiers are: %H = Hours (2 digits) %i = Minutes (2 digits) %s = Seconds (2 digits)];

docident [gemaMapNameImplicits][A list of implicit words that will cause a map name to be identified as a gema map name];
docremark [The default implicits words are "jigsaw" and "deadmeat-10"];

docident [gemaMapNameCodes][The list of letters of which one per code position must occur in sequence to cause a map name to be identified as a gema map name];
docremark [The default code letters are "g", "3e", "m" and "a@4"];
docremark [For example gema, g3ma or g3m@ would be identified as gema code.];

docident [lastCheckedMapName][The last checked map name of the isGemaMapName function];

docident [isLastCheckedMapNameGemaMapName][The result of the isGemaMapName call for the last checked map name];
docremark [This is done to avoid checking one map name multiple times];

docident [optionAutoActivateGemaMode][Option to automatically activate the gema mode on gema maps (Default: 1)];

docident [TAB_CHARACTER][A literal tab ("\t")];

docident [QUOTE_CHARACTER][A quote character This is needed because its not so easy to get a single double quote character for comparisons];

docident [COLOR_CHARACTER][A color start character ("\f") This is followed by one of the color identifiers if it was added to a string via `(c <color>)`];

docident [BELL_CHARACTER][A bell character ("\a")];

docident [stringOutputListCommaSeparatorTemplate][Generic template for a comma separator for a output list];

docident [stringOutputListAndSeparatorTemplate][Generic template for a "and" separator for a output list];

docident [messageGameModeNotCtf][The "Game mode is not CTF" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageMapNotGemaMap][The "Map is not a gema map" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageWatchingDemo][The "Watching a demo" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageGemaModeCanNotBeEnabled][Template for the "Gema mode cannot be enabled" error message];

docident [messageGemaModeCanNotBeDisabled][Template for the "Gema mode cannot be disabled" error message];

docident [messageGemaModeAutoEnabled][The "Gema mode auto enabled" info message];

docident [messageGemaModeAutoDisabled][Template for the "Gema mode disabled" info message];

docident [messageSingleWeaponMapRecordDeleted][The "Record deleted" info message];

docident [messageAllRecordsOfMapDeleted][The "All records of map deleted" info message];

docident [messageAllRecordsOfMapInRevisionDeleted][The "All records of map in revision deleted" info message];

docident [messageNoMapRecord][The "No record" info message];

docident [messageScoreNamePlayerName][Template for player names];

docident [messageScoreNameYou][The "You" player name for score messages];

docident [messageMapRecordScore][Template for score messages];

docident [messageMapRecordScoreWeapon][Template for the score weapon info for score messages];

docident [messageMapRecordScoreTeam][Template for the score team info for score messages];

docident [messageFasterThanBestMapRecord][The "New best time" info message without difference to the compare time];

docident [messageTiedBestMapRecord][The "Tied your current record" info message without difference to the compare time];

docident [messageSlowerThanBestMapRecord][The "But you have a better record" info message without difference to the compare time];

docident [messageFasterThanWeaponMapRecord][Template for "New best time with weapon" info messages without difference to the compare time];

docident [messageTiedWeaponMapRecord][Template for "Tied you current record with weapon" info messages without difference to the compare time];

docident [messageSlowerThanWeaponMapRecord][Template for "But you have a better record with weapon" info messages without difference to the compare time];

docident [messageFasterThanBestMapRecordWithDifference][Template for "New best time" info messages with difference to the compare time];

docident [messageSlowerThanBestMapRecordWithDifference][Template for "But you have a better record" info messages with difference to the compare time];

docident [messageFasterThanWeaponMapRecordWithDifference][Template for "New best time with weapon" info messages with difference to the compare time];

docident [messageSlowerThanWeaponMapRecordWithDifference][Template for "But you have a better record with weapon" info messages with difference to the compare time];

docident [messageBestMapRecordConsole][Template for the best map record map statistics message];

docident [messageBestMapRecordWeaponConsole][Template for the score weapon info for the map statistics map record messages];

docident [messageBestMapRecordTeamNameConsole][Template for the team info for the map statistics map record messages];

docident [messageBestMapRecordTimestampConsole][Template for timestamp info strings for the map statistics map record messages];

docident [messageBestMapRecordTimestampDateConsole][Template for timestamps that are shown only as dates for the map statistics map record messages];

docident [messageBestMapRecordTimestampDateAndTimeConsole][Template for timestamps that are shown as date and time for the map statistics map record messages];

docident [messageMissingWeapons][Template for the "Missing weapons" map statistics message];

docident [messageMissingWeaponsListSeparator][List separator for the "Missing weapons" weapon list];

docident [messageMissingWeaponsListLastSeparator][List separator for the last item of the "Missing weapons" weapon list];

docident [messageNoMapRecords][Template for the "No records on this map" map statistics message];

docident [weaponMapRecordMenuText][Template for map records in the "Weapon Records" menu];

docident [menuItemMapRecordAdditionalInfos][Template for additional infos for a map record in the menus];

docident [menuItemMapRecordAdditionalInfosSeparator][List separator for the additional infos list];

docident [messageUpdatedCurrentMapRevision][Template for the "Updated current map revision" message];

docident [messageAutoMigratedMapRecords][Template for the "Auto migrated map records to current version" message];

docident [messageAttemptAbortedEditMode][The "Score attempt aborted because of edit mode" info message];

docident [messageSecondaryWeaponModeAborted][Template for "Knife/Pistol only mode aborted" info messages];

docident [timeUnitNameMinutesAbbreviated][Abbreviated name of the "minutes" time unit];

docident [timeUnitNameMinutesFull][Full name of the "minutes" time unit];

docident [timeUnitNameSecondsAbbreviated][Abbreviated name of the "seconds" time unit];

docident [timeUnitNameSecondsFull][Full name of the "seconds" time unit];

docident [timeUnitNameMillisecondsAbbreviated][Abbreviated name of the "milliseconds" time unit];

docident [timeUnitNameMillisecondsFull][Full name of the "milliseconds" time unit];

docident [messageInvalidTimeIntervalPart][Template for "Time interval part must be greater/smaller than x" error messages];

docident [messageTimeIntervalMinutesTooLow][The "Time interval minutes part must be greater than -1" error message];

docident [messageTimeIntervalMinutesTooHigh][The "Time interval minutes part must be smaller than 35792" error message];

docident [messageTimeIntervalSecondsTooLow][The "Time interval seconds part must be greater than -1" error message];

docident [messageTimeIntervalSecondsTooHigh][The "Time interval seconds part must be smaller than 60" error message];

docident [messageTimeIntervalMillisecondsTooLow][The "Time interval milliseconds part must be greater than -1" error message];

docident [messageTimeIntervalMillisecondsTooHigh][The "Time interval milliseconds part must be smaller than 1000" error message];

docident [messageTimeIntervalDifferenceTooLow][The "Time interval difference is too low" error message];

docident [messageTimeIntervalDifferenceTooHigh][The "Time interval difference is too high" error message];

docident [messageTimeTargetCanNotBeSet][Template for "Time target can not be changed" error messages];

docident [messageTimeTargetMustBeAtLeastZeroMilliseconds][The "Time target must be at least 0 milliseconds" message for "setTimeTargetTotalMilliseconds"];

docident [messageGemaModeNotActive][The "Gema mode not active" reason for "getTimeTargetModeCanNotBeActivatedReason"];

docident [messageInvalidTimeTarget][The "Time target must be at least 0 milliseconds" reason for "getTimeTargetModeCanNotBeActivatedReason"];

docident [messageTimeTargetModeCanNotBeEnabled][Template for "Time target mode can not be enabled" error messages];

docident [messageTimeTargetModeCanNotBeDisabled][Template for "Time target mode can not be disabled" error messages];

docident [messageTimeTargetBeaten][The "Faster than time target" info message without difference to the time target];

docident [messageTimeTargetTied][The "Tied time target" info message without difference to the time target];

docident [messageSlowerThanTimeTarget][The "Slower than time target" info message without difference to the time target];

docident [messageTimeTargetFinished][The "Time target finished" info message];

docident [messageTimeTargetBeatenWithDifference][Template for "Faster than time target" info messages with difference to the time target];

docident [messageSlowerThanTimeTargetWithDifference][Template for "Slower than time target" info messages with difference to the time target];

docident [messageAutoSetTimeTargetToScoreWeaponRecord][Template for "Auto setting time target to record with weapon" messages];

docident [messageTimeTargetModeNotActive][The "Time target mode not activated" reason for "getCountdownModeCanNotBeActivatedReason"];

docident [messageCountdownModeCanNotBeEnabled][Template for "Countdown mode can not be enabled" error messages];

docident [messageCountdownModeCanNotBeDisabled][Template for "Countdown mode can not be disabled" error messages];

docident [messageCountdownFinishMessage][Template for the "countdown finished" message];

docident [teamNameUnknown][Template for unknown team ids];

docident [teamNameCLA][The team name for the team CLA];

docident [teamNameRVSF][The team name for the team RVSF];

docident [weaponNameUnknown][Template for unknown weapon ids];

docident [weaponNameKnife][The weapon name for the weapon "Knife"];

docident [weaponNamePistol][The weapon name for the weapon "Pistol"];

docident [weaponNameCarbine][The weapon name for the weapon "Carbine"];

docident [weaponNameShotgun][The weapon name for the weapon "Shotgun"];

docident [weaponNameSubmachineGun][The weapon name for the weapon "Submachine Gun"];

docident [weaponNameSniperRifle][The weapon name for the weapon "Sniper Rifle"];

docident [weaponNameAssaultRifle][The weapon name for the weapon "Assault Rifle"];

docident [menuGemaModeTitle][The title of the "Gema Mode" menu];

docident [gemaModeSubMenuTitleTemplate][Template for "Gema Mode" sub menus];

docident [dialogDeleteRecordTitle][The title of the "Delete Record(s)" dialog];

docident [dialogMigrateRecordsTitle][The title of the "Migrate Records" dialog];

docident [dialogChangeLanguageTitle][The title of the "Change Language" dialog];

docident [menuMapsTitle][The title of the "Maps" menu];

docident [menuTimeTargetTitle][The title of the "Time Target" menu];

docident [menuOptionsTitle][The title of the "Options" menu];

docident [menuShowRecordsTitle][The title of the "Map Records" menu];

docident [menuAboutTitle][The title of the "About" menu];

docident [menuItemGoBackText][The text for the "Back" menu item];

docident [menuItemEnableGemaModeText][The text for the "Enable gema mode" menu item];

docident [menuItemCurrentMapTitle][Title for the "Current Map" menu item];

docident [menuItemCurrentMap][Template for the "Current Map" menu item];

docident [menuItemBestMapRecordTitle][Title for the "Best Time" menu item];

docident [menuItemBestMapRecord][Template for the "Best Time" menu item];

docident [menuItemCurrentTimeTargetTitle][Title for the "Time Target" menu item];

docident [menuItemCurrentTimeTarget][Template for the "Time Target" menu item];

docident [menuItemOptions][The text for the "Options" menu item];

docident [menuItemAbout][The text for the "About" menu item];

docident [menuItemCloseMenu][The text for the "Close" menu item];

docident [menuItemCurrentMapNameTitle][The title for the "Map name" menu item];

docident [menuItemCurrentMapName][The text for the "Map name" menu item];

docident [menuItemCurrentMapRevisionSliderTitle][The title for the map revision slider text];

docident [menuItemCurrentMapRevisionSliderText][The text for the map revision slider];

docident [menuItemMigrateRecordsFromOtherRevisions][The text for the "Migrate records" menu item if the current selected revision is the current revision of the map];

docident [menuItemMigrateRecordsToCurrentRevision][The text for the "Migrate records" menu item if the current selected revision is not the current revision of the map];

docident [menuItemDeleteRecordsForRevision][The text for the "Delete records for revision" menu item];

docident [menuItemMigrateRecordsConfirmQuestionTemplate][Template for the "Migrate records" dialog confirmation question];

docident [menuItemMigrateSingleRevisionRecordsConfirmQuestion][The confirm question for the "Migrate records" menu if the records of a single revision should be migrated];

docident [menuItemMigrateMultipleRevisionsRecordsConfirmQuestion][The confirm question for the "Migrate records" menu if the records of multiple revisions should be migrated at once];

docident [menuItemMigrateRecordsConfirm][The yes answer for the "Migrate records" menu];

docident [menuItemMigrateRecordsCancel][The no answer for the "Migrate records" menu];

docident [messageSelectAtLeastOneMapRevisionToMigrate][The "Select at least one map revision" error message for the "Migrate Records" dialog];

docident [messageRecordsMigratedTemplate][Template for the success message for the "Migrate Records" confirm action];

docident [messageRecordsMigratedSingle][The success message for the "Migrate records" confirm action if the records of a single revision were migrated];

docident [messageRecordsMigratedMultiple][The success message for the "Migrate records" confirm action if the records of multiple revisions were migrated];

docident [messageRecordsMigratedRevisionListSeparator][The list separator for the migrated revisions list in the "Records migrated" success messages];

docident [messageRecordsMigratedRevisionListLastSeparator][The list separator for the last item of the migrated revisions list in the "Records migrated" success messages];

docident [menuItemDeleteRecordsConfirmQuestionTemplate][Template for the "Delete Record(s)" confirm question];

docident [menuItemDeleteAllRecordsOfMapConfirmQuestion][The "Delete all records for map" confirm question];

docident [menuItemDeleteAllRecordsOfMapRevisionConfirmQuestion][The "Delete all records for map revision" confirm question];

docident [menuItemDeleteWeaponRecordConfirmQuestion][The "Delete weapon record" confirm question];

docident [menuItemDeleteRecordConfirmTemplate][Template for the "Delete Record(s)" yes answer];

docident [menuItemDeleteSingleWeaponRecordConfirm][The "Delete single weapon record" yes answer];

docident [menuItemDeleteMultipleWeaponRecordsConfirm][The "Delete multiple weapon records" yes answer];

docident [menuItemDeleteRecordCancelTemplate][Template for the "Delete Record(s)" no answer];

docident [menuItemDeleteSingleWeaponRecordCancel][The "Delete single weapon record" no answer];

docident [menuItemDeleteMultipleRecordsCancel][The "Delete multiple records" no answer];

docident [menuItemGeneralOptionsTitle][The text for the "General Options" menu item];

docident [menuItemAutoActivateGemaModeOption][The text for the "Auto activated gema mode" option menu item];

docident [menuItemShowNotificationsOption][The text for the "Show notifications" option menu item];

docident [menuItemScoreTimeCompareValueOption][The text for the "Compare score times to" option menu item];

docident [menuItemScoreTimeCompareValueOptionValues][The possible values for the "Compare score times to" option];

docident [menuItemShowNameOnScoreOption][The text for the "Show player name on score" option menu item];

docident [menuItemAutoMigrateMapRecordsOnRevisionUpdateOption][The text for the "Auto migrate map records" option menu item];

docident [menuItemShowScoreWeaponOption][The text for the "Show weapon name" option menu item];

docident [menuItemShowTeamOption][The text for the "Show score team" option menu item];

docident [menuItemShowTeamOptionValues][The possible values for the "Show score team" option];

docident [menuItemShowMapRecordTimestampOption][The text for the "Show map record timestamps" option];

docident [menuItemShowMapRecordTimestampTimePartOption][The text for the "Show map record timestamp time parts" option];

docident [menuItemShowDifferenceToScoreCompareTimeOption][The text for the "Show difference to score compare time on score" option menu item];

docident [menuItemTimeTargetOptionsTitle][The text for the "Time Target options" menu item];

docident [menuItemAutoSetTimeTargetModeOption][The text for the "Auto set time target mode" option menu item];

docident [menuItemAutoSetTimeTargetModeValues][The possible values for the "Auto set time target mode" option];

docident [menuItemShowDifferenceToTimeTargetOption][The text for the "Show difference to time target on score" option menu item];

docident [menuItemResetTimeTargetOnQuitOption][The text for the "Auto reset time target on quit" option menu item];

docident [menuItemWeaponOptionsTitle][The text for the "Weapon options" menu item];

docident [menuItemEnableWeaponRecordsMenuOption][The text for the "Enable weapon records menu" option menu item];

docident [menuItemShowSecondaryWeaponModeAbortedMessagesOption][The text for the "Show Knife/Pistol mode aborted messages" option menu item];

docident [menuItemShowMissingWeaponsOption][The text for the "Show missing weapons" option menu item];

docident [menuItemMiscellaneousOptionsTitle][The text for the "Miscellaneous options" menu item];

docident [menuItemMenuFontOption][The text for the "Menu Font" option menu item];

docident [menuItemMenuAboutMaximumLineWidthOption][The text for the "About menu width" option menu item];

docident [menuItemChangeLanguageOption][The text for the "Change Language" option menu item];

docident [menuItemEnableTimeTargetMode][The text for the "Enable time target mode" menu item];

docident [menuItemShowCountdown][The text for the "Show countdown" menu item];

docident [menuItemTimeTargetMinutes][The text for the "Time target Minutes" menu item];

docident [menuItemTimeTargetSeconds][The text for the "Time target Seconds" menu item];

docident [menuItemTimeTargetMilliseconds][The text for the "Time target Milliseconds" menu item];
docremark [The extra space at the end is intended to add a margin between the word and the text input field];

docident [availableLanguagesFullNames][The list of full names of the available languages The index inside this list matches the index inside the $availableLanguages list];

docident [messageSelectedLanguageIsCurrentLanguage][The "Selected language is current language" warning message];

docident [messageSuccessfullyChangedLanguage][The "Successfully changed language" message];

docident [messageFailedToChangeLanguage][The "Failed to change language" message];

docident [menuAboutHeaderPrefix][The prefix for all header lines in the about menu];

docident [menuAboutParagraphPrefix][The prefix for all paragraph lines in the about menu];

docident [menuAboutGemaDescriptionHeader][The header for the "What is gema" section in the about menu];

docident [menuAboutGemaRulesHeader][The header for the "Gema rules" section in the about menu];

docident [menuAboutAcGemaModeHeader][The header for the "About ac-gema-mode" section in the about menu];

docident [menuAboutAcGemaModeVersionInfoText][The "Version" info line in the "About ac-gema-mode" section in the about menu];

docident [menuAboutAcGemaModeSingleAuthorInfoText][The "Author" info line in the "About ac-gema-mode" section in the about menu if there is only one author];

docident [menuAboutAcGemaModeMultipleAuthorsInfoText][The "Author" info line in the "About ac-gema-mode" section in the about menu if there are multiple authors];

docident [menuAboutAcGemaModeAuthorsListSeparator][List separator for the authors list in the about menu];

docident [menuAboutAcGemaModeAuthorsListLastSeparator][List separator for the last item of the authors list in the about menu];

docident [DELETE_RECORD_MODE_ALL_OF_MAP][];

docident [DELETE_RECORD_MODE_ALL_OF_MAP_REVISION][];

docident [DELETE_RECORD_MODE_SINGLE][];

docident [deleteRecordMapName][The deletion target map name for the delete record dialog];

docident [deleteRecordMapRevision][The deletion target map revision for the delete record dialog];

docident [deleteRecordMapRecord][The deletion target map record for the delete record dialog];

docident [deleteRecordMode][The current delete record dialog mode (One of the  DELETE_RECORD_MODE_* constants)];

docident [migrateRecordsMapName][The target map name for the "Migrate Records" dialog];

docident [migrateRecordsMapRevision][The target map revision for the "Migrate Records" dialog -1 targets all map revisions other than the current map revision];

docident [migrateRecordsIncludedMapRevisions][The list of map revisions whose records to migrate This is only relevant when $migrateRecordsMapRevision is -1];

docident [optionMenuAboutMaximumLineWidth][Option for the maximum line width per menu item in the about menu (Default: 2000)];

docident [optionEnableWeaponRecordsMenu][Option to enable the "Weapon Records" menu (Default: 1)];
docremark [If set to 0 selecting the best map record will result in a "Delete records" dialog];
docremark [that affects all map records of the current map at once];

docident [lastCalculatedMenuPadTabsForMainMenu][The last calculated numbers of pad tabs for the tab padded main menu texts];

docident [lastSelectedRevisionSliderValue][The last selected value of the map revision slider menu item This is the index of the corresponding map revision inside the list of map revisions];

docident [lastSelectedMapRevision][The last selected map revision of the map revision slider menu item];

docident [lastCalculatedMenuPadTabsForWeaponRecordsMenuWeaponRecordItems][The last calculated numbers of pad tabs for the weapon record item texts];

docident [lastCalculatedMenuPadTabsForWeaponRecordsMenuMapInfoItems][The last calculated numbers of pad tabs for the map info item texts];

docident [builtMenuNames][The names of the menus that were built and not deleted yet];

docident [menusToRebuildOnNextShow][The names of the menus that should be rebuilt the next time they are shown];

docident [builtDialogNames][The names of the dialogs that were built and not deleted yet];

docident [optionMenuFontType][The font type that should be used to format menus If -1 the font type will be dynamically read from $__fontsetting];
docremark [If >= 0 the font type will be fixed to the $optionMenuFontType value];

docident [lastMenuFormatFontType][The last font type that the menus were formatted for];

docident [menuFontFormatters][The list of menu font formatting functions These functions will be called every time the formatMenusForFont function reformats the menus];

docident [maximumAllowedIntegerValue][The maximum allowed integer value];

docident [primaryWeaponIds][The list of primary weapon ids];

docident [secondaryWeaponIds][The list of secondary weapon ids];

docident [allWeaponIds][The list of all weapon ids];
docremark [This list is in the priority order for the "Weapon Records" menu, the "Missing weapons" string and the];
docremark [best map record weapon id fetching process];

docident [TEAM_CLA][The id of the team CLA];

docident [TEAM_RVSF][The id of the team RVSF];

docident [optionGemaModeLanguage][The language that should be used for ac-gema-mode This is one of the values of the $availableLanguages list];

docident [availableLanguages][The available languages The items in this list match the values after the underscore in the "ac-gema-mode/strings/strings_*];
docremark [cfg" file names];

docident [cachedBestMapRecord][Stores the best map record of the current map];

docident [MAP_RECORD_COMPARISON_STATUS_FASTER][Comparison status for the case that the first map record score time is lower than the comparison map record score time];

docident [MAP_RECORD_COMPARISON_STATUS_TIED][Comparison status for the case that both map record score times are the same];

docident [MAP_RECORD_COMPARISON_STATUS_SLOWER][Comparison status for the case that the first map record score time is higher than the comparison map record score time];

docident [MAP_RECORD_COMPARISON_STATUS_EMPTY][Comparison status for the case that the comparison map record is empty];

docident [optionShowScoreWeapon][Option to show the score weapon in the console score and statistics strings and the main menu (Default: 1)];

docident [optionShowMapRecordTeam][Option to show the player team in the console score and statistics strings and the main menu (Default: 3) 0: Disabled 1: Show player name in team color 2: Show time in team color 3: Show weapon in team color 4: Show timestamp in team color 5: Show team name];

docident [optionShowMapRecordTimestamp][Option to show the map record timestamps in the map statistics and the menus (Default: 1)];

docident [optionShowMapRecordTimestampTimePart][Option to show the time parts of the map record timestamps (Default: 0)];

docident [optionShowNameOnScore][Option to show the player name in the console score string (Default: 0)];

docident [optionShowDifferenceToScoreCompareTime][Option to show the difference in milliseconds between the score attempt time and the comparison map record (Default: 1)];

docident [optionShowMissingWeapons][Option to show the list of missing weapons on map start (Default: 1)];

docident [optionAutoMigrateMapRecordsOnRevisionUpdate][Option to automatically migrate the map records of the previous version to the current version when a map revision update is detected (Default: 1)];

docident [getCurrentTimeTargetModeState][Returns the current time target mode state];
docremark [Returns 1 if the time target mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentTimeTargetModeState][Tries to set the current time target mode state];
docremark [Returns 1 if the time target mode state was successfully set, 0 otherwise];
docremark [If the time target mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the time target mode state will be shown.];
docargument [N][The new time target mode state];
docargument [S][The notification to show on success (optional)];

docident [getTimeTargetModeStateCanNotBeChangedReason][Returns the reason why the time target mode state can not be changed to a specified state];
docremark [Returns the reason why the time target mode state can not be changed or an empty string if it can be changed];
docargument [N][The state to which the time target mode state should be set (0 or 1)];

docident [onTimeTargetModeEnabled][Event handler that is called when the time target mode state changes from "disabled" to "enabled"];

docident [onTimeTargetModeDisabled][Event handler that is called when the time target mode state changes from "enabled" to "disabled"];

docident [initializeAutoTimeTarget][Initializes the auto time target with the configured auto set mode];

docident [delayTimeTargetUpdate][Delays a time target update];
docremark [The update will be applied on the next "applyDelayedTimeTargetUpdateIfRequired" call.];
docargument [D][The delayed time target update];

docident [applyDelayedTimeTargetUpdateIfRequired][Applies a delayed time target update if there is one];

docident [setOptionAutoSetTimeTargetMode][Sets $optionAutoSetTimeTargetMode and initializes the time target with the new auto set mode];
docargument [N][The new value for $optionAutoSetTimeTargetMode];

docident [updateTimeTarget][Changes the current time target];
docargument [N][The new time target in milliseconds];

docident [updateBestMapRecordTimeTargetIfRequired][Sets the time target to the best map record if $optionAutoSetTimeTargetMode is 1];
docargument [D][1 if the time target update should be delayed, 0 otherwise];

docident [updateBestWeaponRecordTimeTargetIfRequired][Sets the time target to the best primary weapon record if $optionAutoSetTimeTarget is 2];

docident [updateBestScoreWeaponRecordTimeTargetIfRequired][Sets the time target to the best record for the current score weapon if $optionAutoSetTimeTarget is 3];
docargument [C][The id of the current score weapon];

docident [onCurrentScoreAttemptStarted][Event handler that is called after the current score attempt was started];

docident [onCurrentScoreAttemptScoreWeaponChanged][Event handler that is called after the score weapon of the current score attempt was changed];
docargument [N][The new score weapon id];

docident [onMapRecordSaved][Event handler that is called after a map record was saved];
docargument [M][The map record];

docident [onWeaponRecordDeleted][Event handler that is called after a weapon map record was deleted];
docargument [M][The map record];

docident [onAllRecordsOfMapInRevisionDeleted][Event handler that is called after all records for a map in a specific revision were deleted];
docargument [M][The map name];
docargument [M][The map revision];

docident [abortCountdown][Aborts the current countdown];

docident [isCountdownActive][Returns whether a countdown is active at the moment];
docremark [Returns 1 if there is an active countdown, 0 otherwise];

docident [runCountdown][Runs a countdown];
docargument [C][The countdown identifier];
docargument [C][The duration of the countdown in milliseconds];

docident [countdownTick][Fires the "onCountdownTick" event if this is not the last tick or the "onCountdownFinished" event if this is the last tick];
docremark [Also calls this function again after one second with the updated number of remaining milliseconds if];
docremark [it this is not the last tick.];
docargument [C][The countdown identifier];
docargument [L][The duration of the last countdown tick in milliseconds];

docident [onCountdownTick][Event handler that is called on each countdown tick];
docargument [C][The countdown identifier];
docargument [R][The number of remaining countdown milliseconds];

docident [onCountdownFinished][Event handler that is called when a countdown is finished];
docargument [C][The countdown identifier];

docident [isCountdownModeActive][Returns whether the countdown mode is currently active];
docremark [Returns 1 if the countdown mode is active, 0 otherwise];

docident [startCountdown][Starts a new time target countdown];
docargument [T][The time target in milliseconds];
docargument [C][The message to show when the countdown is finished];

docident [getCountdownColors][Returns the countdown colors based on the number of remaining milliseconds];
docremark [Returns the countdown colors];
docargument [R][The number of remaining countdown milliseconds];
docexample [getCountdownColors 14000][Returns $colorsCountdownDefault];
docexample [getCountdownColors 8000][Returns $colorsCountdownLessThanTenSecondsRemaining];
docexample [getCountdownColors 2000][Returns $colorsCountdownLessThanFourSecondsRemaining];

docident [onCountdownModeDisabled][Event handler that is called when the countdown mode state changes from "enabled" to "disabled"];

docident [getCurrentCountdownModeState][Returns the current countdown mode state];
docremark [Returns 1 if the countdown mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentCountdownModeState][Tries to set the current countdown mode state];
docremark [Returns 1 if the countdown mode state was successfully set, 0 otherwise];
docremark [If the countdown mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the countdown mode state will be shown.];
docargument [N][The new countdown mode state];
docargument [S][The notification to show on success (optional)];

docident [getCountdownModeStateCanNotBeChangedReason][Returns the reason why the countdown mode state can not be changed to a specified state];
docremark [Returns the reason why the countdown mode state can not be changed or an empty string if it can be changed];
docargument [N][The state to which the countdown mode state should be set (0 or 1)];

docident [onCountdownModeEnabled][Event handler that is called when the countdown mode state changes from "disabled" to "enabled"];

docident [isTimeTargetModeActive][Returns whether the time target mode is currently active];
docremark [Returns 1 if the time target mode is active, 0 otherwise];

docident [getTimeTargetScoreString][Returns a message that indicates whether the time target was beaten];
docremark [Returns the message];
docargument [S][The score time in milliseconds];

docident [startTimeTargetCountdown][Starts a new countdown for the current time target];
docargument [C][The countdown duration in milliseconds];

docident [onTimeTargetChanged][Event handler that is called when the time target is changed via the "changeCurrentTimeTarget" function];

docident [onCurrentScoreAttemptFinished][Event handler that is called after the current score attempt was finished];
docargument [S][The map record that was created from the score attempt];
docargument [C][The map record to which the score attempt map record will be compared];
docargument [I][1 if the comparison map record is the best map record for its map, 0 otherwise];

docident [onCurrentScoreAttemptAborted][Event handler that is called after the current score attempt was aborted];

docident [getCurrentTimeTarget][Returns the current time target];
docremark [Returns the current time target];

docident [getCurrentTimeTargetMinutes][Returns the minutes part of the current time target];
docremark [Returns the minutes part of the current time target];

docident [setCurrentTimeTargetMinutes][Changes the minutes part of the current time target];
docargument [N][The new minutes part of the current time target (Must be between 0 and 35791)];
docexample [setCurrentTimeTargetMinutes 5][Sets the minutes part of the current time target to 5];

docident [getCurrentTimeTargetSeconds][Returns the seconds part of the current time target];
docremark [Returns the seconds part of the current time target];

docident [setCurrentTimeTargetSeconds][Changes the seconds part of the current time target];
docargument [N][The new seconds part of the current time target (Must be between 0 and 59)];
docexample [setCurrentTimeTargetSeconds 47][Sets the seconds part of the current time target to 47];

docident [getCurrentTimeTargetMilliseconds][Returns the milliseconds part of the current time target];
docremark [Returns the milliseconds part of the current time target];

docident [setCurrentTimeTargetMilliseconds][Changes the milliseconds part of the current time target];
docargument [N][The new milliseconds part of the current time target (Must be between 0 and 999)];

docident [getCurrentTimeTargetTotalMilliseconds][Returns the total milliseconds of the current time target];
docremark [Returns the total milliseconds of the current time target];

docident [setCurrentTimeTargetTotalMilliseconds][Sets the total milliseconds of the current time target];
docargument [N][The new total milliseconds of the current time target (Must be between 0 and 2147483647)];
docexample [setCurrentTimeTargetTotalMilliseconds 10000][Sets the current time target to 10000 milliseconds (= 10 seconds)];

docident [changeCurrentTimeTarget][Changes the current time target to a specified time interval];
docremark [Also fires the "onTimeTargetChanged" event when the time target is changed.];
docargument [T][The time interval array to set the current time target to];

docident [initializeState][Initializes a state with a specified value];
docargument [S][The name of the state to initialize];
docargument [I][The value to initialize the state with (Must be 1 or 0, Default: 0)];

docident [getState][Returns the current value of a state];
docremark [Returns the state's current value (1 or 0)];
docargument [S][The name of the state whose value to return];

docident [setState][Sets the value of a state];
docremark [Returns the reason if the state was not changed to the new state or an empty string otherwise];
docremark [The state is only changed if the new state differs from the current state.];
docremark [Also fires the "on%STATE_NAME%StateEnabled" and "on%STATE_NAME%StateDisabled" events when the];
docremark [state changes accordingly.];
docargument [S][The name of the state whose value to set];
docargument [N][The value to set the state to (1 or 0)];

docident [tryToSetState][Tries to set a state];
docremark [Returns 1 if the state was successfully set, 0 otherwise];
docremark [If the state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the state will be shown.];
docargument [S][The name of the state whose value to set];
docargument [N][The value to set the state to (1 or 0)];
docargument [S][The notification to show on success (optional)];

docident [generateStateAliasName][Generates an alias name from a template string that contains a replacable "%STATE_NAME%" substring];
docremark [Returns the generated alias name];
docargument [S][The name of the state];
docargument [A][The template string for the alias name];

docident [generateStateValueAlias][Generates and returns the alias in which a state's value is stored];
docremark [Returns the name of the alias in which the state's value is stored];
docargument [S][The name of the state];

docident [newStateValueMatchesCurrentStateValue][Returns whether a new state value matches the current state value of a specified state];
docremark [Returns 1 if the value matches the current value of the state, 0 otherwise];
docargument [S][The name of the state];
docargument [N][The new state value (1 or 0)];

docident [getStateCanNotBeChangedReason][Returns the reason why a state can not be changed];
docremark [Returns the reason why the state can not be changed or an empty string if it can be changed];
docargument [S][The name of the state];
docargument [N][The new state value (1 or 0)];

docident [getLastFoundFormatSpecifierRules][Returns the last found format specifier rules];
docremark [Returns the last found format specifier rules];

docident [getLastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter][Returns the last number of format specifiers before the first non whitespace character];
docremark [Returns the last number of format specifiers before the first non whitespace character];

docident [parseCustomFormatString][Parses a custom format string and returns a format string for the "format" function];
docremark [The parsed data is available via "getLastFoundFormatSpecifierRules" and "getLastNumberOfFormatSpecifiersBeforeFirstNonWhitespaceCharacter".];
docremark [The "getMetaDataAfterFormatSpecifierTypeLength" will get the $dataAfterFormatSpecifierType ($arg1)];
docremark [and must return the length of the data that is meta data.];
docremark [The "createFormatSpecifierRuleFunction" will get the $metaDataBeforeFormatSpecifierType ($arg1),];
docremark [$formatSpecifierType ($arg2) and $dataAfterFormatSpecifierType ($arg3) and must return a single string that];
docremark [should be added to the $lastFoundFormatSpecifierRules.];
docremark [Note:];
docremark [The two functions will be called inside a parsestring loop, so you can not use another parsestring];
docremark [loop inside these functions.];
docargument [C][The custom format string to parse];
docargument [A][The available format specifier types as a string of format specifier type identifiers without separating whitespaces];
docargument [M][The length of the optional meta data after the format specifier type];
docargument [G][The name of the function to call to check how much of the data after the format specifier type is meta data];
docargument [C][The name of the function to call to create a format specifier rule];

docident [resetCurrentFormatSpecifierData][Resets the current format specifier data];

docident [appendCurrentFormatSpecifierDataToLastGeneratedFormatString][Appends the data of the current format specifier to the last generated format string];
docremark [This should only be called if the current format specifier is invalid.];
docargument [A][The available format specifier types];

docident [appendDataToLastGeneratedFormatString][Appends data to the last generated format string];
docargument [L][The data to append];

docident [parseCurrentFormatSpecifierData][Parses the data of the current format specifier into a format specifier rule and adds it to the $lastFoundFormatSpecifierRules if required];
docremark [If the format specifier is not valid the data will be appended to the last generated format string.];
docargument [A][The available format specifier types];
docargument [G][The name of the function to call to check how much of the data after the format specifier type is meta data];
docargument [C][The name of the function to call to create a format specifier rule];

docident [setPersistentValue][Sets a persistent value to the saved];
docremark [cfg file.];
docargument [A][The alias name];
docargument [A][The alias value to write];
docargument [W][1 to call instantly write the value to saved.cfg, 0 otherwise (optional)];

docident [substr_replace][Replaces a part of a string with a sub string and returns the result];
docremark [Returns the modified string];
docargument [T][The target string];
docargument [R][The replacement string];
docargument [S][The start position];
docargument [E][The end position (optional)];
docexample [substr_replace hello world 2][Returns "heworld"];
docexample [substr_replace hello universe 0 1][Returns "universello"];

docident [strrepeat][Returns a string repeated a specified number of times];
docremark [Returns the repeated string];
docargument [R][The string that will be repeated];
docargument [N][The number of repetitions];
docexample [strrepeat x 5][Returns "xxxxx"];

docident [substr_count][Counts and returns the number of occurrences of a substring inside a string];
docremark [Returns the number of occurrences];
docargument [H][The haystack];
docargument [N][The needle];
docargument [M][The maximum needle position (optional)];
docexample [substr_count "hello world" l][Returns 3];

docident [strstr_array][Checks if a string contains at least one needle of a list of needles];
docremark [Returns 1 if the string contains at least one of the needles, 0 otherwise];
docargument [H][The string that will be searched (haystack)];
docargument [N][The strings to search for (needles)];
docexample [strstr_array "hello" "k l m"][Returns 1 because "hello" contains "l"];
docexample [strstr_array "gema" "v w x y z"][Returns 0 because "gema" does not contain "v", "w", "x", "y" or "z"];

docident [uppercase_first][Converts the first character of a string to uppercase and returns the modified string];
docremark [Returns the modified string];
docargument [T][The target string];

docident [trimLeadingAndTrailingWhitespace][Removes leading and trailing whitespace from a given string];
docremark [Returns the string with removed leading and trailing whitespace];
docargument [T][The target string];

docident [findStrPosWithoutPrecedingSubstring][Finds and returns the first strpos result that is not preceded by a given string];
docremark [Returns the first strpos result that is not preceded by the forbidden substring];
docargument [T][The target string];
docargument [N][The needle to search for];
docargument [F][The substring that may not preced the needle];
docargument [O][The strpos occurrence number to check (optional) (Used for recursion)];

docident [strrpos][Returns the position of a substring inside a string starting at the end of the string];
docremark [Returns the position of the substring inside the haystack];
docargument [H][The haystack to search in];
docargument [N][The substring to search for];
docargument [O][A specific substring occurrence to return relative from the end of the string (optional)];

docident [loadValue][Loads and returns a value from a given alias name];
docremark [Returns the alias value or an empty string if the alias does not exist];
docremark [If the alias does not exist an empty string will be returned.];
docargument [A][The alias name];

docident [sortlistnumeric][Sorts a list of numbers by their value];
docremark [Returns the sorted list of numbers];
docremark [This function uses a quick sort algorithm based on https://cs.stackexchange.com/a/104825.];
docargument [L][The list of numbers];
docargument [S][The start index (used for recursion)];
docargument [E][The end index (used for recursion)];

docident [listremove][Removes all items with a given value from a list];
docremark [Returns the modified list];
docargument [L][The list];
docargument [N][The needle to remove from the list];

docident [getWeaponName][Returns the weapon name for a weapon id];
docremark [Returns the weapon name];
docargument [W][The weapon id];

docident [getTeamName][Returns the team name for a team id];
docremark [Returns the team name];
docargument [T][The team id];

docident [array_length][Returns the number of elements inside an array];
docremark [Returns the number of elements inside the array];
docargument [A][The array];
docargument [A][The array separator];
docexample [array_length "a b c" " "][Returns 3];
docexample [array_length "a  b c" "  "][Returns 2];

docident [array_slice][Returns a part of an array];
docremark [Returns the partial array or an empty string if the start or end index are invalid];
docargument [A][The array];
docargument [A][The array separator];
docargument [S][The start index];
docargument [E][The end index (optional)];
docexample [array_slice "a b c" " " 1][Returns "b c"];
docexample [array_slice "a b c" " " 1 1][Returns "b"];

docident [array_pad][Fills an array with empty fields until it reaches a specific size];
docremark [Returns the filled array];
docargument [A][The array];
docargument [A][The array separator];
docargument [T][The target size of the array];
docexample [array_pad "a b" " " 4][Returns "a b <empty> <empty>"];

docident [array_get][Reads and returns one entry of an array];
docremark [Returns the content of the specified index];
docargument [A][The array];
docargument [D][The dimension ids];
docargument [S][The start dimension (Default: maximum detected array dimension)];
docexample [array_get "a b  c d" "1 0"][Returns "c"];
docexample [array_get "a b  c d" "1"][Returns "c d"];

docident [array_set][Sets the value of a specified array index];
docremark [Returns the modified array];
docremark [If the index exists the former value will be replaced by the new value.];
docremark [If the value is empty the index will be unset.];
docargument [A][The array];
docargument [D][The dimension ids];
docargument [N][The value to set at the specified position];
docargument [S][The start dimension (Default: maximum detected array dimension)];
docexample [array_set "a b  c d" "1 0" new][Returns "a b  new d"];
docexample [array_set "a b  c d  <empty>  5 6" "3"][Returns "a b  c d"];

docident [array_remove][Removes the value at a specified array index from a given array];
docremark [Returns the modified array];
docargument [A][The array];
docargument [D][The dimension ids];
docargument [S][The start dimension (Default: maximum detected array dimension)];
docexample [array_remove "a b  c d" "1 0"][Returns "a b  d"];
docexample [array_set "a b c d" "2"][Returns "a c d"];

docident [array_getRealIndex][Converts negative indexes to (array_length - <index>), checks if the index is valid and returns the resulting index];
docremark [Returns the real index or -1 if the index is not valid];
docargument [A][The array];
docargument [A][The array separator];
docargument [I][The index];

docident [array_getIndexStartPosition][Returns the start position of an array index inside the total array string];
docremark [Returns the start position of the index inside the array];
docargument [A][The array];
docargument [A][The array separator];
docargument [I][The index];
docexample [array_getIndexStartPosition "hello world" " " 1][Returns 6];

docident [array_getIndexEndPosition][Returns the end position of an array index inside the total array string];
docremark [Returns the end position of the index inside the array string];
docargument [A][The array];
docargument [A][The array separator];
docargument [I][The index];
docexample [array_getIndexEndPosition "hello world" " " 0][Returns 4];

docident [array_getNumberOfDimensions][Returns the number of dimensions in an array];
docremark [Returns the number of dimensions in the array];
docremark [This is done by recursively calling this function and increasing the dimension by one per call.];
docargument [A][The array];
docargument [L][The dimension that was found in an earlier cycle of this function];
docexample [array_getNumberOfDimensions "a"][Returns 1];
docexample [array_getNumberOfDimensions "a b  c d"][Returns 2];

docident [array_replace][Replaces an entry inside an array];
docremark [Returns the modified array];
docargument [A][The array];
docargument [A][The array separator];
docargument [I][The index];
docargument [N][The value to set at the index];
docexample [array_replace "a b c" " " 1 new][Returns "a new c"];
docexample [array_replace "a b c" " " 5 new][Returns "a b c"];

docident [array_truncateSupernumerousDimensions][Truncates supernumerous dimensions from a list of dimensions if necessary and returns the result];
docremark [Returns the truncated dimension list or -1 if the dimension list is not valid];
docremark [Will return -1 if the supernumerous dimensions do not target the index 0.];
docargument [A][The array];
docargument [D][The dimension ids];

docident [array_trim][Removes trailing <empty> fields from the highest dimension of an array];
docremark [Returns the updated array];
docargument [A][The array];

docident [array_getHighestDefinedDimension][Returns the highest defined dimension from an array and a list of indexes];
docremark [Returns the highest defined dimension or -1 if the list of indexes is invalid];
docargument [A][The array];
docargument [D][The dimension ids];

docident [printGemaNotification][Prints a gema mode notification];
docremark [If $optionShowNotifications is 0 this function will do nothing.];
docargument [T][The text to print];

docident [createScoreAttemptArray][Creates and returns a score attempt array];
docremark [Returns the created score attempt array];
docargument [W][The score weapon id];
docargument [T][The team id];
docargument [M][The map name];
docargument [M][The map revision];

docident [getScoreAttemptStartTime][Returns the start time of a score attempt in milliseconds since game start];
docremark [Returns the start time of the score attempt array];
docargument [S][The score attempt array];

docident [getScoreAttemptWeaponId][Returns the weapon id of a score attempt];
docremark [Returns the weapon id of the score attempt array];
docargument [S][The score attempt array];

docident [setScoreAttemptWeaponId][Sets the weapon id of a score attempt];
docremark [Returns the modified score attempt array];
docargument [S][The score attempt array];
docargument [W][The weapon id to set];

docident [getScoreAttemptTeamId][Returns the team id of a score attempt];
docremark [Returns the team id of the score attempt array];
docargument [S][The score attempt array];

docident [getScoreAttemptMapName][Returns the map name of a score attempt];
docremark [Returns the map name of the score attempt array];
docargument [S][The score attempt array];

docident [getScoreAttemptMapRevision][Returns the map revision of a score attempt];
docremark [Returns the map revision of the score attempt array];
docargument [S][The score attempt array];

docident [getMillisecondsPassedSinceScoreAttemptStart][Returns the time in milliseconds that passed since a score attempt started];
docremark [Returns the time in milliseconds that passed since the score attempt started];
docargument [S][The score attempt array];

docident [startScoreAttempt][Starts a new score attempt and initializes the team change and edit mode change event listeners];

docident [isScoreAttemptActive][Returns whether a score attempt is active at the moment];

docident [editModeChangeListener][Checks whether the player changes to edit mode];
docremark [Aborts the current score attempt when a change to edit mode is detected];

docident [teamChangeListener][Detects whether the player's team changes];
docremark [Aborts the current score attempt when a team change is detected];
docargument [I][The initial player team id];

docident [onGemaModeDisabled][Event handler that is called when the gema mode state changes from "enabled" to "disabled"];

docident [onMapStartGemaModeStateAutoChangeChecksFinished][Event handler that is called after the gema mode state auto change checks on map start are complete];
docargument [N][The new gema mode state];

docident [getCurrentScoreAttemptCompareMapRecord][Returns the map record to which the score attempt map record will be compared];
docremark [Returns the map record];

docident [setCurrentScoreAttemptCompareMapRecord][Sets the map record to which the score attempt map record will be compared];
docargument [M][The map record];

docident [getUpdatedScoreWeapon][Checks whether a used weapon aborts knife only or pistol only mode and returns the new score weapon id];
docremark [Returns the updated score weapon id];
docremark [Will return -1 if the score weapon doesn't need to be changed];
docargument [U][The id of the weapon that the player used];
docargument [C][The id of the current score weapon];

docident [getCurrentScoreAttempt][Returns the current active score attempt];
docremark [Returns the current active score attempt];
docremark [Will return an empty string if no score attempt is active at the moment.];

docident [getMillisecondsPassedSinceCurrentScoreAttemptStart][Returns the time in milliseconds that passed since the current score attempt started];
docremark [Returns the time in milliseconds that passed since the current score attempt started];

docident [startCurrentScoreAttempt][Starts the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptStarted" event.];

docident [changeCurrentScoreAttemptWeaponIfRequired][Changes the score weapon of the current score attempt if required];
docremark [Also fires the "onCurrentScoreAttemptScoreWeaponChanged" event if the score weapon was changed.];
docargument [U][The id of the weapon that the player used];

docident [finishCurrentScoreAttempt][Finishes the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptFinished" event.];

docident [abortCurrentScoreAttempt][Aborts the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptAborted" event.];

docident [clearCurrentScoreAttempt][Clears the current score attempt];

docident [createTimeIntervalArray][Creates and returns a time interval array];
docremark [Returns the created time interval array];
docargument [T][The total milliseconds of the time interval];

docident [getTimeIntervalTotalMilliseconds][Returns the total milliseconds of a time interval];
docremark [Returns the total milliseconds of the time interval];
docargument [T][The time interval array];

docident [getTimeIntervalTotalSeconds][Returns the total seconds of a time interval];
docremark [Returns the total seconds of the time interval];
docargument [T][The time interval array];

docident [getTimeIntervalMinutes][Returns the minutes part of a time interval];
docremark [Returns the minutes part of the time interval];
docargument [T][The time interval array];

docident [getTimeIntervalSeconds][Returns the seconds part of a time interval];
docremark [Returns the seconds part of the time interval];
docargument [T][The time interval array];

docident [getTimeIntervalMilliseconds][Returns the milliseconds part of a time interval];
docremark [Returns the milliseconds part of the time interval];
docargument [T][The time interval array];

docident [getIsTimeIntervalNegative][Returns whether a time interval is a negative time interval];
docremark [Returns 1 if the time interval is a negative time interval, 0 otherwise];
docargument [T][The time interval array];

docident [getLastTimeIntervalChangeErrorMessage][Returns the last error message for an error that occurred during a time interval change];
docremark [Returns the last error message or an empty string if no error occurred yet];

docident [changeTimeIntervalMinutes][Changes the minutes part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [N][The new minutes part for the time interval (Must be between 0 and 35791)];

docident [changeTimeIntervalSeconds][Changes the seconds part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [N][The new seconds part for the time interval (Must be between 0 and 59)];

docident [changeTimeIntervalMilliseconds][Changes the milliseconds part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [N][The new milliseconds part for the time interval (Must be between 0 and 999)];

docident [addTimeIntervalMinutes][Adds a time difference in minutes to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [M][The time difference in minutes];

docident [addTimeIntervalSeconds][Adds a time difference in seconds to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [S][The time difference in seconds];

docident [addTimeIntervalMilliseconds][Adds a time difference in milliseconds to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [T][The time interval array];
docargument [M][The time difference in milliseconds];

docident [getTimeIntervalDifferenceNotValidReason][Returns the reason why a time interval difference in milliseconds is not valid];
docremark [Returns the error message or an empty string if the time interval difference is valid];
docargument [T][The timeInterval array to which the difference should be added];
docargument [M][The time difference in milliseconds];

docident [generateTimeStringFromMilliseconds][Generates and returns a time string in a specified format from a time in milliseconds];
docremark [Returns the generated time string];
docargument [M][The time in milliseconds];
docargument [C][The colors that should be used to colorize the time string];
docargument [T][The format that should be used to generate the time string (optional)];

docident [generateTimeStringFromTimeInterval][Generates and returns a time string in a specified format from a time in milliseconds];
docremark [Returns the generated time string];
docargument [T][The time interval array];
docargument [C][The color config (time parts, time unit names and other text)];
docargument [T][The format that should be used to generate the time string (optional)];

docident [generateTextFromFormatSpecifierRule][Generates text from a given time interval and format specifier rule];
docremark [Returns the generated text];
docargument [T][The time interval array];
docargument [F][The format specifier rule array];
docargument [H][1 if leading zero time intervals should be hidden, 0 otherwise];
docargument [H][1 if the string should be empty if the time part is zero, 0 otherwise];
docargument [C][The color config to use to colorize the string];

docident [getMinutesTimeUnitName][Returns the name for the "minutes" time unit];
docremark [Returns the "minutes" time unit name];
docargument [N][The name type to return (0 = abbreviated, 1 = full name, 2 = custom name)];

docident [getSecondsTimeUnitName][Returns the name for the "seconds" time unit];
docremark [Returns the "seconds" time unit name];
docargument [N][The name type to return (0 = abbreviated, 1 = full name, 2 = custom name)];

docident [getMillisecondsTimeUnitName][Returns the name for the "milliseconds" time unit];
docremark [Returns the "milliseconds" time unit name];
docargument [N][The name type to return (0 = abbreviated, 1 = full name, 2 = custom name)];

docident [getLastFoundTimeFormatSpecifierRules][Returns the format specifier rules that were found in the last parsed time format string];
docremark [Returns the format specifier rules that were found in the last parsed time format string];

docident [getLastFoundHideLeadingZeroTimeIntervalPartsRule][Returns the "hide leading zero time interval parts" rule that was found in the last parsed time format string];
docremark [Returns the "hide leading zero time interval parts" rule that was found in the last parsed time format string];

docident [getLastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter][Returns the number of time format specifiers before the first non whitespace character that were found in the last parsed time format string];
docremark [Returns the number of time format specifiers before the first non whitespace character that were found in the last parsed time format string];

docident [parseTimeFormatString][Parses a given time format string if it doesn't match the last parsed time format string];
docremark [Returns the corresponding format string for the "format" function];
docargument [T][The time format string to parse];

docident [doParseTimeFormatString][Parses a given time format string and returns a corresponding format string for the "format" function];
docremark [Returns the corresponding format string for the "format" function];
docremark [The parsed data is available via "getLastFoundTimeFormatSpecifierRules", "getLastFoundHideLeadingZeroTimeIntervalPartsRule"];
docremark [and "getLastNumberOfTimeFormatSpecifiersBeforeFirstNonWhitespaceCharacter".];
docargument [T][The time format string to parse];

docident [getMetaDataAfterTimeFormatSpecifierTypeLength][Returns the length of meta data inside the data after a time format specifier type];
docremark [Returns the length of the meta data inside the given data];
docargument [D][The data to check];

docident [createTimeFormatSpecifierRule][Creates and returns a time format specifier rule];
docremark [Returns the created format specifier rule];
docargument [F][The meta data before the format specifier type];
docargument [F][The format specifier type];
docargument [F][The meta data after the format specifier type];

docident [generateMinutesString][Generates and returns a minutes string from a given time interval and time format specifier rule];
docremark [Returns the generated minutes string];
docargument [T][The time interval array];
docargument [T][The time format specifier rule];
docargument [R][1 if the string should be empty if the minutes part is zero, 0 otherwise];
docargument [C][The color config to use to colorize the string];

docident [generateSecondsString][Generates and returns a seconds string from a given time interval and time format specifier rule];
docremark [Returns the generated seconds string];
docargument [T][The time interval array];
docargument [T][The time format specifier rule];
docargument [R][1 if the string should be empty if the seconds part is zero, 0 otherwise];
docargument [C][The color config to use to colorize the string];

docident [generateMillisecondsString][Generates and returns a milliseconds string from a given time interval and time format specifier rule];
docremark [Returns the generated milliseconds string];
docargument [T][The time interval array];
docargument [T][The time format specifier rule];
docargument [C][The color config to use to colorize the string];

docident [generateTotalTimeUnitNameString][Generates and returns a total time unit name string from a given time interval and time format specifier rule];
docremark [Returns the generated milliseconds string];
docargument [T][The time interval array];
docargument [T][The time format specifier rule];
docargument [H][1 if leading zero time intervals should be hidden, 0 otherwise];
docargument [C][The color config to use to colorize the string];

docident [generateTimePartDigitsString][Generates and returns a time part digits string];
docremark [Returns the generated time part digits string];
docargument [T][The time part digits (minutes, seconds or milliseconds)];
docargument [T][The time format specifier rule];
docargument [C][The color config to use to colorize the string];

docident [generateTimeUnitNameString][Generates and returns a time unit name string];
docremark [Returns the generated time unit name string];
docargument [T][The time format specifier rule];
docargument [G][The name of the function to use to fetch the time unit name];
docargument [C][The color config to use to colorize the string];

docident [createTimeFormatSpecifierRuleArray][Creates and returns a time format specifier rule];
docremark [Returns the created time format specifier rule array];
docargument [F][The format specifier type];
docargument [N][The number of 0 padding digits for the time part];
docargument [T][The time unit type];
docargument [N][The number of padding whitespaces between the time part and the time unit];

docident [getTimeFormatSpecifierRuleArrayFormatSpecifierType][Returns a time format specifier rule's format specifier type];
docremark [Returns the time format specifier rule's format specifier type];
docargument [T][The time format specifier rule array];

docident [getTimeFormatSpecifierRuleArrayNumberOfZeroPaddingDigits][Returns a time format specifier rule's number of zero padding digits];
docremark [Returns the time format specifier rule's number of zero padding digits];
docargument [T][The time format specifier rule array];

docident [getTimeFormatSpecifierRuleArrayTimeUnitType][Returns a time format specifier rule's time unit type];
docremark [Returns the time format specifier rule's time unit type];
docargument [T][The time format specifier rule array];

docident [getTimeFormatSpecifierRuleArrayNumberOfTimeUnitTypePaddingWhitespaces][Returns a time format specifier rule's number of time unit type padding whitespaces];
docremark [Returns the time format specifier rule's number of time unit type padding whitespaces];
docargument [T][The time format specifier rule array];

docident [colorizeTime][Colorizes a formatted time digit];
docremark [Returns the colorized time digit];
docargument [F][The formatted time digit to colorize];
docargument [T][The time color array];

docident [colorizeTimeUnit][Colorizes a time unit name];
docremark [Returns the colorized time unit name];
docargument [T][The time unit name to colorize];
docargument [T][The time color array];

docident [colorizeTimeGeneralText][Colorizes the general text of a formatted time string];
docremark [Returns the colorized general text];
docargument [T][The general text to colorize];
docargument [T][The time color array];

docident [getTimeGeneralTextColorFromTimeColorArray][Returns the color for general texts of formatted time strings from a time color array];
docremark [Returns the color to use for general texts of formatted time strings];
docargument [T][The time color array];

docident [getTimeColorFromTimeColorArray][Returns the color for time digits of formatted time strings from a time color array];
docremark [Returns the color to use for time digits of formatted time strings];
docargument [T][The time color array];

docident [getTimeUnitColorFromTimeColorArray][Returns the color for time unit names of formatted time strings from a time color array];
docremark [Returns the color to use for time unit names of formatted time strings];
docargument [T][The time color array];

docident [formatTimestampDate][Generates and returns a date string from a timestamp array];
docremark [Returns the generated date string];
docargument [T][The timestamp array to generate a date string from];

docident [formatTimestampTime][Generates and returns a time string from a timestamp array];
docremark [Returns the generated time string];
docargument [T][The timestamp array to generate a time string from];

docident [getCurrentGemaModeState][Returns the current gema mode state];
docremark [Returns 1 if the gema mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentGemaModeState][Tries to set the current gema mode state];
docremark [Returns 1 if the gema mode state was successfully set, 0 otherwise];
docremark [If the gema mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the gema mode state will be shown.];
docargument [N][The new gema mode state];
docargument [S][The notification to show on success (optional)];

docident [getGemaModeStateCanNotBeChangedReason][Returns the reason why the gema mode state can not be changed to a specified state];
docremark [Returns the reason why the gema mode state can not be changed or an empty string if it can be changed];
docargument [N][The state to which the gema mode state should be set (0 or 1)];

docident [onGemaModeEnabled][Event handler that is called when the gema mode state changes from "disabled" to "enabled"];

docident [isGemaMapName][Returns whether a map name is a gema map name];
docremark [Returns 1 if the map name is a gema map name, 0 otherwise];
docargument [M][The map name];

docident [containsGemaMapNameImplicit][Returns whether a map name contains one of the implicit words];
docremark [Returns 1 if the map name contains one of the implicit words, 0 otherwise];
docargument [M][The map name];
docexample [containsGemaMapNameImplicit jigsaw-map-1][Will return 1 because "jigsaw-map-1" contains the implicit word "jigsaw"];
docexample [containsGemaMapNameImplicit ac_douze][Will return 0 because "ac_douze" does not contain any of the implicit words];

docident [containsGemaMapNameCodes][Returns whether a map name contains ge3ma@4];
docremark [Returns 1 if the map name contains ge3ma@4, 0 otherwise];
docargument [M][The map name];
docexample [containsGemaMapNameCodes gema_warm_up][Will return 1 because "gema_warm_up" contains the word "gema"];
docexample [containsGemaMapNameCodes ac_edifice][Will return 0 because "ac_edifice" does not contain ge3ma@4];

docident [letterMatchesGemaMapNameCode][Returns whether a letter matches a specific position of the gema map name code];
docremark [Returns 1 if the letter matches the gema map name code position, 0 otherwise];
docargument [L][The letter];
docargument [C][The gema map name code position];
docexample [letterMatchesGemaMapNameCode a 2][Will return 0 because "a" does not match "m"];
docexample [letterMatchesGemaMapNameCode a 3][Will return 1 because "a" matches "a@4"];

docident [isGemaModeActive][Returns whether the gema mode is currently active];
docremark [Returns 1 if the gema mode is active, 0 otherwise];

docident [autoEnableGemaModeIfRequired][Automatically enables the gema mode if required];
docremark [This will only be done if $optionAutoActivateGemaMode is set to 1.];

docident [autoDisableGemaModeIfRequired][Automatically disables the gema mode if required];

docident [isGema][Returns whether the current environment is gema compatible];
docremark [Returns 1 if the environment is gema compatible, 0 otherwise];
docremark [This takes into account the game mode, map name and whether a demo is played back at the moment.];
docremark [The environment is gema compatible if the game mode is "CTF", the map name is a gema map name and no demo];
docremark [is played back at the moment.];

docident [getEnvironmentNotGemaCompatibleReason][Returns the reason why the current environment is not gema compatible];
docremark [Returns the reason or an empty string if the environment is gema compatible];

docident [calculateStringWidth][Calculates the width of a given string for a specified font type];
docremark [Returns the calculated width];
docargument [T][The string whose width to calculate];
docargument [F][The font type to calculate the width for];

docident [calculateStringPositionBeforeMaximumWidth][Calculates the last position inside a string that does not exceed a given maximum width];
docremark [Returns the last position inside the string that does not exceed the maximum width];
docargument [T][The target string];
docargument [F][The font type to calculate the width with];
docargument [M][The maximum string width];
docargument [I][The initial string width (Default: 0)];

docident [stringWidthIterator][Iterates over each character of a string that has a width greater than zero];
docremark [Returns the total string width];
docargument [T][The target string];
docargument [F][The font type to calculate the width with];
docargument [S][The callback to call per iteration cycle];
docargument [I][The initial string width];

docident [printableStringCharactersIterator][Iterates over each printable character of a string];
docargument [T][The target string];
docargument [P][The callback to call per iteration cycle];

docident [fontDefaultCharacterWidths][];

docident [fontSerifCharacterWidths][];

docident [fontMonoCharacterWidths][];

docident [fontTypeCharacterWidthListNames][The font type to characterWidthListName mappings The indexes match the corresponding $__fontsetting value];

docident [getAvailableFontTypes][Returns the names of all available font types];
docremark [Returns the names of all available font types];

docident [addFontTypeCharacterWidthList][Adds a new font type character width list to the $fontTypeCharacterWidthListNames list];
docremark [The character width list name must match the pattern "font<fontName>CharacterWidths".];
docremark [Call this to make custom fonts available in the options menu.];
docargument [C][The character width list name to add];

docident [loadCharacterWidthFromFontType][Loads the width for a character for a given font type];
docremark [Returns the width of the character for the specified font type];
docremark [Will return 0 if no characterWidthList for the font type exists.];
docargument [C][The character whose width to load];
docargument [F][The font type to load the character width from (One of the $fontTypeCharacterWidthListNames indexes)];

docident [loadCharacterWidthFromList][Loads the width for a character from a given characterWidthList];
docremark [Returns the width of the character];
docremark [Will return 0 if no width for the character is defined in the characterWidthList.];
docargument [C][The character whose width to load];
docargument [C][The character width list to load the character width from];

docident [onFontTypeCharacterWidthListAdded][Event that is fired when a new font type character width list was added];
docargument [C][The name of the character width list that was added];

docident [calculateNumberOfPassedTabStops][Calculates the number of passed tab stops at a given text pixel position for a specified font type];
docremark [Returns the number of passed tab stops at the given text pixel position];
docargument [T][The text pixel position];
docargument [F][The font type];

docident [calculateTabStopNumberPosition][Calculates the text pixel position at a given tab stop number for a specified font type];
docremark [Returns the text pixel position at the given tab stop number];
docargument [T][The tab stop number];
docargument [F][The font type];

docident [calculateNextTabStopNumber][Calculates the next tab stop number relative to a given text pixel position for a specified font type];
docremark [Returns the next tab stop number relative to the given text pixel position];
docargument [T][The text pixel position];
docargument [F][The font type];

docident [calculateNextTabStopNumberPosition][Calculates the text pixel position of the next tab stop relative to a given text pixel position for a specified font type];
docremark [Returns the text pixel position at the next tab stop number relative to the given text pixel position];
docargument [T][The text pixel position];
docargument [F][The font type];

docident [calculateDistancesToClosestCommonNextTabStopNumber][Calculates the distances to the closest common next tab stop number for a given set of strings];
docremark [Returns the distances to the largest next tab stop number per string];
docremark [The closest common next tab stop number will be the largest next tab stop number of the strings.];
docremark [The returned list contains the needed number of pad tabs per string to reach the largest next tab stop number.];
docargument [O][The list of output strings];
docargument [M][The minimum distance to the next tab stop per string];
docargument [F][The font type];

docident [generateOutputList][Generates a output list from a given list of strings];
docremark [Returns the generated output list];
docargument [L][The list items];
docargument [I][The item separator (e.g. ", ")];
docargument [L][The separator between the second and last item (optional, Default: $arg2)];

docident [generateOutputLines][Generates and returns width limited output lines from a given list of words];
docremark [Returns the generated output lines];
docremark [Lines breaks will be added at whitespace positions if possible or at the last possible character if a line];
docremark [contains no whitespace.];
docargument [O][The list of words to generate output lines from];
docargument [M][The maximum width per line];
docargument [O][The prefix per output line];
docargument [F][The font type to calculate the width with];

docident [generateOutputParagraphs][Generates and returns a list of output paragraphs from a given list of words];
docremark [Returns the generated output paragraphs];
docremark [The special word "<PARAGRAPH_END>" indicates the end of a paragraph.];
docargument [O][The list of words to generate output paragraphs from];

docident [menuAboutGemaDescriptionText][The text for the "What is gema" section in the about menu];

docident [menuAboutGemaRulesText][The text for the "Gema rules" section in the about menu];

docident [deleteAllStrings][Deletes all string constants];

docident [function][Creates a new function with non persistent variables inside the function body];
docargument [F][The name of the function];
docargument [F][The function body];

docident [event][Creates a new custom event];
docremark [Event listeners for the event can be added using the eventlistener function.];
docargument [E][The event name];
docargument [E][The event body];

docident [eventlistener][Creates a new event listener for a event];
docargument [E][The event name];
docargument [E][The event listener body];

docident [ulooplist][Unpersistent looplist];
docremark [Makes sure that the listItemName is not persistent.];
docargument [L][The list];
docargument [L][The list item name];
docargument [L][The loop body];

docident [showDeleteRecordDialog][Shows the delete record dialog];
docremark [Will do nothing but preventing menus from closing if a map revision and weapon ID are given and no];
docremark [corresponding map record could be found.];
docargument [M][The map name];
docargument [M][The map revision (-1 targets all revisions)];
docargument [W][The target weapon id (-1 targets all weapons)];

docident [getDeleteRecordConfirmQuestion][Returns the confirm question for the "Delete Record" menu];
docremark [Returns the confirm question for the "Delete Record" menu];

docident [getDeleteRecordConfirmText][Returns the text for the "Confirm" menu item in the "Delete Record" menu];
docremark [Returns the text for the "Confirm" menu item in the "Delete Record" menu];

docident [getDeleteRecordCancelText][Returns the text for the "Cancel" menu item in the "Delete Record" menu];
docremark [Returns the text for the "Cancel" menu item in the "Delete Record" menu];

docident [deleteRecordConfirmAction][Deletes the targeted map records];
docremark [Also closes the "Delete Record" menu.];
docremark [This function is called when the record deletion is confirmed by the user.];

docident [deleteRecordCancelAction][Closes the "Delete Record" menu];
docremark [This function is called when the record deletion is cancelled by the user.];

docident [buildDeleteRecordDialog][Creates the "Delete Record" menu];

docident [showMigrateRecordsDialog][Shows the "Migrate Records" dialog];
docargument [M][The map name];
docargument [M][The map revision (-1 to target all other map revisions)];

docident [getMigratRecordsQuestionText][Returns the question text for the "Migrate Records" dialog];
docremark [Returns the question text for the "Migrate Records" dialog];

docident [getMigrateRecordsConfirmText][Returns the "yes" answer text for the "Migrate Records" dialog];
docremark [Returns the "yes" answer text for the "Migrate Records" dialog];

docident [getMigrateRecordsCancelText][Returns the "no" answer text for the "Migrate Records" dialog];
docremark [Returns the "no" answer text for the "Migrate Records" dialog];

docident [onMapRevisionCheckboxEnabled][Handler that is called when a map revision check box is enabled];
docremark [Adds the map revision to the list of map revisions whose records should be migrated.];
docargument [M][The map revision];

docident [onMapRevisionCheckboxDisabled][Handler that is called when a map revision check box is disabled];
docremark [Removes the map revision from the list of map revisions whose records should be migrated.];
docargument [M][The map revision];

docident [migrateRecordsConfirmAction][Migrates all records from the target map revision to the current map revision];
docremark [Also closes the "Migrate Records" menu.];
docremark [This function is called when the record migration is confirmed by the user.];

docident [migrateRecordsCancelAction][Closes the "Migrate Records" menu];
docremark [This function is called when the record migration is cancelled by the user.];

docident [buildMigrateRecordsDialog][Builds the menu for the "Migrate Records" dialog];

docident [showChangeLanguageDialog][Shows the "Change Language" dialog];

docident [onLanguageSelected][Event handler that is called when a language is selected via the dialog];
docargument [L][The identifier of the language that was selected];

docident [buildChangeLanguageDialog][Builds the menu for the "Change Language" dialog];

docident [generateOptionCheckBoxMenuItem][Generates a check box menu item for options that can only be set to either true or false];
docremark [For this to work the following conditions must be met:];
docremark [1. The name of the option must be stored in a alias named "menuItem<optionName>Option"];
docremark [2. The option's value must be stored in a alias named "option<optionName>"];
docargument [O][The name of the option];

docident [buildOptionsMenu][Builds the options menu];
docargument [$arg1][No description];

docident [generateTextMenuItems][Generates text menu items with a limited width from a given list of words];
docargument [O][The list of words to generate text menu items from];
docargument [M][The maximum width per menu item];
docargument [O][The prefix per menu item];

docident [formatAboutMenuForFont][Menu font formatter that reformats the about menu for the current font];
docremark [This just makes the about menu rebuild itself the next time it is shown.];

docident [setOptionMenuAboutMaximumLineWidth][Sets the current value of the $optionMenuAboutMaximumLineWidth option];
docargument [N][The new value for the $optionMenuAboutMaximumLineWidth option];

docident [buildAboutMenu][Builds the "About" menu];

docident [onEnableTimeTargetModeCheckBoxToggled][Function that is called when the "Enable Time Target Mode" checkbox is toggled];
docremark [Tries to set the time target mode state to the value of the checkbox and refreshes the menu.];
docargument [C][The current state of the "Enable Time Target Mode" checkbox];

docident [onShowCountdownCheckBoxToggled][Function that is called when the "Show countdown" checkbox is toggled];
docremark [Tries to set the countdown mode state to the value of the checkbox and refreshes the menu if it fails.];
docargument [C][The current state of the "Show countdown" checkbox];

docident [onTimeTargetMinutesEdited][Function that is called when the "Minutes" text input field value changed];
docremark [Tries to set the time target minutes to the value of the input field and refreshes the menu if it fails.];
docargument [I][The current value of the "Minutes" input field];

docident [onTimeTargetSecondsEdited][Function that is called when the "Seconds" text input field value changed];
docremark [Tries to set the time target seconds to the value of the input field and refreshes the menu if it fails.];
docargument [I][The current value of the "Seconds" input field];

docident [onTimeTargetMillisecondsEdited][Function that is called when the "Milliseconds" text input field value changed];
docremark [Tries to set the time target milliseconds to the value of the input field and refreshes the menu if it fails.];
docargument [I][The current value of the "Milliseconds" input field];

docident [buildTimeTargetMenu][Builds the "Time Target" menu];

docident [getMenuPadTabsForMainMenu][Calculates the menu pad tabs if required and returns the last calculated numbers of pad tabs for the tab padded main menu texts];
docremark [Returns the last calculated numbers of pad tabs for the tab padded main menu texts];

docident [calculateMenuPadTabsForMainMenu][Calculates the menu pad tabs for the tab padded main menu texts];
docargument [F][The font type to calculate the pad tabs for];

docident [getMenuItemMapText][Returns the text for the "Map: <map name>" menu item];
docremark [Returns the text for the "Map: <map name>" menu item];

docident [getMenuItemBestMapRecordText][Returns the text for the "Best time: <time>" menu item];
docremark [Returns the text for the "Best time: <time>" menu item];

docident [getMenuItemCurrentTimeTargetText][Returns the text for the "Time target: <time target>" menu item];
docremark [Returns the text for the "Time target: <time target>" menu item];

docident [onMenuItemBestMapRecordSelected][Shows either the "Weapon Records" or "Delete Records" menu depending on $optionEnableWeaponRecordsMenu];
docremark [This function is called when the best map record menu item is selected.];

docident [onEnableGemaModeCheckBoxToggled][Function that is called when the "Enable Gema Mode" checkbox is toggled];
docremark [Tries to set the gema mode state to the value of the checkbox and refreshes the menu if it fails.];
docargument [C][The current state of the "Enable Gema Mode" checkbox];

docident [showGemaModeMenu][Shows the "Gema Mode" menu];

docident [buildGemaModeMenu][Builds the "Gema Mode" menu];

docident [getMenuPadTabsForWeaponRecordsMenuWeaponRecordItems][Calculates the menu pad tabs if required and returns the last calculated numbers of pad tabs for the weapon record item texts];
docremark [Returns the last calculated numbers of pad tabs for the weapon record item texts];

docident [getMenuPadTabsForWeaponRecordsMenuMapInfoItems][Calculates the menu pad tabs if required and returns the last calculated numbers of pad tabs for the map info item texts];
docremark [Returns the last calculated numbers of pad tabs for the map info item texts];

docident [calculateMenuPadTabsForWeaponRecordsMenuWeaponRecordItems][Calculates the menu pad tabs for the weapon record item texts];
docargument [F][The font type to calculate the pad tabs for];

docident [calculateMenuPadTabsForWeaponRecordsMenuMapInfoItems][Calculates the menu pad tabs for the map info item texts];
docargument [F][The font type to calculate the pad tabs for];

docident [hideScoreWeaponModel][Hides the score weapon model above the menu];

docident [generateWeaponMapRecordMenuItems][Generates the weapon map record menu items for all weapons];

docident [getRevisionSliderValues][Fetches and returns the values for the map revision slider];
docremark [Returns the map revisions for the map revision slider];

docident [getRevisionSliderMaxValue][Returns the maximum value for the map revision slider];
docremark [Returns the maximum value for the map revision slider];

docident [onRevisionSliderValueSelected][Handler that is called when a value is selected via the map revision slider];
docargument [R][The new revision slider value];

docident [getMenuItemCurrentMapNameText][Returns the text for the "Map: <map name>" menu item];
docremark [Returns the text for the "Map: <map name>" menu item];

docident [getMenuItemCurrentMapRevisionSliderText][Returns the text for the "Revision: <slider>" menu item];
docremark [Returns the text for the "Revision: <slider>" menu item];

docident [generateWeaponMapRecordMenuItem][Generates a weapon map record menu item for a specific weapon];
docargument [W][The weapon id];
docargument [W][The path to the weapon model to display above the "Weapon Records" menu (optional)];

docident [getMigrateRecordsMenuItemText][Generates and returns the text for the "Migrate Records" menu item];
docremark [Returns the text for the "Migrate Records" menu item];

docident [onMigrateRecordsSelected][Handler that is called when the "Migrate Records" menu item is selected];
docremark [Configures and shows the "Migrate Records" dialog.];

docident [onMapRevisionsWithRecordsUpdated][Event handler that is called when the map revisions with records for a map were updated];
docargument [M][The map name];
docargument [O][The old list of map revisions];
docargument [N][The new list of map revisions];

docident [buildShowRecordsMenu][Builds the "Show records" menu];

docident [showMenu][Shows a given menu];
docargument [M][The name of the menu to show];

docident [rebuildMenuOnNextShow][Adds a given menu to the list of menus that should be rebuilt the next time they are shown];
docargument [M][The name of the menu to rebuild the next time it is shown];

docident [softRefreshMenu][Reloads a menu and selects a specified line in the menu];
docremark [This can be used to properly update checkboxes that the user is not allowed to activate or to];
docremark [reset text input field values when invalid input text is inserted.];
docargument [M][The name of the menu to soft refresh];
docargument [L][The line number to select after the refresh];

docident [hardRefreshMenu][Hard refreshes a menu by rebuilding it];
docargument [M][The name of the menu to hard refresh];
docargument [M][The line number to select after the refresh (optional)];

docident [deleteAllBuiltMenus][Deletes all currently built menus];

docident [buildMenu][Builds a given menu];
docargument [M][The name of the menu to build];

docident [rebuildMenuIfRequired][Rebuilds a given menu if it is contained in the list of menus that should be rebuild the next time they are shown];
docargument [M][The name of the menu to rebuild if required];
docargument [D][1 to do a hard refresh, 0 to only rebuild the menu];

docident [rebuildMenu][Rebuilds a given menu];
docargument [M][The name of the menu to rebuild];

docident [getMenuTitle][Returns the title of a given menu];
docremark [Returns the title of the given menu];
docargument [M][The name of the menu whose title to return];

docident [showDialog][Shows a specific dialog];
docremark [Also deletes the old version of the dialog if required.];
docargument [D][The name of the dialog to show];

docident [closeDialog][Closes a specific dialog];
docargument [D][The name of the dialog to close];

docident [deleteBuiltDialogs][Deletes all dialogs that are currently built and that were not deleted yet];

docident [getDialogTitle][Returns the title for a given dialog];
docremark [Returns the title of the dialog];
docargument [D][The name of the dialog whose title to return];

docident [formatMenusForFont][Formats the menus for a given font if the given font type differs from the $lastMenuFormatFontType];
docremark [This is done by calling the $menuFontFormatters.];
docargument [F][The font type to format the menus for];

docident [invalidateMenuFormatCache][Invalidates the menu format cache];

docident [addMenuFontFormatter][Adds a menu font formatting function];
docargument [M][The name of the menu font formatting function to add];

docident [getMenuFontType][Returns the font type that should be used for formatting menus];
docremark [Returns the menu font type];

docident [getAvailableMenuFontTypes][Returns the value names for the possible values of the menu font type option];
docremark [Returns the value names for the possible values of the menu font type option];

docident [onBeforeMapsMenuShow][Event handler that is called before the "Maps" menu is shown];

docident [buildMapsMenu][Builds the "Maps" menu];

docident [getCurrentLanguage][Returns the current language that ac-gema-mode should use];
docremark [Returns the language identifier (One of the values of the $availableLanguages list)];

docident [setOptionLanguage][Sets the current gema mode language and reloads all strings];
docremark [Returns 1 if the language option was changed, 0 otherwise];
docargument [N][The new gema mode language (One of the values of the $availableLanguages list)];

docident [initializeLanguage][Loads all strings for the current language];

docident [getAvailableLanguages][Returns the language identifiers of all available languages];
docremark [Returns the language identifiers of all available languages];

docident [languageIdentifierToFullLanguageName][Returns the full name for a given language identifier];
docremark [Returns the full name for the given language identifier];
docargument [L][The language identifier];

docident [loadStrings][Loads all strings for a given language];
docargument [L][The language to load (One of the values of the $availableLanguages list)];
docargument [D][1 to delete existing strings, 0 otherwise];

docident [option][Creates a new option];
docremark [Options will only be initialized if they do not exist yet.];
docargument [O][The name of the option];
docargument [D][The default option value];

docident [cache][Creates a new cache variable];
docremark [Cache variables are temporary variables that are initialized in the global context (not inside functions).];
docargument [C][The name of the cache variable];
docargument [I][The initial value of the cache variable];

docident [createMapRecordArray][Creates and returns a map record array];
docremark [Returns the created map record array];
docargument [M][The map name];
docargument [M][The map revision];
docargument [S][The score time in milliseconds];
docargument [W][The weapon id];
docargument [T][The team id];
docargument [T][The timestamp of the record (The result of "timestamp" or a "_" concatenated timestamp string)];

docident [getMapRecordMapName][Returns a map record's map name];
docremark [Returns the map record's map name];
docargument [M][The map record array];

docident [getMapRecordMapRevision][Returns a map record's map revision];
docremark [Returns the map record's map revision];
docargument [M][The map record array];

docident [setMapRecordMapRevision][Sets a map record's map revision];
docremark [Returns the modified map record array];
docargument [M][The map record array];
docargument [M][The map revision];

docident [getMapRecordScoreTime][Returns a map record's score time];
docremark [Returns the map record's score time];
docargument [M][The map record array];

docident [getMapRecordWeaponId][Returns a map record's weapon id];
docremark [Returns the map record's weapon id];
docargument [M][The map record array];

docident [getMapRecordWeaponName][Returns a map record's weapon name];
docremark [Returns the weapon name];
docargument [M][The map record array];

docident [getMapRecordTeamId][Returns a map record's team id];
docremark [Returns the team id];
docargument [M][The map record array];

docident [getMapRecordTeamName][Returns a map record's team name];
docremark [Returns the team name];
docargument [M][The map record array];

docident [getMapRecordTimestampString][Returns a map record's timestamp as a "_" concatenated string];
docremark [Returns the timestamp string];
docargument [M][The map record array];

docident [getMapRecordTimestampArray][Returns a map record's timestamp as an array in the same format as "timestamp"'s return value];
docremark [Returns the timestamp array];
docargument [M][The map record array];

docident [isMapRecordForMapAndRevision][Returns whether a map record is for a given map name in a specific map revision];
docremark [Returns 1 if the map record is for the given map name and revision, 0 otherwise];
docargument [M][The map record array];
docargument [M][The map name];
docargument [M][The map revision];

docident [createMapRevisionListArray][Creates and returns a new empty map revision list array];
docremark [Returns the map revision list array];

docident [getMapRevisionListCurrentMapRevision][Returns the current map revision from a given map revision list array];
docremark [Returns the current map revision];
docargument [M][The map revision list array];

docident [setMapRevisionListCurrentMapRevision][Sets the current map revision of a given map revision list array];
docremark [Returns the modified map revision list array];
docargument [M][The map revision list array];
docargument [M][The map revision];

docident [getMapRevisionListMapRevisionsWithRecords][Returns the map revisions with map records from a given map revision list array];
docremark [Returns the map revisions];
docargument [M][The map revision list array];

docident [setMapRevisionListMapRevisionsWithRecords][Sets the map revisions with map records of a given map revision list array];
docremark [Returns the modified map revision list array];
docargument [M][The map revision list array];
docargument [M][The map revisions];

docident [getBestMapRecord][Returns the best map record for a map];
docremark [Returns the best map record for the specified map];
docremark [Uses the cache if the target map is the current map.];
docargument [M][The map name];
docargument [M][The map revision];

docident [writeMapRecordToSavedCfg][Writes a map record to the saved];
docremark [cfg file.];
docargument [M][The map record to write];
docargument [D][1 to call writecfg, 0 otherwise];

docident [readMapRecordFromSavedCfg][Loads and returns a map record for a specified map with a specific weapon from the saved];
docremark [Returns the map record or an empty string if no record was found];
docremark [cfg file.];
docargument [M][The map name];
docargument [W][The weapon id];
docargument [M][The map revision];

docident [deleteMapRecordFromSavedCfg][Deletes a map record from saved];
docremark [cfg.];
docargument [M][The map name of the record to delete];
docargument [W][The weapon id of the record to delete];
docargument [M][The map revision];

docident [deleteAllMapRecordsOfMapInRevisionFromSavedCfg][Deletes all map records for a specified map in a specified revision];
docargument [M][The map name];
docargument [M][The map revision];
docargument [W][1 to call writecfg, 0 otherwise (optional, Default: 1)];

docident [deleteAllMapRecordsOfMapFromSavedCfg][Deletes all map records for a specified map];
docremark [Returns 1 if the map records were deleted, 0 otherwise];
docargument [M][The map name];

docident [getMapRecordListAlias][Returns the map record list alias name for a specific map];
docremark [Returns the map record list alias];
docremark [This is the name of the variable in which the records for the map are saved.];
docargument [M][The map name];
docargument [M][The map revision];
docexample [getMapRecordListAlias gibbed-gema11 27][Returns ::gema_records_gibbed-gema11_27];

docident [loadWeaponMapRecord][Loads and returns a map record for a specified map with a specific weapon];
docremark [Returns the map record or an empty string if no record was found];
docargument [M][The map name];
docargument [W][The weapon id];
docargument [M][The map revision];

docident [loadBestMapRecord][Returns the best map record for a specified map];
docremark [Returns the best map record];
docremark [Will return an empty string if there is no map record for the target map.];
docargument [M][The map name];
docargument [M][The map revision];

docident [getCurrentMapRevision][Fetches and returns the stored current map revision for a given map];
docremark [Returns the map revision or an empty string if there is no stored current map revision for that map];
docargument [M][The map name];

docident [getMapRevisionsWithRecords][Fetches and returns the stored map revisions with map records for a given map];
docremark [Returns the map revisions or an empty string if there are no stored map revisions with map records for that map];
docargument [M][The map name];

docident [getAllStoredMapRevisions][Fetches and returns all stored map revisions for a given map];
docremark [Returns the map revisions];
docremark [This will load the map revisions with map records and add the current map revision to that list if it];
docremark [isn't already contained in it.];
docargument [M][The map name];

docident [addMapRevisionWithRecordsIfIsNew][Adds and saves a map revision to the list of map revisions with map records if it is not contained in it yet];
docargument [M][The map name];
docargument [M][The map revision];

docident [removeMapRevisionIfExists][Removes a stored map revision for a given map if it exists in the list of map revisions with records];
docargument [M][The map name];
docargument [M][The map revision];

docident [loadMapRevisionList][Loads and returns a map revision list from a given map name];
docremark [Returns the map revision list];
docargument [M][The map name];

docident [updateCurrentMapRevision][Updates the current map revision for a given map with a given map revision if required];
docargument [M][The map name];
docargument [M][The map revision];

docident [updateMapRevisionsWithRecords][Updates the list of map revisions with records for a given map if required];
docargument [M][The map name];
docargument [U][The updated map revisions];

docident [getMapRevisionListAlias][Returns the map revision list alias name for a specific map];
docremark [Returns the map revision list alias];
docremark [This is the name of the variable in which the revisions with saved map records for the map are saved.];
docargument [M][The map name];
docexample [getMapRevisionListAlias gibbed-gema11][Returns ::gema_map_revisions_gibbed-gema11];

docident [onCurrentMapRevisionUpdated][Event handler that is called when the current map revision for a map was updated];
docargument [M][The map name];
docargument [N][The new current map revision];

docident [saveMapRecord][Saves a map record if it is better than the previous best record with the map record's score weapon];
docremark [The map record times are saved in a persistent variable per map.];
docargument [M][The map record];
docargument [D][1 to call writecfg if the map records gets saved, 0 otherwise (optional, Default: 1)];

docident [compareMapRecordToBestMapRecord][Compares a map record to the best map record of its map];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants) and the score time difference];
docargument [M][The map record to compare to the best map record];

docident [compareMapRecordToWeaponRecord][Compares a map record to the best weapon map record of its map];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants) and the score time difference];
docargument [M][The map record to compare to the best weapon map record];

docident [compareMapRecordToSavedMapRecord][Compares a map record to a saved map record];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants) and the score time difference];
docremark [The saved map record may be an empty string.];
docargument [M][The map record to compare to the saved weapon map record];
docargument [S][The saved weapon map record];

docident [calculateIsNewBestMapRecord][Returns whether a map record is a new best map record];
docremark [Returns 1 if the map record is a new best map record, 0 otherwise];
docargument [M][The map record in question];

docident [compareMapRecords][Compares a map record to another map record];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants) and the score time difference];
docargument [M][The first map record];
docargument [C][The second map record];

docident [getBestMapRecordMenuString][Returns the menu string for the best map record in the main menu];
docremark [Returns the best map record menu string];
docargument [M][The map name];
docargument [M][The map revision];

docident [getWeaponMapRecordStringTitle][Returns the title for the weapon map record string with the given weapon ID];
docremark [Returns the weapon map record string title for the given weapon ID];
docargument [W][The weapon ID of the weapon map records string whose title to return];

docident [getWeaponMapRecordMenuString][Returns the menu string for a record with a specific weapon in the "Weapon Records" menu];
docremark [Returns the weapon map record menu string];
docargument [M][The map name];
docargument [W][The weapon id];
docargument [N][The number of pad tabs];
docargument [M][The map revision];

docident [generateAdditionalMapRecordInfosMenuString][Generates and returns a string that contains additional map record infos that should be shown in the menus];
docremark [Returns the generated additional map record infos string];
docargument [M][The map record whose additional infos menu string to generate];
docargument [A][1 to allow adding the score weapon name to the string if required, 0 otherwise];

docident [getScoreTimeMenuString][Returns a string that represents a map record's score time for a menu];
docremark [Returns the map record score time string];
docremark [Will return a "No record" message when the map record is empty.];
docargument [M][The map record];
docargument [H][1 to highlight the score time as best score time];

docident [colorizePlayerName][Prepends a color to a player name and returns the result];
docremark [Returns the colorized player name];
docargument [P][The player name to colorize];
docargument [M][The team id of the map record to which the player name belongs];

docident [colorizeWeaponName][Prepends a color to a weapon name and returns the result];
docremark [Returns the colorized weapon name];
docargument [W][The weapon name to colorize];
docargument [M][The team id of the map record to which the weapon name belongs];
docargument [H][1 to highlight the weapon name as best score weapon];

docident [colorizeTeamName][Prepends a color to a team name and returns the result];
docremark [Returns the colorized team name];
docargument [T][The team name to colorize];
docargument [M][The team id of the map record to which the team name belongs];

docident [colorizeTimestampDate][Prepends a color to a timestamp date string and returns the result];
docremark [Returns the colorized timestamp date string];
docargument [T][The timestamp date string to colorize];
docargument [M][The team id of the map record to which the timestamp belongs];

docident [colorizeTimestampTime][Prepends a color to a timestamp time string and returns the result];
docremark [Returns the colorized timestamp time string];
docargument [T][The timestamp time string to colorize];
docargument [M][The team id of the map record to which the timestamp belongs];

docident [getScoreTimeColors][Returns the colors to use for formatting a score time];
docremark [Returns the score time colors];
docargument [M][The team id of the map record to which the score time belongs];
docargument [H][1 to highlight the score time as best score time (optional)];

docident [getPlayerNameColor][Returns the color to prepend to a player name];
docremark [Returns the player name color];
docargument [M][The team id of the map record to which the player name belongs];

docident [getWeaponNameColor][Returns the color to prepend to a weapon name];
docremark [Returns the weapon name color];
docargument [M][The team id of the map record to which the weapon name belongs];

docident [getTimestampDateColor][Returns the color to prepend to a timestamp date string];
docremark [Returns the timestamp date string color];
docargument [T][The team id];

docident [getTimestampTimeColor][Returns the color to prepend to a timestamp time string];
docremark [Returns the timestamp time string color];
docargument [T][The team id];

docident [getTeamColor][Returns the color to use for a specified team];
docremark [Returns the team color];
docargument [T][The team id];

docident [getMapRecordScoreString][Generates and returns the map record output string for when the player scores];
docremark [Returns the map record output string for when the player scores];
docargument [M][The map record];

docident [getMapRecordStatusString][Returns the record status string (new record, tied record, no new record)];
docremark [Returns the record status string];
docremark [Must be called before the new record was saved.];
docremark [If no previous best map record is set the status string will always be the one for the comparison to];
docremark [the best map record.];
docremark [In any other case it will be the comparison to the best map record if $optionScoreTimeCompareValue is 0 or];
docremark [the comparison to the best weapon map record if $optionScoreTimeCompareValue is 1.];
docargument [M][The map record];
docargument [C][The comparison map record];
docargument [I][1 if the comparison map record is the best map record for its map, 0 otherwise];

docident [generateMapRecordTimeDifferenceString][Generates and returns a map record time difference string];
docremark [Returns the generated time difference string];
docargument [C][The comparison status to the comparison map record];
docargument [T][The difference to the comparison map record];

docident [getNewBestMapRecordString][Returns the "New best time" message for the case that the comparison record is empty];
docremark [Returns the "New best time" message];
docargument [N][The new map record];
docargument [I][1 if the map record was compared to the best map record];

docident [getFasterThanComparisonMapRecordString][Returns the "Faster than map record" message];
docremark [Returns the "Faster than map record" message];
docargument [N][The new map record];
docargument [I][1 if the map record was compared to the best map record];
docargument [T][The time difference of the map record to the best map record];

docident [getComparisonMapRecordTiedString][Returns the "Tied map record" message];
docremark [Returns the "Tied map record" message];
docargument [N][The new map record];
docargument [I][1 if the map record was compared to the best map record];

docident [getSlowerThanComparisonMapRecordString][Returns the "Slower than map record" message];
docremark [Returns the "Slower than map record" message];
docargument [N][The new map record];
docargument [I][1 if the map record was compared to the best map record];
docargument [T][The time difference of the map record to the best map record];

docident [printMapStatistics][Shows the best record of a map];
docremark [Also shows a list of weapons with which the map was not finished yet if $optionShowMissingWeapons is 1.];
docargument [M][The map name];
docargument [M][The map revision];

docident [getMissingMapRecordWeaponNamesString][Returns a comma separated string of weapons with which the player didn't score on a map];
docremark [Returns the missing weapon names string];
docremark [Returns an empty string when the map was finished with all weapons.];
docargument [M][The map name];
docargument [M][The map revision];

docident [migrateMapRecordsFromRevisionTo][Migrates all map records for a given map revision to another map revision];
docremark [Also writes the changes to saved.cfg.];
docargument [M][The map name];
docargument [O][The old map revision];
docargument [N][The new map revision];

docident [migrateMapRecordsFromRevisionsTo][Migrates all map records for a list of given map revisions to another map revision];
docremark [Also writes the changes to saved.cfg.];
docargument [M][The map name];
docargument [O][The old map revisions];
docargument [N][The new map revision];

docident [doMigrateMapRecordsFromRevisionTo][Migrates all map records for a given map revision to another map revision];
docremark [Map records that are faster than the existing records for the new map revision will be copied to the new map];
docremark [revision, all other map records will be ignored.];
docargument [M][The map name];
docargument [O][The old map revision];
docargument [N][The new map revision];

docident [migrateMapRecordsFromClosestLowerRevision][Migrates all map records from the closest lower map revision to a given map revision];
docargument [M][The map name];
docargument [N][The new current map revision];
