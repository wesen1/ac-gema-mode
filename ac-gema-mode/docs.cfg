docsection [ac-gema-mode];

docident [weaponNames][The list of weapon name aliases];
docremark [The name position inside the array matches the weapon id];

docident [maximumAllowedIntegerValue][The maximum allowed integer value];

docident [optionEnableWeaponRecordsMenu][Option to enable the "Weapon Records" menu (Default: 1)];
docremark [If set to 0 selecting the best map record will result in a "Delete records" dialog that affects all map records at once];

docident [primaryWeaponIds][The list of primary weapon ids];

docident [secondaryWeaponIds][The list of secondary weapon ids];

docident [allWeaponIds][The list of all weapon ids];
docremark [This list in the priority order for the "Weapon Records" menu, the "Missing weapons" string and the];
docremark [best map record weapon id fetching process];

docident [currentScoreAttempt][The current score attempt];

docident [optionShowSecondaryWeaponModeAbortedMessages][Option to show messages that the knife or pistol only mode were aborted because the player used a different weapon (Default: 0)];

docident [gemaMapNameImplicits][A list of implicit words that will cause a map name to be identified as a gema map name];
docremark [The default implicits words are "jigsaw" and "deadmeat-10"];

docident [gemaMapNameCodes][The list of letters of which one per code position must occur in sequence to cause a map name to be identified as a gema map name];
docremark [The default code letters are "g", "3e", "m" and "a@4"];
docremark [For example gema, g3ma or g3m@ would be identified as gema code.];

docident [lastCheckedMapName][The last checked map name of the isGemaMapName function];

docident [isLastCheckedMapNameGemaMapName][The result of the isGemaMapName call for the last checked map name];
docremark [This is done to avoid checking one map name multiple times];

docident [optionAutoActivateGemaMode][Option to automatically activate the gema mode on gema maps (Default: 1)];

docident [colorError][The color for gema mode error messages (Default: 3)];

docident [colorWarning][The color for gema mode warning messages (Default: D)];

docident [colorSuccess][The color for gema mode success messages (Default: J)];

docident [colorGemaModeDisabled][The color for gema mode disabled info messages (Default: 3)];

docident [colorScoreAttemptAborted][The color for score attempt aborted messages (Default: 3)];

docident [colorTimeDifference][The color for time differences (Default: Q)];

docident [colorRecordInfo][The general color for gema record info messages (Default: J)];

docident [colorPlayerName][The color for gema record player names (Default: F)];

docident [colorRecordTime][The color for gema record times (Default: P)];

docident [colorNoRecord][The color for "No record" messages (for maps without map records) (Default: Y)];

docident [colorNewRecord][The color for "New Record" messages (Default: I)];

docident [colorRecordTied][The color for "Record tied" messages (Default: Q)];

docident [colorRecordSlower][The color for "Record slower" messages (Default: 4)];

docident [colorMissingWeapons][The color for the "Missing weapons" message (Default: 3)];

docident [colorTimeTargetInfo][The color for time target info messages (Default: E)];

docident [colorTimeTargetBeaten][The color for "Time target beaten" messages (Default: I)];

docident [colorTimeTargetTied][The color for "Time target tied" messages (Default: Q)];

docident [colorTimeTargetNotBeaten][The color for "Slower than time target" messages (Default: 4)];

docident [colorCountDownDefault][The color for remaining countdown seconds above 9 seconds (Default: J)];

docident [colorCountDownLessThanTenSecondsRemaining][The color for remaining countdown seconds above 3 seconds and below 10 seconds (Default: 9)];

docident [colorCountDownLessThanFourSecondsRemaining][The color for remaining countdown seconds below 4 seconds (Default: 3)];

docident [colorCountDownFinished][The color for the countdown finished message (Default: 3)];

docident [colorWeapon][The color for weapon names (Default: N)];

docident [colorMenuDefault][The default color of menus (Default: 5)];

docident [colorGemaModeMenuTitle][The color for the "Gema Mode" menu title (Default: L)];

docident [colorEnableGemaMode][The color for the "Enable gema mode" menu item (Default: 1)];

docident [colorRecordInfoTitle][The color for the record related titles in the main menu of the gema mode (Default: T)];

docident [colorMapName][The color for gema map names (Default: H)];

docident [colorClose][The color for the "Close" menu items (Default: V)];

docident [colorMapRecordsTitle][The color for the "Map records" menu title (Default: 1)];

docident [colorDeleteRecordTitle][The color for the "Delete record" menu item and title (Default: 3)];

docident [colorDeleteRecordText][The color for the text in the "Delete record" menu (Default: 3)];

docident [colorDeleteRecordOptionYes][The color for the yes option in the "Delete record" menu (Default: 5)];

docident [colorDeleteRecordOptionNo][The color for the no option in the "Delete record" menu (Default: 5)];

docident [colorTimeTargetTitle][Time target The color for the time target menu title (Default: E)];

docident [colorTimeTargetTime][The color for the time target time (Default: D)];

docident [colorTimeTargetEnable][The color for the "Enable time target mode" text (Default: E)];

docident [colorCountDownEnable][The color for the "Show countdown" text (Default: 2)];

docident [colorOptionsTitle][Options The color for the "Options" menu item and the menu title (Default: 2)];

docident [colorGeneralOption][The color for general gema options (Default: 1)];

docident [colorTimeTargetOption][The color for the time target options (Default: E)];

docident [countDownIsActive][Stores whether a countdown is currently running];

docident [countDownSeconds][The initial number of seconds of the current countdown];

docident [lastCountDownChangeTimeStamp][The timestamp of the last countdown change];

docident [timeTarget][The current time target];

docident [optionResetTimeTargetOnQuit][Option to auto reset the time target to 0 on quit (Default: 1)];

docident [optionShowDifferenceToTimeTarget][Option to show the difference in minutes to the time target time on score (Default: 1)];

docident [optionAutoSetTimeTargetMode][Option to auto set the time target (Default: 0)];
docremark [0: Disabled];
docremark [1: Best Map Record];
docremark [2: Best Primary Weapon Record];
docremark [3: Score Attempt Weapon];

docident [messageGameModeNotCtf][The "Game mode is not CTF" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageMapNotGemaMap][The "Map is not a gema map" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageWatchingDemo][The "Watching a demo" reason for "getEnvironmentNotGemaCompatibleReason"];

docident [messageGemaModeCanNotBeEnabled][Template for the "Gema mode cannot be enabled" error message];

docident [messageGemaModeCanNotBeDisabled][Template for the "Gema mode cannot be disabled" error message];

docident [messageGemaModeAutoEnabled][The "Gema mode auto enabled" info message];

docident [messageGemaModeAutoDisabled][Template for the "Gema mode disabled" info message];

docident [messageRecordDeleted][The "Record deleted" info message];

docident [messageNoMapRecord][The "No record" info message];

docident [messageMapRecordTime][Template for record score times];

docident [messageScoreNamePlayerName][Template for player names];

docident [messageScoreNameYou][The "You" player name for score messages];

docident [messageMapRecordScore][Template for score messages];

docident [messageMapRecordScoreWeapon][Template for the score weapon info for score messages];

docident [messageFasterThanBestMapRecord][The "New best time" info message without difference to the compare time];

docident [messageTiedBestMapRecord][The "Tied your current record" info message without difference to the compare time];

docident [messageSlowerThanBestMapRecord][The "But you have a better record" info message without difference to the compare time];

docident [messageFasterThanWeaponMapRecord][Template for "New best time with weapon" info messages without difference to the compare time];

docident [messageTiedWeaponMapRecord][Template for "Tied you current record with weapon" info messages without difference to the compare time];

docident [messageSlowerThanWeaponMapRecord][Template for "But you have a better record with weapon" info messages without difference to the compare time];

docident [messageFasterThanBestMapRecordWithDifference][Template for "New best time" info messages with difference to the compare time];

docident [messageSlowerThanBestMapRecordWithDifference][Template for "But you have a better record" info messages with difference to the compare time];

docident [messageFasterThanWeaponMapRecordWithDifference][Template for "New best time with weapon" info messages with difference to the compare time];

docident [messageSlowerThanWeaponMapRecordWithDifference][Template for "But you have a better record with weapon" info messages with difference to the compare time];

docident [messageBestMapRecordConsole][Template for the best map record map statistics message];

docident [messageBestMapRecordWeaponConsole][Template for the score weapon info for the map statistics map record messages];

docident [messageMissingWeapons][Template for the "Missing weapons" map statistics message];

docident [messageNoMapRecords][Template for the "No records on this map" map statistics message];

docident [weaponMapRecordMenuText][Template for map records in the "Weapon Records" menu];

docident [messageBestMapRecordWeaponMenu][Template for the score weapon info for the best map record in the main menu];

docident [messageAttemptAbortedEditMode][The "Score attempt aborted because of edit mode" info message];

docident [messageSecondaryWeaponModeAborted][Template for "Knife/Pistol only mode aborted" info messages];

docident [messageInvalidTimeIntervalPart][Template for "Time interval part must be greater/smaller than x" error messages];

docident [messageTimeIntervalMinutesTooLow][The "Time interval minutes part must be greater than -1" error message];

docident [messageTimeIntervalMinutesTooHigh][The "Time interval minutes part must be smaller than 35792" error message];

docident [messageTimeIntervalSecondsTooLow][The "Time interval seconds part must be greater than -1" error message];

docident [messageTimeIntervalSecondsTooHigh][The "Time interval seconds part must be smaller than 60" error message];

docident [messageTimeIntervalMillisecondsTooLow][The "Time interval milliseconds part must be greater than -1" error message];

docident [messageTimeIntervalMillisecondsTooHigh][The "Time interval milliseconds part must be smaller than 1000" error message];

docident [messageTimeIntervalDifferenceTooLow][The "Time interval difference is too low" error message];

docident [messageTimeIntervalDifferenceTooHigh][The "Time interval difference is too high" error message];

docident [messageTimeTargetCanNotBeSet][Template for "Time target can not be changed" error messages];

docident [messageTimeTargetMustBeAtLeastZeroMilliseconds][The "Time target must be at least 0 milliseconds" message for "setTimeTargetTotalMilliseconds"];

docident [messageGemaModeNotActive][The "Gema mode not active" reason for "getTimeTargetModeCanNotBeActivatedReason"];

docident [messageInvalidTimeTarget][The "Time target must be at least 0 milliseconds" reason for "getTimeTargetModeCanNotBeActivatedReason"];

docident [messageTimeTargetModeCanNotBeEnabled][Template for "Time target mode can not be enabled" error messages];

docident [messageTimeTargetModeCanNotBeDisabled][Template for "Time target mode can not be disabled" error messages];

docident [messageTimeTargetBeaten][The "Faster than time target" info message without difference to the time target];

docident [messageTimeTargetTied][The "Tied time target" info message without difference to the time target];

docident [messageSlowerThanTimeTarget][The "Slower than time target" info message without difference to the time target];

docident [messageTimeTargetFinished][The "Time target finished" info message];

docident [messageTimeTargetBeatenWithDifference][Template for "Faster than time target" info messages with difference to the time target];

docident [messageSlowerThanTimeTargetWithDifference][Template for "Slower than time target" info messages with difference to the time target];

docident [messageAutoSetTimeTargetToScoreWeaponRecord][Template for "Auto setting time target to record with weapon" messages];

docident [messageTimeTargetModeNotActive][The "Time target mode not activated" reason for "getCountDownModeCanNotBeActivatedReason"];

docident [messageCountDownModeCanNotBeEnabled][Template for "Countdown mode can not be enabled" error messages];

docident [messageCountDownModeCanNotBeDisabled][Template for "Countdown mode can not be disabled" error messages];

docident [messageCountDownFinishMessage][Template for the "countdown finished" message];

docident [weaponNameUnknown][Template for unknown weapon ids];

docident [weaponNameKnife][The weapon name for the weapon "Knife"];

docident [weaponNamePistol][The weapon name for the weapon "Pistol"];

docident [weaponNameCarbine][The weapon name for the weapon "Carbine"];

docident [weaponNameShotgun][The weapon name for the weapon "Shotgun"];

docident [weaponNameSubmachineGun][The weapon name for the weapon "Submachine Gun"];

docident [weaponNameSniperRifle][The weapon name for the weapon "Sniper Rifle"];

docident [weaponNameAssaultRifle][The weapon name for the weapon "Assault Rifle"];

docident [menuGemaModeTitle][The title of the "Gema Mode" menu];

docident [gemaModeSubMenuTitleTemplate][Template for "Gema Mode" sub menus];

docident [menuDeleteRecordTitle][The title of the "Delete Record(s)" menu];

docident [menuMapsTitle][The title of the "Maps" menu];

docident [menuTimeTargetTitle][The title of the "Time Target" menu];

docident [menuOptionsTitle][The title of the "Options" menu];

docident [menuShowRecordsTitle][The title of the "Map Records" menu];

docident [menuItemGoBackText][The text for the "Back" menu item];

docident [menuItemEnableGemaModeText][The text for the "Enable gema mode" menu item];

docident [menuItemCurrentMap][Template for the "Current Map" menu item];

docident [menuItemBestMapRecord][Template for the "Best Time" menu item];

docident [menuItemCurrentTimeTarget][Template for the "Time Target" menu item];

docident [menuItemOptions][The text for the "Options" menu item];

docident [menuItemCloseMenu][The text for the "Close" menu item];

docident [menuItemDeleteRecordsConfirmQuestionTemplate][Template for the "Delete Record(s)" confirm question];

docident [menuItemDeleteAllRecordsConfirmQuestion][The "Delete all records" confirm question];

docident [menuItemDeleteWeaponRecordConfirmQuestion][The "Delete weapon record" confirm question];

docident [menuItemDeleteRecordConfirmTemplate][Template for the "Delete Record(s)" yes answer];

docident [menuItemDeleteWeaponRecordConfirm][The "Delete weapon record" yes answer];

docident [menuItemDeleteAllRecordsConfirm][The "Delete all records" yes answer];

docident [menuItemDeleteRecordCancelTemplate][Template for the "Delete Record(s)" no answer];

docident [menuItemDeleteWeaponRecordCancel][The "Delete weapon record" no answer];

docident [menuItemDeleteAllRecordsCancel][The "Delete all records" no answer];

docident [menuItemGeneralOptionsTitle][The text for the "General Options" menu item];

docident [menuItemAutoActivateGemaModeOption][The text for the "Auto activated gema mode" option menu item];

docident [menuItemShowNotificationsOption][The text for the "Show notifications" option menu item];

docident [menuItemScoreTimeCompareValueOption][The text for the "Compare score times to" option menu item];

docident [menuItemScoreTimeCompareValueOptionValues][The possible values for the "Compare score times to" option];

docident [menuItemShowNameOnScoreOption][The text for the "Show player name on score" option menu item];

docident [menuItemShowScoreWeaponOption][The text for the "Show weapon name on score" option menu item];

docident [menuItemShowDifferenceToScoreCompareTimeOption][The text for the "Show difference to score compare time on score" option menu item];

docident [menuItemTimeTargetOptionsTitle][The text for the "Time Target options" menu item];

docident [menuItemAutoSetTimeTargetModeOption][The text for the "Auto set time target mode" option menu item];

docident [menuItemAutoSetTimeTargetModeValues][The possible values for the "Auto set time target mode" option];

docident [menuItemShowDifferenceToTimeTargetOption][The text for the "Show difference to time target on score" option menu item];

docident [menuItemResetTimeTargetOnQuitOption][The text for the "Auto reset time target on quit" option menu item];

docident [menuItemWeaponOptionsTitle][The text for the "Weapon options" menu item];

docident [menuItemEnableWeaponRecordsMenuOption][The text for the "Enable weapon records menu" option menu item];

docident [menuItemShowSecondaryWeaponModeAbortedMessagesOption][The text for the "Show Knife/Pistol mode aborted messages" option menu item];

docident [menuItemShowMissingWeaponsOption][The text for the "Show missing weapons" option menu item];

docident [menuItemEnableTimeTargetMode][The text for the "Enable time target mode" menu item];

docident [menuItemShowCountDown][The text for the "Show countdown" menu item];

docident [menuItemTimeTargetMinutes][The text for the "Time target Minutes" menu item];

docident [menuItemTimeTargetSeconds][The text for the "Time target Seconds" menu item];

docident [menuItemTimeTargetMilliseconds][The text for the "Time target Milliseconds" menu item];
docremark [The extra space at the end is intended to add a margin between the word and the text input field];

docident [weaponId][];

docident [modelDirectoryName][];

docident [deleteRecordWeaponId][The deletion target weapon id for the delete record dialog (Default: -1)];
docremark [-1 targets all map records for a map];

docident [optionShowNotifications][Option to enable ac-gema-mode notifications (Default: 1)];

docident [cachedBestMapRecord][Stores the best map record of the current map];

docident [MAP_RECORD_COMPARISON_STATUS_FASTER][Comparison status for the case that the first map record score time is lower than the comparison map record score time];

docident [MAP_RECORD_COMPARISON_STATUS_TIED][Comparison status for the case that both map record score times are the same];

docident [MAP_RECORD_COMPARISON_STATUS_SLOWER][Comparison status for the case that the first map record score time is higher than the comparison map record score time];

docident [MAP_RECORD_COMPARISON_STATUS_EMPTY][Comparison status for the case that the comparison map record is empty];

docident [optionShowMissingWeapons][Option to show the list of missing weapons on map start (Default: 1)];

docident [optionShowNameOnScore][Option to show the player name in the console score string (Default: 0)];

docident [optionShowScoreWeapon][Option to show the score weapon in the console score string (Default: 1)];

docident [optionScoreTimeCompareValue][Option to set the comparison value for score times (Default: 1)];
docremark [0: Best map record];
docremark [1: Best score weapon record];

docident [optionShowDifferenceToScoreCompareTime][Option to show the difference in minutes to the score attempt compare time (Default: 1)];

docident [lastTimeIntervalChangeErrorMessage][The last error message for an error that occurred during a time interval change];

docident [getWeaponName][Returns the weapon name for a weapon id];
docremark [Returns the weapon name];
docargument [weaponId][The weapon id];

docident [initializeState][Initializes a state with a specified value];
docargument [stateName][The name of the state to initialize];
docargument [initialStateValue][The value to initialize the state with (Must be 1 or 0, Default: 0)];

docident [getState][Returns the current value of a state];
docremark [Returns the state's current value (1 or 0)];
docargument [stateName][The name of the state whose value to return];

docident [setState][Sets the value of a state];
docremark [Returns the reason if the state was not changed to the new state or an empty string otherwise];
docremark [The state is only changed if the new state differs from the current state.];
docremark [Also fires the "on%STATE_NAME%StateEnabled" and "on%STATE_NAME%StateDisabled" events when the];
docremark [state changes accordingly.];
docargument [stateName][The name of the state whose value to set];
docargument [newStateValue][The value to set the state to (1 or 0)];

docident [tryToSetState][Tries to set a state];
docremark [Returns 1 if the state was successfully set, 0 otherwise];
docremark [If the state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the state will be shown.];
docargument [stateName][The name of the state whose value to set];
docargument [newStateValue][The value to set the state to (1 or 0)];
docargument [successNotification][The notification to show on success (optional)];

docident [generateStateAliasName][Generates an alias name from a template string that contains a replacable "%STATE_NAME%" substring];
docremark [Returns the generated alias name];
docargument [stateName][The name of the state];
docargument [aliasNameTemplateString][The template string for the alias name];

docident [generateStateValueAlias][Generates and returns the alias in which a state's value is stored];
docremark [Returns the name of the alias in which the state's value is stored];
docargument [stateName][The name of the state];

docident [newStateValueMatchesCurrentStateValue][Returns whether a new state value matches the current state value of a specified state];
docremark [Returns 1 if the value matches the current value of the state, 0 otherwise];
docargument [stateName][The name of the state];
docargument [newStateValue][The new state value (1 or 0)];

docident [getStateCanNotBeChangedReason][Returns the reason why a state can not be changed];
docremark [Returns the reason why the state can not be changed or an empty string if it can be changed];
docargument [stateName][The name of the state];
docargument [newStateValue][The new state value (1 or 0)];

docident [substr_replace][Replaces a part of a string with a sub string and returns the result];
docremark [Returns the modified string];
docargument [targetString][The target string];
docargument [replacement][The replacement string];
docargument [startPosition][The start position];
docargument [endPosition][The end position (optional)];
docexample [substr_replace hello world 2][Returns "heworld"];
docexample [substr_replace hello universe 0 1][Returns "universello"];

docident [strrepeat][Returns a string repeated x times];
docremark [Returns the repeated string];
docargument [(repeatString)][$arg1 The string that will be repeated];
docargument [(numberOfRepetitions)][$arg2 The number of repetitions];
docexample [strrepeat x 5][Returns "xxxxx"];

docident [substr_count][Counts and returns the number of occurrences of a substring inside a string];
docremark [Returns the number of occurrences];
docargument [(haystack)][$arg1 The haystack];
docargument [(needle)][$arg2 The needle];
docexample [substr_count "hello world" l][Returns 3];

docident [strstr_array][Checks if a string contains at least one needle of a list of needles];
docremark [Returns 1 if the string contains at least one of the needles, 0 otherwise];
docargument [(haystack)][$arg1 The string that will be searched (haystack)];
docargument [(needles)][$arg2 The strings to search for (needles)];
docexample [strstr_array "hello" "k l m"][Returns 1 because "hello" contains "l"];
docexample [strstr_array "gema" "v w x y z"][Returns 0 because "gema" does not contain "v", "w", "x", "y" or "z"];

docident [uppercase_first][Converts the first character of a string to uppercase and returns the modified string];
docremark [Returns the modified string];
docargument [targetString][The target string];

docident [refreshMenu][Reloads a menu and selects a specified line in the menu];
docremark [This can be used to properly update checkboxes that the user is not allowed to activate or to];
docremark [reset text input field values when invalid input text is inserted.];
docargument [menuName][The name of the menu to refresh];
docargument [lineNumber][The line number to select after the refresh];

docident [array_length][Returns the number of elements inside an array];
docremark [Returns the number of elements inside the array];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docexample [array_length "a b c" " "][Returns 3];
docexample [array_length "a  b c" "  "][Returns 2];

docident [array_slice][Returns a part of an array];
docremark [Returns the partial array or an empty string if the start or end index are invalid];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [startIndex][The start index];
docargument [endIndex][The end index (optional)];
docexample [array_slice "a b c" " " 1][Returns "b c"];
docexample [array_slice "a b c" " " 1 1][Returns "b"];

docident [array_pad][Fills an array with empty fields until it reaches a specific size];
docremark [Returns the filled array];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [targetSize][The target size of the array];
docexample [array_pad "a b" " " 4][Returns "a b <empty> <empty>"];

docident [array_get][Reads and returns one entry of an array];
docremark [Returns the content of the specified index];
docargument [array][The array];
docargument [dimensionIds][The dimension ids];
docexample [array_get "a b  c d" "1 0"][Returns "c"];
docexample [array_get "a b  c d" "1"][Returns "c d"];

docident [array_set][Sets the value of a specified array index];
docremark [Returns the modified array];
docremark [If the index exists the former value will be replaced by the new value.];
docremark [If the value is empty the index will be unset.];
docargument [array][The array];
docargument [dimensionIds][The dimension ids];
docargument [newValue][The value to set at the specified position];
docexample [array_set "a b  c d" "1 0" new][Returns "a b  new d"];
docexample [array_set "a b  c d  <empty>  5 6" "3"][Returns "a b  c d"];

docident [array_getRealIndex][Converts negative indexes to (array_length - <index>), checks if the index is valid and returns the resulting index];
docremark [Returns the real index or -1 if the index is not valid];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [index][The index];

docident [array_getIndexStartPosition][Returns the start position of an array index inside the total array string];
docremark [Returns the start position of the index inside the array];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [index][The index];
docexample [array_getIndexStartPosition "hello world" " " 1][Returns 6];

docident [array_getIndexEndPosition][Returns the end position of an array index inside the total array string];
docremark [Returns the end position of the index inside the array string];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [index][The index];
docexample [array_getIndexEndPosition "hello world" " " 0][Returns 4];

docident [array_getNumberOfDimensions][Returns the number of dimensions in an array];
docremark [Returns the number of dimensions in the array];
docremark [This is done by recursively calling this function and increasing the dimension by one per call.];
docargument [array][The array];
docargument [lastFoundDimension][The dimension that was found in an earlier cycle of this function];
docexample [array_getNumberOfDimensions "a"][Returns 1];
docexample [array_getNumberOfDimensions "a b  c d"][Returns 2];

docident [array_replace][Replaces an entry inside an array];
docremark [Returns the modified array];
docargument [array][The array];
docargument [arraySeparator][The array separator];
docargument [index][The index];
docargument [newValue][The value to set at the index];
docexample [array_replace "a b c" " " 1 new][Returns "a new c"];
docexample [array_replace "a b c" " " 5 new][Returns "a b c"];

docident [array_truncateSupernumerousDimensions][Truncates supernumerous dimensions from a list of dimensions if necessary and returns the result];
docremark [Returns the truncated dimension list or -1 if the dimension list is not valid];
docargument [array][The array];
docargument [dimensionIds][The dimension ids];

docident [array_trim][Removes trailing <empty> fields from the highest dimension of an array];
docremark [Returns the updated array];
docargument [array][The array];

docident [array_getHighestDefinedDimension][Returns the highest defined dimension from an array and a list of indexes];
docremark [Returns the highest defined dimension or -1 if the list of indexes is invalid];
docargument [array][The array];
docargument [dimensionIds][The dimension ids];

docident [getCurrentScoreAttempt][Returns the current active score attempt];
docremark [Returns the current active score attempt];
docremark [Will return an empty string if no score attempt is active at the moment.];

docident [getMillisecondsPassedSinceCurrentScoreAttemptStart][Returns the time in milliseconds that passed since the current score attempt started];
docremark [Returns the time in milliseconds that passed since the current score attempt started];

docident [startCurrentScoreAttempt][Starts the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptStarted" event.];

docident [changeCurrentScoreAttemptWeaponIfRequired][Changes the score weapon of the current score attempt if required];
docremark [Also fires the "onCurrentScoreAttemptScoreWeaponChanged" event if the score weapon was changed.];
docargument [usedWeaponId][The id of the weapon that the player used];

docident [finishCurrentScoreAttempt][Finishes the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptFinished" event.];

docident [abortCurrentScoreAttempt][Aborts the current score attempt];
docremark [Also fires the "onCurrentScoreAttemptAborted" event.];

docident [clearCurrentScoreAttempt][Clears the current score attempt];

docident [onCurrentScoreAttemptStarted][Event handler that is called after the current score attempt was started];

docident [onCurrentScoreAttemptScoreWeaponChanged][Event handler that is called after the score weapon of the current score attempt was changed];
docargument [newScoreWeaponId][The new score weapon id];

docident [onCurrentScoreAttemptFinished][Event handler that is called after the current score attempt was finished];
docargument [scoreAttemptMapRecord][The map record that was created from the score attempt];

docident [onCurrentScoreAttemptAborted][Event handler that is called after the current score attempt was aborted];

docident [startScoreAttempt][Starts a new score attempt and initializes the team change and edit mode change event listeners];

docident [isScoreAttemptActive][Returns whether a score attempt is active at the moment];

docident [editModeChangeListener][Checks whether the player changes to edit mode];
docremark [Aborts the current score attempt when a change to edit mode is detected];

docident [teamChangeListener][Detects whether the player's team changes];
docremark [Aborts the current score attempt when a team change is detected];
docargument [initialPlayerTeamId][The initial player team id];

docident [onGemaModeDisabled][Event handler that is called when the gema mode state changes from "enabled" to "disabled"];

docident [onMapStartGemaModeStateAutoChangeChecksFinished][Event handler that is called after the gema mode state auto change checks on map start are complete];
docargument [newGemaModeState][The new gema mode state];

docident [createScoreAttemptArray][Creates and returns a score attempt array];
docremark [Returns the created score attempt array];
docargument [weaponId][The score weapon id];

docident [getScoreAttemptStartTime][Returns the start time of a score attempt in milliseconds since game start];
docremark [Returns the start time of the score attempt array];
docargument [scoreAttemptArray][The score attempt array];

docident [getScoreAttemptWeaponId][Returns the weapon id of a score attempt];
docremark [Returns the weapon id of the score attempt array];
docargument [scoreAttemptArray][The score attempt array];

docident [setScoreAttemptWeaponId][Sets the weapon id of a score attempt];
docremark [Returns the modified score attempt array];
docargument [scoreAttemptArray][The score attempt array];
docargument [weaponId][The weapon id to set];

docident [getMillisecondsPassedSinceScoreAttemptStart][Returns the time in milliseconds that passed since a score attempt started];
docremark [Returns the time in milliseconds that passed since the score attempt started];
docargument [scoreAttemptArray][The score attempt array];

docident [getUpdatedScoreWeapon][Checks whether a used weapon aborts knife only or pistol only mode and returns the new score weapon id];
docremark [Returns the updated score weapon id];
docremark [Will return -1 if the score weapon doesn't need to be changed];
docargument [usedWeaponId][The id of the weapon that the player used];
docargument [currentScoreWeaponId][The id of the current score weapon];

docident [isGemaMapName][Returns whether a map name is a gema map name];
docremark [Returns 1 if the map name is a gema map name, 0 otherwise];
docargument [mapName][The map name];

docident [containsGemaMapNameImplicit][Returns whether a map name contains one of the implicit words];
docremark [Returns 1 if the map name contains one of the implicit words, 0 otherwise];
docargument [mapName][The map name];
docexample [containsGemaMapNameImplicit jigsaw-map-1][Will return 1 because "jigsaw-map-1" contains the implicit word "jigsaw"];
docexample [containsGemaMapNameImplicit ac_douze][Will return 0 because "ac_douze" does not contain any of the implicit words];

docident [containsGemaMapNameCodes][Returns whether a map name contains ge3ma@4];
docremark [Returns 1 if the map name contains ge3ma@4, 0 otherwise];
docargument [mapName][The map name];
docexample [containsGemaMapNameCodes gema_warm_up][Will return 1 because "gema_warm_up" contains the word "gema"];
docexample [containsGemaMapNameCodes ac_edifice][Will return 0 because "ac_edifice" does not contain ge3ma@4];

docident [letterMatchesGemaMapNameCode][Returns whether a letter matches a specific position of the gema map name code];
docremark [Returns 1 if the letter matches the gema map name code position, 0 otherwise];
docargument [letter][The letter];
docargument [codePosition][The gema map name code position];
docexample [letterMatchesGemaMapNameCode a 2][Will return 0 because "a" does not match "m"];
docexample [letterMatchesGemaMapNameCode a 3][Will return 1 because "a" matches "a@4"];

docident [isGema][Returns whether the current environment is gema compatible];
docremark [Returns 1 if the environment is gema compatible, 0 otherwise];
docremark [This takes into account the game mode, map name and whether a demo is played back at the moment.];
docremark [The environment is gema compatible if the game mode is "CTF", the map name is a gema map name and no demo];
docremark [is played back at the moment.];

docident [getEnvironmentNotGemaCompatibleReason][Returns the reason why the current environment is not gema compatible];
docremark [Returns the reason or an empty string if the environment is gema compatible];

docident [isGemaModeActive][Returns whether the gema mode is currently active];
docremark [Returns 1 if the gema mode is active, 0 otherwise];

docident [autoEnableGemaModeIfRequired][Automatically enables the gema mode if required];
docremark [This will only be done if $optionAutoActivateGemaMode is set to 1.];

docident [autoDisableGemaModeIfRequired][Automatically disables the gema mode if required];

docident [getCurrentGemaModeState][Returns the current gema mode state];
docremark [Returns 1 if the gema mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentGemaModeState][Tries to set the current gema mode state];
docremark [Returns 1 if the gema mode state was successfully set, 0 otherwise];
docremark [If the gema mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the gema mode state will be shown.];
docargument [newGemaModeState][The new gema mode state];
docargument [successNotification][The notification to show on success (optional)];

docident [getGemaModeStateCanNotBeChangedReason][Returns the reason why the gema mode state can not be changed to a specified state];
docremark [Returns the reason why the gema mode state can not be changed or an empty string if it can be changed];
docargument [newGemaModeState][The state to which the gema mode state should be set (0 or 1)];

docident [onGemaModeEnabled][Event handler that is called when the gema mode state changes from "disabled" to "enabled"];

docident [isCountDownModeActive][Returns whether the countdown mode is currently active];
docremark [Returns 1 if the countdown mode is active, 0 otherwise];

docident [abortCountDown][Aborts the current count down];

docident [isCountDownActive][Returns whether there is a countdown running at the moment];
docremark [Returns 1 if there is a countdown running at the moment, 0 otherwise];

docident [initializeCountDown][Shows a countdown in seconds in the console];
docargument [countDownDuration][The duration of the countdown in milliseconds];
docargument [countDownFinishMessage][The message to show when the countdown is finished];
docexample [initializeCountDown 10000 hello][Counts down from 10 to 1 seconds and prints "hello" when the countdown reaches 0 seconds];

docident [showCountDown][Displays the remaining seconds, counts down a second and calls this function again after one second with the updated number of remaining seconds];
docremark [If the number of remaining seconds is 0 the count down finish message will be displayed instead.];
docargument [numberOfRemainingSeconds][The number of remaining seconds];
docargument [countDownFinishMessage][The message to show when the countdown is finished];
docexample [showCountDown 10 done][Shows "00:10" and calls itself again after 1 second with the arguments "9" and "done"];
docexample [showCountDown 0 finished][Shows the message "finished"];

docident [isValidShowCountDownCall][Returns whether a showCountDown function call is valid];
docremark [Returns 1 if the showCountDown function call is valid, 0 otherwise];
docargument [numberOfRemainingSeconds][The number of remaining seconds];

docident [getCountDownColor][Returns the countdown color based on the number of remaining seconds];
docremark [Returns the countdown color];
docargument [numberOfRemainingSeconds][The number of remaining seconds];
docexample [getCountDownColor 14][Returns $countDownColorDefault];
docexample [getCountDownColor 8][Returns $countDownColorLessThanTenSecondsRemaining];
docexample [getCountDownColor 2][Returns $countDownColorLessThanFourSecondsRemaining];

docident [onCountDownModeDisabled][Event handler that is called when the count down mode state changes from "enabled" to "disabled"];

docident [getTimeTarget][Returns the time target];
docremark [Returns the time target];

docident [timeTargetGetMinutes][Returns the minutes part of the time target];
docremark [Returns the minutes part of the time target];

docident [timeTargetSetMinutes][Changes the minutes part of the time target];
docargument [timeTargetMinutes][The minutes part of the time target (Must be between 0 and 35791)];
docexample [timeTargetSetMinutes 5][Sets the minutes part of the time target to 5];

docident [timeTargetGetSeconds][Returns the seconds part of the time target];
docremark [Returns the seconds part of the time target];

docident [timeTargetSetSeconds][Changes the seconds part of the time target];
docargument [timeTargetSeconds][The seconds part of the time target (Must be between 0 and 59)];
docexample [timeTargetSetSeconds 47][Sets the seconds part of the time target to 47];

docident [timeTargetGetMilliseconds][Returns the milliseconds part of the time target];
docremark [Returns the milliseconds part of the time target];

docident [timeTargetSetMilliseconds][Changes the milliseconds part of the time target];
docargument [timeTargetMilliseconds][The milliseconds part of the time target (Must be between 0 and 999)];

docident [getTimeTargetTotalMilliseconds][Returns the total milliseconds of the time target];
docremark [Returns the total milliseconds of the time target];

docident [setTimeTarget][Sets the time target];
docargument [timeTarget][The time target in milliseconds (Must be between 0 and 2147483647)];
docexample [setTimeTarget 10000][Sets the time target to 10000 milliseconds (= 10 seconds)];

docident [onTimeTargetChange][Event handler that is called when the time target is changed with "setTimeTarget"];

docident [changeTimeTarget][Changes the time target to a specified time interval];
docremark [Also fires the "onTimeTargetChange" event when the time target is changed.];
docargument [timeIntervalArray][The time interval array to set the time target to];

docident [isTimeTargetModeActive][Returns whether the time target mode is currently active];
docremark [Returns 1 if the time target mode is active, 0 otherwise];

docident [getTimeTargetScoreString][Returns a message that indicates whether the time target was beaten];
docremark [Returns the message];
docargument [scoreTime][The score time in milliseconds];

docident [startCountDown][Starts a new count down for the time target];
docargument [countDownDuration][The count down duration in milliseconds];

docident [initializeAutoTimeTarget][Initializes the auto time target with the configured auto set mode];

docident [setOptionAutoSetTimeTargetMode][Sets $optionAutoSetTimeTargetMode and initializes the time target with the new auto set mode];
docargument [newAutoSetMode][The new value for $optionAutoSetTimeTargetMode];

docident [updateTimeTarget][Changes the time target];
docargument [newTimeTarget][The new time target];

docident [updateBestMapRecordTimeTarget][Sets the time target to the best map record if $optionAutoSetTimeTargetMode is 1];

docident [updateBestWeaponRecordTimeTarget][Sets the time target to the best primary weapon record if $optionAutoSetTimeTarget is 2];

docident [updateBestScoreWeaponRecordTimeTarget][Sets the time target to the best record for the current score weapon if $optionAutoSetTimeTarget is 3];
docargument [currentScoreWeaponId][The id of the current score weapon];

docident [onEnableTimeTargetMode][Event handler that is called when the time target mode state changes to enabled];

docident [onMapRecordSavedAfter][Event handler that is called after a map record was saved];
docargument [$arg1][The map record];

docident [getCurrentTimeTargetModeState][Returns the current time target mode state];
docremark [Returns 1 if the time target mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentTimeTargetModeState][Tries to set the current time target mode state];
docremark [Returns 1 if the time target mode state was successfully set, 0 otherwise];
docremark [If the time target mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the time target mode state will be shown.];
docargument [newTimeTargetModeState][The new time target mode state];
docargument [successNotification][The notification to show on success (optional)];

docident [getTimeTargetModeStateCanNotBeChangedReason][Returns the reason why the time target mode state can not be changed to a specified state];
docremark [Returns the reason why the time target mode state can not be changed or an empty string if it can be changed];
docargument [newTimeTargetModeState][The state to which the time target mode state should be set (0 or 1)];

docident [onTimeTargetModeEnabled][Event handler that is called when the time target mode state changes from "disabled" to "enabled"];

docident [onTimeTargetModeDisabled][Event handler that is called when the time target mode state changes from "enabled" to "disabled"];

docident [getCurrentCountDownModeState][Returns the current count down mode state];
docremark [Returns 1 if the count down mode is currently enabled, 0 otherwise];

docident [tryToSetCurrentCountDownModeState][Tries to set the current count down mode state];
docremark [Returns 1 if the count down mode state was successfully set, 0 otherwise];
docremark [If the count down mode state was successfully changed an optional success message will be shown.];
docremark [Otherwise the reason for not changing the count down mode state will be shown.];
docargument [newCountDownModeState][The new count down mode state];
docargument [successNotification][The notification to show on success (optional)];

docident [getCountDownModeStateCanNotBeChangedReason][Returns the reason why the count down mode state can not be changed to a specified state];
docremark [Returns the reason why the count down mode state can not be changed or an empty string if it can be changed];
docargument [newCountDownModeState][The state to which the count down mode state should be set (0 or 1)];

docident [onCountDownModeEnabled][Event handler that is called when the count down mode state changes from "disabled" to "enabled"];

docident [generateOptionCheckBoxMenuItem][Generates a check box menu item for options that can only be set to either true or false];
docremark [For this to work the following conditions must be met:];
docremark [1. The name of the option must be stored in a alias named "menuItem<optionName>Option"];
docremark [2. The option's value must be stored in a alias named "option<optionName>"];
docargument [optionName][The name of the option];

docident [onEnableTimeTargetModeCheckBoxToggled][Function that is called when the "Enable Time Target Mode" checkbox is toggled];
docremark [Tries to set the time target mode state to the value of the checkbox and refreshes the menu if it fails.];
docargument [checkBoxState][The current state of the "Enable Time Target Mode" checkbox];

docident [onShowCountDownCheckBoxToggled][Function that is called when the "Show countdown" checkbox is toggled];
docremark [Tries to set the countdown mode state to the value of the checkbox and refreshes the menu if it fails.];
docargument [checkBoxState][The current state of the "Show countdown" checkbox];

docident [onTimeTargetMinutesEdited][Function that is called when the "Minutes" text input field value changed];
docremark [Tries to set the time target minutes to the value of the input field and refreshes the menu if it fails.];
docargument [inputFieldValue][The current value of the "Minutes" input field];

docident [onTimeTargetSecondsEdited][Function that is called when the "Seconds" text input field value changed];
docremark [Tries to set the time target seconds to the value of the input field and refreshes the menu if it fails.];
docargument [inputFieldValue][The current value of the "Seconds" input field];

docident [onTimeTargetMillisecondsEdited][Function that is called when the "Milliseconds" text input field value changed];
docremark [Tries to set the time target milliseconds to the value of the input field and refreshes the menu if it fails.];
docargument [inputFieldValue][The current value of the "Milliseconds" input field];

docident [menuItemBestMapRecordSelectAction][Shows either the "Weapon Records" or "Delete Records" menu depending on $optionEnableWeaponRecordsMenu];
docremark [This function is called when the best map record menu item is selected by the user.];

docident [onEnableGemaModeCheckBoxToggled][Function that is called when the "Enable Gema Mode" checkbox is toggled];
docremark [Tries to set the gema mode state to the value of the checkbox and refreshes the menu if it fails.];
docargument [checkBoxState][The current state of the "Enable Gema Mode" checkbox];

docident [showGemaModeMenu][Shows the "Gema Mode" menu];

docident [hideScoreWeaponModel][Hides the score weapon model above the menu];

docident [showDeleteRecordMenu][Shows the delete record menu if there is a record for the map with the specified weapon];
docargument [mapName][The map name];
docargument [weaponId][The weapon id];

docident [generateWeaponMapRecordMenuItem][Generates a weapon map record menu item for a specific weapon];
docargument [weaponId][The weapon id];
docargument [weaponModelDirectoryPath][The path to the weapon model to display above the "Show Records" menu (optional)];

docident [getDeleteRecordConfirmQuestion][Returns the confirm question for the "Delete Record" menu];
docremark [Returns the confirm question for the "Delete Record" menu];
docremark [The returned text depends on the deletion target (all records or a single record).];
docargument [mapName][The map name];

docident [getDeleteRecordConfirmText][Returns the text for the "Confirm" menu item in the "Delete Record" menu];
docremark [Returns the text for the "Confirm" menu item in the "Delete Record" menu];
docremark [The returned text depends on the deletion target (all records or a single record).];

docident [getDeleteRecordCancelText][Returns the text for the "Cancel" menu item in the "Delete Record" menu];
docremark [Returns the text for the "Cancel" menu item in the "Delete Record" menu];
docremark [The returned text depends on the deletion target (all records or a single record).];

docident [deleteRecordConfirmAction][Deletes either a single map record or all map records depending on the deletion target weapon id];
docremark [This function is called when the record deletion is confirmed by the user.];
docargument [mapName][The map name];

docident [deleteRecordCancelAction][Closes the "Delete Record" menu];
docremark [This function is called when the record deletion is cancelled by the user.];

docident [printGemaNotification][Prints a gema mode notification];
docremark [If $optionShowNotifications is 0 this function will do nothing.];
docargument [text][The text to print];

docident [createMapRecordArray][Creates and returns a map record array];
docremark [Returns the created map record array];
docargument [mapName][The map name];
docargument [scoreTime][The score time in milliseconds];
docargument [weaponId][The weapon id];

docident [getMapRecordMapName][Returns a map record's map name];
docremark [Returns the map record's map name];
docargument [mapRecordArray][The map record array];

docident [getMapRecordScoreTime][Returns a map record's score time];
docremark [Returns the map record's score time];
docargument [mapRecordArray][The map record array];

docident [getMapRecordWeaponId][Returns a map record's weapon id];
docremark [Returns the map record's weapon id];
docargument [mapRecordArray][The map record array];

docident [getMapRecordWeaponName][Returns a map record's weapon name];
docremark [Returns the weapon name];
docargument [mapRecordArray][The map record array];

docident [writeMapRecordToSavedCfg][Writes a map record to saved];
docremark [cfg.];
docargument [$arg1][The map record];

docident [readMapRecordFromSavedCfg][Loads and returns a map record for a specified map with a specific weapon from saved];
docremark [Returns the map record or an empty string if no record was found];
docremark [cfg.];
docargument [mapName][The map name];
docargument [weaponId][The weapon id];

docident [deleteMapRecordFromSavedCfg][Deletes a map record from saved];
docremark [cfg.];
docargument [mapName][The map name of the record to delete];
docargument [weaponId][The weapon id of the record to delete];

docident [deleteAllMapRecordsOfMapFromSavedCfg][Deletes all map records for a specific map];
docargument [mapName][The map name];

docident [getMapRecordListAlias][Returns the map record list alias name for a specific map];
docremark [Returns the map record list alias];
docremark [This is the name of the variable in which the records for the map are saved.];
docargument [mapName][The map name];
docexample [getMapRecordListAlias gibbed-gema11][Returns ::gema_records_gibbed-gema11];

docident [loadMapRecordList][Loads and returns a map record list from a given map record list alias name];
docremark [Returns the map record list or an empty string if no map record list with that alias name exists];
docargument [$arg1][The map record list alias name];

docident [onDeleteWeaponRecordAfter][Event handler that is called after a weapon map record was deleted];
docargument [mapRecord][The map record];

docident [onDeleteAllRecordsAfter][Event handler that is called after all records for a map were deleted at once];
docargument [mapName][The map name];

docident [saveMapRecord][Saves a map record if it is better than the previous best record with the map records score weapon];
docremark [The record times are saved in a persistent variable per map.];
docargument [mapRecord][The map record];

docident [loadWeaponMapRecord][Loads and returns a map record for a specified map with a specific weapon];
docremark [Returns the map record or an empty string if no record was found];
docargument [mapName][The map name];
docargument [weaponId][The weapon id];

docident [loadBestMapRecord][Returns the best map record for a specified map];
docremark [Returns the best map record];
docremark [Will return an empty string if there is no map record for the target map.];
docargument [mapName][The map name];

docident [getBestMapRecord][Returns the best map record for a map];
docremark [Returns the best map record for the specified map];
docremark [Uses the cache if the target map is the current map.];
docargument [mapName][The map name];

docident [compareMapRecordToBestMapRecord][Compares a map record to the best map record of its map];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants)];
docargument [mapRecord][The map record to compare to the best map record];

docident [compareMapRecordToWeaponRecord][Compares a map record to the best weapon map record of its map];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants)];
docargument [mapRecord][The map record to compare to the best weapon map record];

docident [compareMapRecordToSavedMapRecord][Compares a map record to a saved map record];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants)];
docremark [The saved map record may be an empty string.];
docargument [mapRecord][The map record to compare to the saved weapon map record];
docargument [savedMapRecord][The saved weapon map record];

docident [compareMapRecords][Compares a map record to another map record];
docremark [Returns the comparison status (One of the MAP_RECORD_COMPARISON_STATUS constants) and the score time difference];
docargument [mapRecord][The first map record];
docargument [comparisonMapRecord][The second map record];

docident [printMapStatistics][Shows the best record of a map];
docremark [Also shows a list of weapons with which the map was not finished yet if $optionShowMissingWeapons is 1.];
docargument [mapName][The map name];

docident [getMissingMapRecordWeaponNamesString][Returns a comma separated string of weapons with which the player didn't score on a map];
docremark [Returns the missing weapon names];
docremark [Returns an empty string when the map was finished with all weapons.];
docargument [mapName][The map name];

docident [getMapRecordScoreString][Generates and returns the map record output string for when the player scores];
docremark [Returns the map record output string for when the player scores];
docargument [mapRecord][The map record];

docident [getMapRecordStatusString][Returns the record status string (new record, tied record, no new record)];
docremark [Returns the record status string];
docremark [Must be called before the new record was saved.];
docremark [If no previous best map record is set the status string will always be the one for the comparison to];
docremark [the best map record.];
docremark [In any other case it will be the comparison to the best map record if $optionScoreTimeCompareValue is 0 or];
docremark [the comparison to the best weapon map record if $optionScoreTimeCompareValue is 1.];
docargument [mapRecord][The map record];

docident [getNewMapRecordString][Returns the "New best time" message for the case that the compare record is empty];
docremark [Returns the "New best time" message];
docargument [newMapRecord][The new map record];
docargument [isComparisonToBestMapRecord][1 if the map record was compared to the best map record];

docident [getFasterThanCompareMapRecordString][Returns the "Faster than map record" message];
docremark [Returns the "Faster than map record" message];
docremark [The difference to the comparison map record must be calculated as "bestRecordTime - recordTime".];
docargument [newMapRecord][The new map record];
docargument [differenceToComparisonMapRecord][The difference of the map record to the best map record in milliseconds];
docargument [isComparisonToBestMapRecord][1 if the map record was compared to the best map record];

docident [getCompareMapRecordTiedString][Returns the "Tied map record" message];
docremark [Returns the "Tied map record" message];
docargument [newMapRecord][The new map record];
docargument [isComparisonToBestMapRecord][1 if the map record was compared to the best map record];

docident [getSlowerThanCompareMapRecordString][Returns the "Slower than map record" message];
docremark [Returns the "Slower than map record" message];
docremark [The difference to the comparison map record must be calculated as "bestRecordTime - recordTime".];
docargument [newMapRecord][The new map record];
docargument [differenceToComparisonMapRecord][The difference of the map record to the best map record in milliseconds];
docargument [isComparisonToBestMapRecord][1 if the map record was compared to the best map record];

docident [getBestMapRecordMenuString][Returns the menu string for the best map record in the main menu];
docremark [Returns the map record menu string];
docargument [mapName][The map name];

docident [getWeaponMapRecordMenuString][Returns the menu item text for a record with a specific weapon];
docremark [Returns the map record menu string];
docargument [mapName][The map name];
docargument [weaponId][The weapon id];

docident [getScoreTimeMenuString][Returns a string that represents a map records score time for a menu];
docremark [Returns the map record score time string];
docremark [Will return  a "No record" message when the map record is empty.];
docargument [mapRecord][The map record];

docident [generateTimeStringFromMilliseconds][Generates and returns a time string in the format <minutes>:<seconds>:<milliseconds> from a time in milliseconds];
docremark [Returns the generated time string];
docargument [milliseconds][The time in milliseconds];
docargument [includeMilliseconds][1 if the time string should contain the milliseconds];
docexample [generateTimeStringFromMilliseconds 6700][Will return "00:06"];
docexample [generateTimeStringFromMilliseconds 6700 1][Will return "00:06,700"];

docident [generateTimeStringFromTimeInterval][Generates and returns a time string in the format <minutes>:<seconds>:<milliseconds> from a time in milliseconds];
docremark [Returns the generated time string];
docargument [timeIntervalArray][The time interval array];
docargument [includeMilliseconds][1 if the time string should contain the milliseconds];

docident [createTimeIntervalArray][Creates and returns a time interval array];
docremark [Returns the created time interval array];
docargument [totalMilliseconds][The total milliseconds of the time interval];

docident [getTimeIntervalTotalMilliseconds][Returns the total milliseconds of a time interval];
docremark [Returns the total milliseconds of the time interval];
docargument [timeIntervalArray][The time interval array];

docident [getTimeIntervalTotalSeconds][Returns the total seconds of a time interval];
docremark [Returns the total seconds of the time interval];
docargument [timeIntervalArray][The time interval array];

docident [getTimeIntervalMinutes][Returns the minutes part of a time interval];
docremark [Returns the minutes part of the time interval];
docargument [timeIntervalArray][The time interval array];

docident [getTimeIntervalSeconds][Returns the seconds part of a time interval];
docremark [Returns the seconds part of the time interval];
docargument [timeIntervalArray][The time interval array];

docident [getTimeIntervalMilliseconds][Returns the milliseconds part of a time interval];
docremark [Returns the milliseconds part of the time interval];
docargument [timeIntervalArray][The time interval array];

docident [getIsTimeIntervalNegative][Returns whether a time interval is a negative time interval];
docremark [Returns 1 if the time interval is a negative time interval, 0 otherwise];
docargument [timeIntervalArray][The time interval array];

docident [getLastTimeIntervalChangeErrorMessage][Returns the last error message for an error that occurred during a time interval change];
docremark [Returns the last error message or an empty string if no error occurred yet];

docident [changeTimeIntervalMinutes][Changes the minutes part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [newTimeIntervalMinutes][The new minutes part for the time interval (Must be between 0 and 35791)];

docident [changeTimeIntervalSeconds][Changes the seconds part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [newTimeIntervalSeconds][The new seconds part for the time interval (Must be between 0 and 59)];

docident [changeTimeIntervalMilliseconds][Changes the milliseconds part of a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [newTimeIntervalMilliseconds][The new milliseconds part for the time interval (Must be between 0 and 999)];

docident [addTimeIntervalMinutes][Adds a time difference in minutes to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [minutesDifference][The time difference in minutes];

docident [addTimeIntervalSeconds][Adds a time difference in seconds to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [secondsDifference][The time difference in seconds];

docident [addTimeIntervalMilliseconds][Adds a time difference in milliseconds to a time interval];
docremark [Returns the modified time interval array or an empty string if an error occurred];
docargument [timeIntervalArray][The time interval array];
docargument [millisecondsDifference][The time difference in milliseconds];

docident [getTimeIntervalDifferenceNotValidReason][Returns the reason why a time interval difference in milliseconds is not valid];
docremark [Returns the error message or an empty string if the time interval difference is valid];
docargument [timeIntervalArray][The timeInterval array to which the difference should be added];
docargument [millisecondDifference][The time difference in milliseconds];
