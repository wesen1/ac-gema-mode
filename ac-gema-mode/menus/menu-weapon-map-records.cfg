//
// @author wesen
// @copyright 2019-2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the "Weapon Records" menu
//
// Requires:
//   * scripts/ac-gema-mode/global-constants.cfg
//   * scripts/ac-gema-mode/map-record/output/menus/menu-string-generator.cfg
//   * scripts/ac-gema-mode/menus/menu-delete-record.cfg
//   * scripts/ac-gema-mode/menus/menu-migrate-records.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;


// Global Variables

//
// The last selected value of the map revision slider menu item
// This is the index of the corresponding map revision inside the list of map revisions
//
// @var int $lastSelectedRevisionSliderValue
//
checkinit lastSelectedRevisionSliderValue 0;

//
// The last selected map revision of the map revision slider menu item
//
// @var int $lastSelectedMapRevision
//
checkinit lastSelectedMapRevision $curmaprevision;


// Public Functions

//
// Hides the score weapon model above the menu.
//
const hideScoreWeaponModel [
  chmenumdl $menuShowRecordsTitle;
]

//
// Generates the weapon map record menu items for all weapons.
//
const generateWeaponMapRecordMenuItems [

  // Primary Weapons
  loop weaponIndex (listlen $primaryWeaponIds) [
    weaponId = (at $primaryWeaponIds $weaponIndex);
    modelDirectoryName = (at $DEFAULT_PRMDLDIRS $weaponIndex);

    generateWeaponMapRecordMenuItem $weaponId (concatword $modelDirectoryName "/menu");
  ]

  // Secondary Weapons
  generateWeaponMapRecordMenuItem $PISTOL;
  generateWeaponMapRecordMenuItem $KNIFE;

]


//
// Fetches and returns the values for the map revision slider.
//
// @return int[] The map revisions for the map revision slider
//
const getRevisionSliderValues [

  storedMapRevisions = (getAllStoredMapRevisions (curmap));
  if (strcmp $storedMapRevisions "") [
    // No stored map revisions, seems to be a non gema map
    return $curmaprevision;
  ][
    return $storedMapRevisions;
  ]

]

//
// Returns the maximum value for the map revision slider.
//
// @return int The maximum value for the map revision slider
//
const getRevisionSliderMaxValue [
  return (- (listlen (getRevisionSliderValues)) 1);
]

//
// Handler that is called when a value is selected via the map revision slider.
//
// @param int revisionSliderValue ($arg1) The new revision slider value
//
const onRevisionSliderValueSelected [

  newSelectedRevisionSliderValue = $arg1;
  if (!= $lastSelectedRevisionSliderValue $newSelectedRevisionSliderValue) [

    previousSelectedMapRevision = $lastSelectedMapRevision

    lastSelectedRevisionSliderValue = $newSelectedRevisionSliderValue;
    lastSelectedMapRevision = (at (getRevisionSliderValues) $lastSelectedRevisionSliderValue);


    if (|| (= $previousSelectedMapRevision $curmaprevision) (= $lastSelectedMapRevision $curmaprevision)) [
      // Selected map revision changed from or to curmaprevision, rebuild the menu to add/remove the "Migrate records" button
      closemenu $menuShowRecordsTitle;
      rebuildShowRecordsMenu 0;
      showmenu $menuShowRecordsTitle;
      menuselection $menuShowRecordsTitle 1;
    ][
      // The menu only needs to be refreshed to reload the weapon map records
        refreshMenu $menuShowRecordsTitle 1;
    ]
  ]

]


// Private Functions

//
// Generates a weapon map record menu item for a specific weapon.
//
// @param int weaponId ($arg1) The weapon id
// @param string weaponModelDirectoryPath ($arg2) The path to the weapon model to display above the "Weapon Records" menu (optional)
//
const generateWeaponMapRecordMenuItem [

  weaponId = $arg1;
  modelDirectoryPath = $arg2;

  menuItemText = (format "getWeaponMapRecordMenuString (curmap) %1 $lastSelectedMapRevision" $weaponId);
  menuItemSelectAction = (format "showDeleteRecordMenu (curmap) %1 $lastSelectedMapRevision" $weaponId);

  if (strcmp $modelDirectoryPath "") [
    // No weapon model was specified
    menuItemHoverAction = "hideScoreWeaponModel";
  ][
    // A weapon model was specified, show it above the menu
    menuItemHoverAction = (format "chmenumdl $menuShowRecordsTitle weapons/%1 mapmodel 75 12" $modelDirectoryPath);
  ]

  execute (format "menuitemvar [ %1 ][ %2 ][ %3 ]" $menuItemText $menuItemSelectAction $menuItemHoverAction);

]


// Event Handlers

//
// Event handler that is called when a new map starts.
//
checkinit mapstartalways [
  // The "Show records" menu must be rebuilt to update the map revision slider
  rebuildShowRecordsMenu;
]


// Menu configuration

//
// Builds the "Show records" menu.
//
// @param int initializeMenu ($arg1) 1 to initialize global variables and the initial item selection, 0 otherwise
//
const buildShowRecordsMenu [

  if ($arg1) [
    // Set up the map revision slider variables
    lastSelectedMapRevision = $curmaprevision;
    lastSelectedRevisionSliderValue = (findlist (getRevisionSliderValues) $lastSelectedMapRevision);
  ]


  newmenu $menuShowRecordsTitle;

  if (= (getRevisionSliderMaxValue) 0) [
    // There is only the current map revision, no need to display a slider
    menuitemvar [ format $menuItemCurrentMap (curmap) $curmaprevision ];
  ][
    // There are multiple map revisions to chose from, display a slider
    menuitemvar [ format $menuItemCurrentMapName (curmap) ];
    menuitemslider $menuItemCurrentMapRevisionSliderTitle 0 (getRevisionSliderMaxValue) [ $lastSelectedRevisionSliderValue ] 1 (getRevisionSliderValues) [ onRevisionSliderValueSelected ];
  ]

  menuitem [][][ hideScoreWeaponModel ];
  generateWeaponMapRecordMenuItems;
  menuitem [][][ hideScoreWeaponModel ];

  if (< $lastSelectedMapRevision (getCurrentMapRevision (curmap))) [
    // It's a old map revision, add the "Migrate records" menu item
    menuitem $menuItemMigrateRecords [ showMigrateRecordsMenu (curmap) $lastSelectedMapRevision ];
  ]

  menuitem;
  menuitem $menuItemGoBackText [ closemenu $menuShowRecordsTitle ];


  if ($arg1) [
    // Select the map record with Assault Rifle
    menuselection $menuShowRecordsTitle 3;
  ]

]

//
// Deletes and rebuilds the "Show records" menu.
//
// @param int initializeShowRecordsMenu ($arg1) 1 to initialize the show records menu, 0 to only generate the menu items (optional, Default: 1)
//
const rebuildShowRecordsMenu [

  if (= $numargs 1) [
    initializeShowRecordsMenu = $arg1;
  ][
    initializeShowRecordsMenu = 1;
  ]

  delmenu $menuShowRecordsTitle;
  buildShowRecordsMenu $initializeShowRecordsMenu;
]


buildShowRecordsMenu 1;
