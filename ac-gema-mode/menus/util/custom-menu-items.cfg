//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Custom menu items module for ac-gema-mode
//
// Provides various custom menu items.
//
// Requires:
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/strings
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/number-utils.cfg
//

persistidents 0;


// Public Functions

//
// Creates a new text input menu item that allows only integers within a given range to be entered.
// The value range must be a list in the format "[ <minimum value> <maxmimum value> ]".
//
// @param string title ($arg1) The title of the text input
// @param string getCurrentValueFunctionName ($arg2) The name of the function to use to get the initial value of the text input
// @param string validChangeHandlerFunctionName ($arg3) The name of the function to call on valid value changes
// @param string invalidChangeHandlerFunctionName ($arg4) The name of the function to call on invalid value changes
// @param int numberOfValuePadZeros ($arg5) The number of pad zeros for the value (optional, Default: 0)
// @param int[] valueRange ($arg6) The value range for the input field (optional, Default: All numbers)
//
function menuItemIntegerInput [

  menuItemTitle = $arg1;
  menuItemGetCurrentValueFunctionName = $arg2;
  menuItemValidChangeHandlerFunctionName = $arg3;
  menuItemInvalidChangeHandlerFunctionName = $arg4;

  if (>= $numargs 5) [
    menuItemNumberOfValuePadZeros = $arg5;
  ][
    menuItemNumberOfValuePadZeros = 0;
  ]

  if (= $numargs 6) [
    menuItemValueRange = $arg6;
  ][
    menuItemValueRange = (concat (* $maximumAllowedIntegerValue -1) $maximumAllowedIntegerValue);
  ]


  // Generate the "Get current value padded with zeros" code
  menuItemGetCurrentValueCodeTemplate = [
    return (l0 %1 (%2));
  ]
  menuItemGetCurrentValueCode = (format $menuItemGetCurrentValueCodeTemplate $menuItemNumberOfValuePadZeros $menuItemGetCurrentValueFunctionName);

  // Generate the "Handle value change" code
  menuItemChangedHandlerCodeTemplate = [
    handleMenuItemIntegerInputValue $arg1 [%1] %2 %3;
  ]
  menuItemChangedHandlerCode = (format $menuItemChangedHandlerCodeTemplate $menuItemValueRange $menuItemValidChangeHandlerFunctionName $menuItemInvalidChangeHandlerFunctionName);

  // Generate the hover action (empty code block)
  menuItemHoverAction = [];

  // Calculate the maximum input length
  minimumNumberLength = (strlen (at $menuItemValueRange 0));
  maximumNumberLength = (strlen (at $menuItemValueRange 1));
  if (> $minimumNumberLength $maximumNumberLength) [
    maximumInputLength = $minimumNumberLength;
  ][
    maximumInputLength = $maximumNumberLength;
  ]

  execute (format "menuitemtextinput [%1][%2][%3][%4][%5]%6" $menuItemTitle $menuItemGetCurrentValueCode $menuItemChangedHandlerCode $menuItemHoverAction $maximumInputLength);

]


// Private Functions

//
// Handles a value change for a integer input menu item.
// Will call the "validChangeHandlerFunctionName" function if the new value is valid.
// Will show an error message and call the "invalidChangeHandlerFunctionName" function if the new value is invalid.
//
// @param string newMenuItemValue ($arg1) The new value for the integer input item
// @param int[] valueRange ($arg2) The value range for the input field
// @param string validChangeHandlerFunctionName ($arg3) The name of the function to call on valid value changes
// @param string invalidChangeHandlerFunctionName ($arg4) The name of the function to call on invalid value changes
//
function handleMenuItemIntegerInputValue [

  newMenuItemValue = $arg1;
  menuItemValueRange = $arg2;
  menuItemValidChangeHandlerFunctionName = $arg3;
  menuItemInvalidChangeHandlerFunctionName = $arg4;

  if (isStringValidInteger $newMenuItemValue) [
    // It's a valid integer
    newMenuItemValueInteger = (stringToInteger $newMenuItemValue);
    if (< $newMenuItemValueInteger (at $menuItemValueRange 0)) [
      printGemaNotification (format $messageNumberInputMayNotBeSmallerThanMinimumValue (at $menuItemValueRange 0));
      $menuItemInvalidChangeHandlerFunctionName $newMenuItemValue;
    ][
      if (> $newMenuItemValueInteger (at $menuItemValueRange 1)) [
        printGemaNotification (format $messageNumberInputMayNotBeLargerThanMaximumValue (at $menuItemValueRange 1));
        $menuItemInvalidChangeHandlerFunctionName $newMenuItemValue;
      ][
        // The value is inside the specified value range
        $menuItemValidChangeHandlerFunctionName $newMenuItemValueInteger;
      ]
    ]
  ][
    // It's not a valid integer
    printGemaNotification (format $messageNumberInputIsNotANumber $newMenuItemValue);
    $menuItemInvalidChangeHandlerFunctionName $newMenuItemValue;
  ]

]
