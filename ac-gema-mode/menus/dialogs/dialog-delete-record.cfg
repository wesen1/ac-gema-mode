//
// @author wesen
// @copyright 2019-2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the "Delete Record" menu
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/output/map-record-output.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-loader.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-storage.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;


// Constants

// The available "Delete Record" dialog modes

const DELETE_RECORD_MODE_ALL_OF_MAP 0;
const DELETE_RECORD_MODE_ALL_OF_MAP_REVISION 1;
const DELETE_RECORD_MODE_SINGLE 2;


// Global Variables

//
// The deletion target map name for the delete record dialog
//
// @var string $deleteRecordMapName
//
checkinit deleteRecordMapName "";

//
// The deletion target map revision for the delete record dialog
//
// @var int $deleteRecordMapRevision
//
checkinit deleteRecordMapRevision -1;

//
// The deletion target map record for the delete record dialog
//
// @var array $deleteRecordMapRecord
//
checkinit deleteRecordMapRecord [];

//
// The current delete record dialog mode (One of the  DELETE_RECORD_MODE_* constants)
//
// @var int $deleteRecordMode
//
checkinit deleteRecordMode 0;


// Public Functions

//
// Shows the delete record dialog.
// Will do nothing but preventing menus from closing if a map revision and weapon ID are given and no
// corresponding map record could be found.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision (-1 targets all revisions)
// @param int weaponId ($arg3) The target weapon id (-1 targets all weapons)
//
const showDeleteRecordDialog [

  deleteRecordMapName = $arg1;
  deleteRecordMapRevision = $arg2;
  weaponId = $arg3;

  if (= $weaponId -1) [
    if (= $deleteRecordMapRevision -1) [
      deleteRecordMode = $DELETE_RECORD_MODE_ALL_OF_MAP;
    ][
      deleteRecordMode = $DELETE_RECORD_MODE_ALL_OF_MAP_REVISION;
    ]
  ][
    deleteRecordMode = $DELETE_RECORD_MODE_SINGLE;
  ]


  if (= $deleteRecordMode $DELETE_RECORD_MODE_SINGLE) [
    deleteRecordMapRecord = (loadWeaponMapRecord $deleteRecordMapName $weaponId $deleteRecordMapRevision);
  ][
    deleteRecordMapRecord = "";
  ]

  if (&& (= $deleteRecordMode $DELETE_RECORD_MODE_SINGLE) (strcmp $deleteRecordMapRecord "")) [
    // Prevents the current open menu from closing if this function was called on a menu item selection
    return -1;
  ][
    delmenu $menuDeleteRecordTitle;
    buildDeleteRecordDialog;
    showmenu $menuDeleteRecordTitle;
  ]

]


// Private Functions

//
// Returns the confirm question for the "Delete Record" menu.
//
// @return string The confirm question for the "Delete Record" menu
//
const getDeleteRecordConfirmQuestion [

  if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP) [
    return (format $menuItemDeleteAllRecordsOfMapConfirmQuestion $deleteRecordMapName);
  ][
    if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP_REVISION) [
      return (format $menuItemDeleteAllRecordsOfMapRevisionConfirmQuestion $deleteRecordMapName $deleteRecordMapRevision);
    ][
      // Delete a single record
      weaponName = (getMapRecordWeaponName $deleteRecordMapRecord);
      return (format $menuItemDeleteWeaponRecordConfirmQuestion $deleteRecordMapName $weaponName);
    ]
  ]

]

//
// Returns the text for the "Confirm" menu item in the "Delete Record" menu.
//
// @return string The text for the "Confirm" menu item in the "Delete Record" menu
//
const getDeleteRecordConfirmText [

  if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP) [
    return $menuItemDeleteMultipleWeaponRecordsConfirm;
  ][
    if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP_REVISION) [
      return $menuItemDeleteMultipleWeaponRecordsConfirm;
    ][
      return $menuItemDeleteSingleWeaponRecordConfirm;
    ]
  ]

]

//
// Returns the text for the "Cancel" menu item in the "Delete Record" menu.
//
// @return string The text for the "Cancel" menu item in the "Delete Record" menu
//
const getDeleteRecordCancelText [

  if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP) [
    return $menuItemDeleteMultipleRecordsCancel;
  ][
    if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP_REVISION) [
      return $menuItemDeleteMultipleRecordsCancel;
    ][
      return $menuItemDeleteSingleWeaponRecordCancel;
    ]
  ]

]

//
// Deletes the targeted map records.
// Also closes the "Delete Record" menu.
//
// This function is called when the record deletion is confirmed by the user.
//
const deleteRecordConfirmAction [

  if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP) [
    deleteAllMapRecordsOfMapFromSavedCfg $deleteRecordMapName;
    printGemaNotification (format $messageAllRecordsOfMapDeleted $deleteRecordMapName);
  ][
    if (= $deleteRecordMode $DELETE_RECORD_MODE_ALL_OF_MAP_REVISION) [
      deleteAllMapRecordsOfMapInRevisionFromSavedCfg $deleteRecordMapName $deleteRecordMapRevision;
      printGemaNotification (format $messageAllRecordsOfMapInRevisionDeleted $deleteRecordMapName $deleteRecordMapRevision);
    ][
      deleteMapRecordFromSavedCfg $deleteRecordMapName (getMapRecordWeaponId $deleteRecordMapRecord) (getMapRecordMapRevision $deleteRecordMapRecord);
      printGemaNotification (format $messageSingleWeaponMapRecordDeleted (getMapRecordMapName $mapRecord) (getMapRecordMapRevision $mapRecord) (getMapRecordWeaponName $mapRecord));
    ]
  ]

  closemenu $menuDeleteRecordTitle;

]

//
// Closes the "Delete Record" menu.
// This function is called when the record deletion is cancelled by the user.
//
const deleteRecordCancelAction [
  closemenu $menuDeleteRecordTitle;
]


// Menu configuration

const buildDeleteRecordDialog [

  newmenu $menuDeleteRecordTitle;
  menuitem (getDeleteRecordConfirmQuestion) [ -1 ];
  menuitem;
  menuitem (getDeleteRecordConfirmText) [ deleteRecordConfirmAction ];
  menuitem (getDeleteRecordCancelText) [ deleteRecordCancelAction ];

  // Initially select the cancel option
  menuinitselection 3;

]
