//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the "Migrate Records" menu
//
// Requires:
//   * scripts/ac-gema-mode/colors.cfg
//   * scripts/ac-gema-mode/map-record/map-record-migrator.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-revision-storage.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/util/list-utils.cfg
//

persistidents 0;


// Global Variables

//
// The target map name for the "Migrate Records" dialog
//
// @var string $migrateRecordsMapName
//
checkinit migrateRecordsMapName "";

//
// The target map revision for the "Migrate Records" dialog
// -1 targets all map revisions other than the current map revision
//
// @var int $migrateRecordsMapRevision
//
checkinit migrateRecordsMapRevision "";

//
// The list of map revisions whose records to migrate
// This is only relevant when $migrateRecordsMapRevision is -1
//
// @var int $migrateRecordsIncludedMapRevisions
//
checkinit migrateRecordsIncludedMapRevisions [];


// Public Functions

//
// Shows the "Migrate Records" dialog.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision (-1 to target all other map revisions)
//
const showMigrateRecordsDialog [

  migrateRecordsMapName = $arg1;
  migrateRecordsMapRevision = $arg2;
  migrateRecordsIncludedMapRevisions = [];

  delmenu $menuMigrateRecordsTitle;
  buildMigrateRecordsDialog;
  showmenu $menuMigrateRecordsTitle;

]


// Private Functions

//
// Returns the question text for the "Migrate Records" dialog.
//
// @return string The question text for the "Migrate Records" dialog
//
const getMigratRecordsQuestionText [

  currentMapRevision = (getCurrentMapRevision $migrateRecordsMapName);
  if (= $migrateRecordsMapRevision -1) [
    return (format $menuItemMigrateMultipleRevisionsRecordsConfirmQuestion $migrateRecordsMapName $currentMapRevision);
  ][
    return (format $menuItemMigrateSingleRevisionRecordsConfirmQuestion $migrateRecordsMapName $migrateRecordsMapRevision $currentMapRevision);
  ]

]

//
// Returns the "yes" answer text for the "Migrate Records" dialog.
//
// @return string The "yes" answer text for the "Migrate Records" dialog
//
const getMigrateRecordsConfirmText [
  return $menuItemMigrateRecordsConfirm;
]

//
// Returns the "no" answer text for the "Migrate Records" dialog.
//
// @return string The "no" answer text for the "Migrate Records" dialog
//
const getMigrateRecordsCancelText [
  return $menuItemMigrateRecordsCancel;
]

//
// Handler that is called when a map revision check box is enabled.
// Adds the map revision to the list of map revisions whose records should be migrated.
//
// @param int mapRevision ($arg1) The map revision
//
const onMapRevisionCheckboxEnabled [
  add2list migrateRecordsIncludedMapRevisions $arg1;
]

//
// Handler that is called when a map revision check box is disabled.
// Removes the map revision from the list of map revisions whose records should be migrated.
//
// @param int mapRevision ($arg1) The map revision
//
const onMapRevisionCheckboxDisabled [
  migrateRecordsIncludedMapRevisions = (listremove $migrateRecordsIncludedMapRevisions $arg1);
]


//
// Migrates all records from the target map revision to the current map revision.
// Also closes the "Migrate Records" menu.
//
// This function is called when the record migration is confirmed by the user.
//
const migrateRecordsConfirmAction [

  if (&& (= $migrateRecordsMapRevision -1) (= (listlen $migrateRecordsIncludedMapRevisions) 0)) [
    printGemaNotification $messageSelectAtLeastOneMapRevisionToMigrate;
    return -1;
  ][

    currentMapRevision = (getCurrentMapRevision $migrateRecordsMapName);
    if (> (listlen $migrateRecordsIncludedMapRevisions 1)) [
      migrateMapRecordsFromRevisionsTo $migrateRecordsMapName $migrateRecordsIncludedMapRevisions $currentMapRevision;

      outputMigrateMapRevisions = [];
      looplist $migrateRecordsIncludedMapRevisions mapRevision [
        add2list outputMigrateMapRevisions (concatword (c $colorMapRevision) $mapRevision);
      ]

      outputMigrateMapRevisionsText = (generateOutputList $outputMigrateMapRevisions $messageRecordsMigratedRevisionListSeparator $messageRecordsMigratedRevisionListLastSeparator);

      printGemaNotification (format $messageRecordsMigratedMultiple $migrateRecordsMapName $outputMigrateMapRevisionsText $currentMapRevision);

    ][
      if (= $migrateRecordsMapRevision -1) [
        targetMapRevision = (at $migrateRecordsIncludedMapRevisions 0);
      ][
        targetMapRevision = $migrateRecordsMapRevision;
      ]

      migrateMapRecordsFromRevisionTo $migrateRecordsMapName $targetMapRevision $currentMapRevision;

      printGemaNotification (format $messageRecordsMigratedSingle $migrateRecordsMapName $targetMapRevision $currentMapRevision);
    ]

    closemenu $menuMigrateRecordsTitle;
  ]

]

//
// Closes the "Migrate Records" menu.
// This function is called when the record migration is cancelled by the user.
//
const migrateRecordsCancelAction [
  closemenu $menuMigrateRecordsTitle;
]



// Menu configuration

//
// Builds the menu for the "Migrate Records" dialog.
//
const buildMigrateRecordsDialog [

  newmenu $menuMigrateRecordsTitle;
  menuitem (getMigratRecordsQuestionText);
  menuitem;

  if (= $migrateRecordsMapRevision -1) [
    // Generate checkboxes for each map revision
    currentMapRevision = (getCurrentMapRevision $migrateRecordsMapName);

    menuItemSelectActionTemplate = [
      if ($arg1) [
        onMapRevisionCheckboxEnabled %1;
      ][
        onMapRevisionCheckboxDisabled %1;
      ]
    ]

    looplist (getMapRevisionsWithRecords $migrateRecordsMapName) mapRevision [
      if (!= $mapRevision $currentMapRevision) [
        menuItemSelectAction = (format $menuItemSelectActionTemplate $mapRevision);
        menuitemcheckbox (concatword (c $colorMapRevision) $mapRevision) 1 $menuItemSelectAction;

        add2list migrateRecordsIncludedMapRevisions $mapRevision;
      ]
    ]

    menuitem;
  ]

  menuitem (getMigrateRecordsConfirmText) [ migrateRecordsConfirmAction ];
  menuitem (getMigrateRecordsCancelText) [ migrateRecordsCancelAction ];

  // Initially select the cancel option
  menuinitselection 3;

]
