//
// @author wesen
// @copyright 2019-2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the options menu
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/gema-mode-state/gema-mode-state.cfg
//   * scripts/ac-gema-mode/map-record/output/console/map-record-printer.cfg
//   * scripts/ac-gema-mode/map-record/output/console/map-statistics-printer.cfg
//   * scripts/ac-gema-mode/menus/menu-main.cfg
//   * scripts/ac-gema-mode/menus/menu-about.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/current-score-attempt-compare-map-record.cfg
//   * scripts/ac-gema-mode/score-attempt/score-weapon-updater.cfg
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-auto-updater.cfg
//   * scripts/ac-gema-mode/time-target-mode/time-target-mode.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/value-persistor.cfg
//

persistidents 0;


// Global Variables

//
// Stores whether the options menu should be rebuilt the next time it is shown
//
// @var int $rebuildOptionsMenuOnNextShow
//
cache rebuildOptionsMenuOnNextShow 0;


// Public Functions

//
// Generates a check box menu item for options that can only be set to either true or false.
// For this to work the following conditions must be met:
//   1. The name of the option must be stored in a alias named "menuItem<optionName>Option"
//   2. The option's value must be stored in a alias named "option<optionName>"
//
// @param string optionName ($arg1) The name of the option
//
function generateOptionCheckBoxMenuItem [

  optionAliasName = (format "option%1" $arg1);

  menuItemText = (getalias (format "menuItem%1Option" $arg1));
  menuItemValue = (format "$%1" $optionAliasName);
  menuItemSelectAction = (format [setPersistentValue %1 $arg1;] $optionAliasName);

  execute (format "menuitemcheckbox [%1][%2][%3]" $menuItemText $menuItemValue $menuItemSelectAction);

]


//
// Event that is fired when a new font type character width list was added.
//
// @param string characterWidthListName ($arg1) The name of the character width list that was added
//
eventlistener onFontTypeCharacterWidthListAdded [
  rebuildOptionsMenuOnNextShow = 1;
]

//
// Event handler that is called before the options menu is shown.
// Rebuilds the menu if required.
//
function onBeforeOptionsMenuShow [

  if ($rebuildOptionsMenuOnNextShow) [
    closemenu $menuOptionsTitle;

    rebuildOptionsMenu;
    rebuildOptionsMenuOnNextShow = 0;

    showmenu $menuOptionsTitle;
  ]

]


// Menu configuration

//
// Builds the options menu.
//
function buildOptionsMenu [

  newmenu $menuOptionsTitle;

  menuinit [ onBeforeOptionsMenuShow ]

  menuitem $menuItemGeneralOptionsTitle [ -1 ];
  generateOptionCheckBoxMenuItem "AutoActivateGemaMode";
  generateOptionCheckBoxMenuItem "ShowNotifications";
  menuitemslider $menuItemScoreTimeCompareValueOption 0 1 [$optionScoreTimeCompareValue] 1 $menuItemScoreTimeCompareValueOptionValues [ setPersistentValue optionScoreTimeCompareValue $arg1 ];
  generateOptionCheckBoxMenuItem "ShowNameOnScore";
  generateOptionCheckBoxMenuItem "ShowScoreWeapon";
  menuitemslider $menuItemShowTeamOption 0 5 [$optionShowMapRecordTeam] 1 $menuItemShowTeamOptionValues [ setPersistentValue optionShowMapRecordTeam $arg1 ];
  generateOptionCheckBoxMenuItem "ShowDifferenceToScoreCompareTime";
  generateOptionCheckBoxMenuItem "ShowMapRecordTimestamp";
  generateOptionCheckBoxMenuItem "ShowMapRecordTimestampTimePart";
  generateOptionCheckBoxMenuItem "AutoMigrateMapRecordsOnRevisionUpdate";
  menuitem;

  menuitem $menuItemTimeTargetOptionsTitle [ -1 ];

  menuitemslider $menuItemAutoSetTimeTargetModeOption 0 3 [$optionAutoSetTimeTargetMode] 1 $menuItemAutoSetTimeTargetModeValues [ setOptionAutoSetTimeTargetMode $arg1 ];
  generateOptionCheckBoxMenuItem "ShowDifferenceToTimeTarget";
  generateOptionCheckBoxMenuItem "ResetTimeTargetOnQuit";
  menuitem;

  menuitem $menuItemWeaponOptionsTitle [ -1 ];
  generateOptionCheckBoxMenuItem "EnableWeaponRecordsMenu";
  generateOptionCheckBoxMenuItem "ShowSecondaryWeaponModeAbortedMessages";
  generateOptionCheckBoxMenuItem "ShowMissingWeapons";
  menuitem;

  menuitem $menuItemMiscellaneousOptionsTitle [ -1 ];
  menuitemslider $menuItemMenuFontOption 1 (listlen (getAvailableMenuFontTypes)) [ (+ $optionMenuFontType 2) ] 1 (getAvailableMenuFontTypes) [ setPersistentValue optionMenuFontType (- $arg1 2) ];
  menuitemtextinput $menuItemMenuAboutMaximumLineWidthOption [ $optionMenuAboutMaximumLineWidth ][ setOptionMenuAboutMaximumLineWidth ];

  menuitem;
  menuitem $menuItemGoBackText [ closemenu $menuOptionsTitle ];

  rebuildOptionsMenuOnNextShow = 0;

]

//
// Deletes and rebuilds the options menu.
//
function rebuildOptionsMenu [
  delmenu $menuOptionsTitle;
  buildOptionsMenu;
]


buildOptionsMenu;
