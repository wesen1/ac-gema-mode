//
// @author wesen
// @copyright 2019-2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the "Delete Record" menu
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/output/map-record-output.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-loader.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-storage.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;


// Global Variables

//
// The deletion target map record for the delete record dialog (Default: "").
// An empty string targets all map records of the current map
//
// @var array $deleteTargetMapRecord
//
checkinit deleteTargetMapRecord "";


// Public Functions

//
// Shows the delete record menu if there is a record for the map with the specified weapon.
//
// @param string mapName ($arg1) The map name
// @param int weaponId ($arg2) The target weapon id
//
const showDeleteRecordMenu [

  mapName = $arg1;
  weaponId = $arg2;

  currentMapRecord = (loadWeaponMapRecord $mapName $weaponId);

  if (strcmp $currentMapRecord "") [
    // Prevents the current open menu from closing if this function was called on a menu item selection
    -1;
  ][
    deleteTargetMapRecord = $currentMapRecord;
    showmenu $menuDeleteRecordTitle;
  ]

]


//
// Returns the confirm question for the "Delete Record" menu.
// The returned text depends on the deletion target (all records or a single record).
//
// @param string mapName ($arg1) The map name
//
// @return string The confirm question for the "Delete Record" menu
//
const getDeleteRecordConfirmQuestion [

  mapName = $arg1;

  if (strcmp $deleteTargetMapRecord "") [
    // Delete all records
    return (format $menuItemDeleteAllRecordsConfirmQuestion $mapName);
  ][
    // Delete a single record
    weaponName = (getMapRecordWeaponName $deleteTargetMapRecord);
    return (format $menuItemDeleteWeaponRecordConfirmQuestion $mapName $weaponName);
  ]

]

//
// Returns the text for the "Confirm" menu item in the "Delete Record" menu.
// The returned text depends on the deletion target (all records or a single record).
//
// @return string The text for the "Confirm" menu item in the "Delete Record" menu
//
const getDeleteRecordConfirmText [

  if (strcmp $deleteTargetMapRecord "") [
    return $menuItemDeleteAllRecordsConfirm;
  ][
    return $menuItemDeleteWeaponRecordConfirm;
  ]

]

//
// Returns the text for the "Cancel" menu item in the "Delete Record" menu.
// The returned text depends on the deletion target (all records or a single record).
//
// @return string The text for the "Cancel" menu item in the "Delete Record" menu
//
const getDeleteRecordCancelText [

  if (strcmp $deleteTargetMapRecord "") [
    return $menuItemDeleteAllRecordsCancel;
  ][
    return $menuItemDeleteWeaponRecordCancel;
  ]

]

//
// Deletes either a single map record or all map records depending on the deletion target weapon id.
// Also closes the "Delete Record" menu.
//
// This function is called when the record deletion is confirmed by the user.
//
// @param string mapName ($arg1) The map name
//
const deleteRecordConfirmAction [

  mapName = $arg1;

  if (strcmp $deleteTargetMapRecord "") [
    deleteAllMapRecordsOfMapFromSavedCfg $mapName;
  ][
    deleteMapRecordFromSavedCfg $mapName (getMapRecordWeaponId $deleteTargetMapRecord);
  ]

  // Reset the deletion target weapon id
  deleteTargetMapRecord = "";

  closemenu $menuDeleteRecordTitle;

]

//
// Closes the "Delete Record" menu.
// This function is called when the record deletion is cancelled by the user.
//
const deleteRecordCancelAction [
  closemenu $menuDeleteRecordTitle;
]


// Menu configuration

newmenu $menuDeleteRecordTitle;
menuitemvar [ getDeleteRecordConfirmQuestion (curmap) ];
menuitem;
menuitemvar [ getDeleteRecordConfirmText ][ deleteRecordConfirmAction (curmap) ];
menuitemvar [ getDeleteRecordCancelText ][ deleteRecordCancelAction ];

// Initially select the cancel option
menuinitselection 3;
