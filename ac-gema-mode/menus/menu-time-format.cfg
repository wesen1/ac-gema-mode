//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Configuration for the "Change time formats" menu
//
// Requires:
//   * scripts/ac-gema-mode/colors.cfg
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/menus/dialogs/dialog-select-predefined-timeformat.cfg
//   * scripts/ac-gema-mode/menus/manager/menu-formatter.cfg
//   * scripts/ac-gema-mode/menus/manager/menu-manager.cfg
//   * scripts/ac-gema-mode/menus/util/custom-menu-items.cfg
//   * scripts/ac-gema-mode/menus/util/menu-utils.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/strings
//   * scripts/ac-gema-mode/time/time-formatter.cfg
//   * scripts/ac-gema-mode/time/time-formatter/time-unit-name-fetcher.cfg
//   * scripts/ac-gema-mode/time/time-format-manager.cfg
//   * scripts/ac-gema-mode/time/time-interval-array.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/value-persistor.cfg
//

persistidents 0;


// Global variables

//
// The index of the current selected time format scope in the $timeFormatScopes list
//
// @var int $selectedTimeFormatScope
//
cache selectedTimeFormatScopeIndex 0;

//
// The time interval that will be used for the time format previews
//
// @var array $timeFormatPreviewTimeInterval
//
cache timeFormatPreviewTimeInterval (createTimeIntervalArray 98765);

//
// Stores whether the help text should be displayed or not
//
// @var int $showMenuTimeFormatHelpText
//
cache showMenuTimeFormatHelpText 0;


// Public Functions

//
// Returns the time format for the current selected time format scope.
//
// @return string The time format for the current selected time format scope
//
function getTimeFormatForCurrentSelectedScope [
  return (getTimeFormatForScope (getCurrentSelectedTimeFormatScopeName));
]

//
// Event handler that is called when a new time format scope is selected.
//
// @param int timeFormatScopeIndex ($arg1) The index of the selected time format scope
//
function onTimeFormatScopeChanged [
  selectedTimeFormatScopeIndex = $arg1;
  softRefreshMenu "TimeFormat";
]

//
// Event handler that is called when the time format for the current selected time format scope was changed.
//
// @param string newTimeFormat ($arg1) The new time format string
//
function onTimeFormatEdited [
  setTimeFormatForScope (getCurrentSelectedTimeFormatScopeName) $arg1;
  softRefreshMenu "TimeFormat";
]

//
// Event handler that is called when a predefined time format is selected via the select-predefined-time-format dialog.
//
// @param string selectedTimeFormat ($arg1) The time format that was selected
//
function onPredefinedTimeFormatSelected [
  onTimeFormatEdited $arg1;
]


//
// Event handler that is called when the minutes part of the time format preview interval was edited.
//
// @param int newMinutesPart ($arg1) The new minutes part of the time format preview interval
//
function onTimeFormatPreviewTimeIntervalMinutesEdited [

  newTimeFormatPreviewTimeInterval = (changeTimeIntervalMinutes $timeFormatPreviewTimeInterval $arg1);
  if (strcmp $newTimeFormatPreviewTimeInterval "") [
    printGemaNotification (concat (c $colorError) (getLastTimeIntervalChangeErrorMessage));
  ][
    timeFormatPreviewTimeInterval = $newTimeFormatPreviewTimeInterval;
  ]

  softRefreshMenu "TimeFormat";

]

//
// Event handler that is called when the seconds part of the time format preview interval was edited.
//
// @param int newSecondsPart ($arg1) The new seconds part of the time format preview interval
//
function onTimeFormatPreviewTimeIntervalSecondsEdited [

  newTimeFormatPreviewTimeInterval = (changeTimeIntervalSeconds $timeFormatPreviewTimeInterval $arg1);
  if (strcmp $newTimeFormatPreviewTimeInterval "") [
    printGemaNotification (concat (c $colorError) (getLastTimeIntervalChangeErrorMessage));
  ][
    timeFormatPreviewTimeInterval = $newTimeFormatPreviewTimeInterval;
  ]

  softRefreshMenu "TimeFormat";

]

//
// Event handler that is called when the milliseconds part of the time format preview interval was edited.
//
// @param int newMillisecondsPart ($arg1) The new milliseconds part of the time format preview interval
//
function onTimeFormatPreviewTimeIntervalMillisecondsEdited [

  newTimeFormatPreviewTimeInterval = (changeTimeIntervalMilliseconds $timeFormatPreviewTimeInterval $arg1);
  if (strcmp $newTimeFormatPreviewTimeInterval "") [
    printGemaNotification (concat (c $colorError) (getLastTimeIntervalChangeErrorMessage));
  ][
    timeFormatPreviewTimeInterval = $newTimeFormatPreviewTimeInterval;
  ]

  softRefreshMenu "TimeFormat";

]

//
// Function that is called when the value of one of the time format preview interval integer input fields
// is changed to a value that is invalid for the integer input field.
//
// @param string newMenuItemValue ($arg1) The new value for the integer input item
//
function onInvalidTimeFormatPreviewTimeIntervalTimePartValueChange [
  softRefreshMenu "TimeFormat";
]

//
// Generates and returns the text for the time format preview menu item.
//
// @return string The text for the time format preview menu item
//
function generateTimeFormatPreviewMenuItemText [

  previewTimeStringColors = (getDefaultTimeColorsForTimeFormatScope (getCurrentSelectedTimeFormatScopeName));
  previewTimeString = (generateTimeStringFromTimeInterval $timeFormatPreviewTimeInterval $previewTimeStringColors (getTimeFormatForCurrentSelectedScope))

  return (format $menuItemTimeFormatPreviewText $previewTimeString);

]


//
// Event handler that is called when the custom minutes time unit name was edited.
//
// @param string newMinutesTimeUnitName ($arg1) The new minutes time unit name
//
function onCustomMinutesTimeUnitNameEdited [
  setPersistentValue optionTimeUnitNameMinutesCustom $arg1;
  softRefreshMenu "TimeFormat";
]

//
// Event handler that is called when the custom seconds time unit name was edited.
//
// @param string newSecondsTimeUnitName ($arg1) The new seconds time unit name
//
function onCustomSecondsTimeUnitNameEdited [
  setPersistentValue optionTimeUnitNameSecondsCustom $arg1;
  softRefreshMenu "TimeFormat";
]

//
// Event handler that is called when the custom milliseconds time unit name was edited.
//
// @param string newMillisecondsTimeUnitName ($arg1) The new milliseconds time unit name
//
function onCustomMillisecondsTimeUnitNameEdited [
  setPersistentValue optionTimeUnitNameMillisecondsCustom $arg1;
  softRefreshMenu "TimeFormat";
]


//
// Event handler that is called when the "Show Help" checkbox is toggled.
//
// @param int newShowHelpCheckboxState ($arg1) The new state of the "Show Help" checkbox
//
function onShowTimeFormatHelpTextCheckBoxToggled [
  showMenuTimeFormatHelpText = $arg1;

  // The hard refresh must be delayed to prevent a game crash
  // Probably happens because the "Show Help" checkbox is deleted before its toggle is completed
  sleep 1 [
    hardRefreshMenu "TimeFormat" 13;
  ]
]


//
// Menu font formatter that reformats the time format menu for the current font.
// This just makes the time format menu rebuild itself the next time it is shown.
//
function formatTimeFormatMenuForFont [
  rebuildMenuOnNextShow "TimeFormat";
]


// Private Functions

//
// Returns the time format scope name of the current selected time format scope.
//
// @return string The time format scope name of the current selected time format scope
//
function getCurrentSelectedTimeFormatScopeName [
  return (at (getTimeFormatScopes) $selectedTimeFormatScopeIndex);
]


// Menu configuration

addMenuFontFormatter formatTimeFormatMenuForFont;

//
// Builds the "Time Format" menu.
//
function buildTimeFormatMenu [

  menuitemslider $menuItemTimeFormatScopeTitle 0 (- (listlen (getTimeFormatScopes)) 1) [$selectedTimeFormatScopeIndex] 1 (getTimeFormatScopes) [ onTimeFormatScopeChanged ];
  menuitemtextinput $menuItemTimeFormatTitle [ getTimeFormatForCurrentSelectedScope ][ onTimeFormatEdited ][] 100;
  menuitem $menuItemSelectPredefinedTimeFormatText [ showSelectPredefinedTimeFormatDialog "onPredefinedTimeFormatSelected" ];
  menuitem;

  menuItemIntegerInput $menuItemTimeFormatPreviewTimeMinutesTitle [ getTimeIntervalMinutes $timeFormatPreviewTimeInterval ][ onTimeFormatPreviewTimeIntervalMinutesEdited ][onInvalidTimeFormatPreviewTimeIntervalTimePartValueChange] 2 [0 35791];
  menuItemIntegerInput $menuItemTimeFormatPreviewTimeSecondsTitle [ getTimeIntervalSeconds $timeFormatPreviewTimeInterval ][ onTimeFormatPreviewTimeIntervalSecondsEdited ][onInvalidTimeFormatPreviewTimeIntervalTimePartValueChange] 2 [0 59];
  menuItemIntegerInput $menuItemTimeFormatPreviewTimeMillisecondsTitle [ getTimeIntervalMilliseconds $timeFormatPreviewTimeInterval ][ onTimeFormatPreviewTimeIntervalMillisecondsEdited ][onInvalidTimeFormatPreviewTimeIntervalTimePartValueChange] 3 [0 999];
  menuitemvar [ generateTimeFormatPreviewMenuItemText ];
  menuitem;

  menuitemtextinput $menuItemCustomMinutesUnitNameTitle [ return $optionTimeUnitNameMinutesCustom ] "onCustomMinutesTimeUnitNameEdited";
  menuitemtextinput $menuItemCustomSecondsUnitNameTitle [ return $optionTimeUnitNameSecondsCustom ] "onCustomSecondsTimeUnitNameEdited";
  menuitemtextinput $menuItemCustomMillisecondsUnitNameTitle [ return $optionTimeUnitNameMillisecondsCustom ] "onCustomMillisecondsTimeUnitNameEdited";
  menuitem;

  if ($showMenuTimeFormatHelpText) [
    // Help text is currently shown
    menuItemShowHelpCheckboxText = $menuItemHideHelpText;
  ][
    // Help text is currently hidden
    menuItemShowHelpCheckboxText = $menuItemShowHelpText;
  ]

  // Using a checkbox here works much smoother than using a normal menuitem
  menuitemcheckbox $menuItemShowHelpCheckboxText $showMenuTimeFormatHelpText [ onShowTimeFormatHelpTextCheckBoxToggled ];

  if ($showMenuTimeFormatHelpText) [
    menuitem;
    generateTextMenuItems $menuTimeFormatHelpText 2700 "";
  ]

  menuitem;
  menuitem $menuItemGoBackText [ closemenu $menuTimeFormatTitle ];

]
