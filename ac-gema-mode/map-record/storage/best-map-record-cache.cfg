//
// @author wesen
// @copyright 2019-2020 wesen <wesen-ac@web.de>
//

//
// Best map record cache module for ac-gema-mode
//
// Handles caching of the best map record for the current map.
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/map-record-comparator.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-loader.cfg
//

persistidents 0;


//
// Stores the best map record of the current map
//
// @var array $cachedBestMapRecord
//
checkinit cachedBestMapRecord "";


// Public Functions

//
// Returns the best map record for a map.
// Uses the cache if the target map is the current map.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
// @return array The best map record for the specified map
//
const getBestMapRecord [

  mapName = $arg1;
  mapRevision = $arg2;

  if (&& (! (strcmp $cachedBestMapRecord "")) (isMapRecordForMapAndRevision $cachedBestMapRecord $mapName $mapRevision)) [
  // There is a cached map record and it is one for the target map

    cachedBestMapRecordIsForSpecifiedMap = 1;
  ][
    cachedBestMapRecordIsForSpecifiedMap = 0;
  ]

  if (&& (strcmp $mapName (curmap)) (= $mapRevision $curmaprevision)) [
    // The target map is the current map, check if the cache can be used
    if (! $cachedBestMapRecordIsForSpecifiedMap) [
      cachedBestMapRecord = (loadBestMapRecord $mapName $mapRevision);
    ]

    return $cachedBestMapRecord;

  ][
    // The target map is not the current map
    if ($cachedBestMapRecordIsForSpecifiedMap) [
      return $cachedBestMapRecord;
    ][
      return (loadBestMapRecord $mapName $mapRevision);
    ]
  ]

]


// Event Handlers

//
// Event handler that is called after a map record was saved.
//
// @param array mapRecord ($arg1) The map record
//
checkinit onMapRecordSaved [

  mapRecord = $arg1;
  if (&& (isMapRecordForMapAndRevision $mapRecord (curmap) $curmaprevision) (calculateIsNewBestMapRecord $mapRecord)) [
    // The saved record is for the current map and it is a new best map record
    cachedBestMapRecord = $mapRecord;
  ]

]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array mapRecord ($arg1) The map record
//
checkinit onWeaponRecordDeleted [

  mapRecord = $arg1;
  if (strcmp $mapRecord $cachedBestMapRecord) [
    // The record that was deleted was the best map record for the current map
    cachedBestMapRecord = (loadBestMapRecord (getMapRecordMapName $mapRecord) (getMapRecordMapRevision $mapRecord));
  ]

]

//
// Event handler that is called after all records for a map in a specific revision were deleted.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
checkinit onAllRecordsOfMapInRevisionDeleted [

  if (&& (! (strcmp $cachedBestMapRecord "")) (isMapRecordForMapAndRevision $cachedBestMapRecord $arg1 $arg2)) [
    // All map records for the current map were deleted
    cachedBestMapRecord = "";
  ]

]
