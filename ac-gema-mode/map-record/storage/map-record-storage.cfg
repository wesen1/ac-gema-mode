//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

//
// Map record storage module for ac-gema-mode
//
// Handles reading and writing of map records from and to saved.cfg.
// The records are saved in a two dimensional array per map
// The structure of the array is [<weapon id>] => <best time>
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/util/array-utils.cfg
//

persistidents 0;


// Public Functions

//
// Writes a map record to saved.cfg.
//
// @param array $arg1 The map record
//
const writeMapRecordToSavedCfg [

  mapRecord = $arg1;
  mapRecordScoreTime = (getMapRecordScoreTime $mapRecord);
  mapRecordWeaponId = (getMapRecordWeaponId $mapRecord);

  mapRecordListAlias = (getMapRecordListAlias (getMapRecordMapName $mapRecord));
  mapRecordList = (loadMapRecordList $mapRecordListAlias);
  mapRecordList = (array_set $mapRecordList (concat $mapRecordWeaponId 0) $mapRecordScoreTime);

  // Set persistidents to 1 so that variables and their current value will be stored in saved.cfg on the next
  // writecfg call
  persistidents 1;

  // Set the value for a variable that is named like the value that is stored in $mapRecordListAlias
  $mapRecordListAlias = $mapRecordList;

  // Manually trigger writecfg to immediately write the updated map record list to saved.cfg
  writecfg;

  // Turn off persistidents
  persistidents 0;

  onMapRecordSavedAfter $mapRecord;

]

//
// Loads and returns a map record for a specified map with a specific weapon from saved.cfg.
//
// @param string $arg1 The map name
// @param int $arg2 The weapon id
//
// @return array The map record or an empty string if no record was found
//
const readMapRecordFromSavedCfg [

  mapName = $arg1;
  weaponId = $arg2;

  mapRecordListAlias = (getMapRecordListAlias $mapName);

  // Fetch the score time from the list of map records
  mapRecordList = (loadMapRecordList $mapRecordListAlias);
  mapRecordScoreTime = (array_get $mapRecordList $weaponId);

  if (! (strcmp $mapRecordScoreTime "")) [
    return (createMapRecordArray $mapName $mapRecordScoreTime $weaponId);
  ]

]

//
// Deletes a map record from saved.cfg.
//
// @param string mapName ($arg1) The map name of the record to delete
// @param int weaponId ($arg2) The weapon id of the record to delete
//
const deleteMapRecordFromSavedCfg [

  mapName = $arg1;
  weaponId = $arg2;

  mapRecord = (readMapRecordFromSavedCfg $mapName $weaponId);
  if (! (strcmp $mapRecord "")) [

    mapRecordListAlias = (getMapRecordListAlias $mapName);
    mapRecordList = (getalias $mapRecordListAlias);
    mapRecordList = (array_set $mapRecordList $weaponId "");

    // Set persistidents to 1 to make sure that the changes to the map record list are saved in saved.cfg
    persistidents 1;

    if (strcmp $mapRecordList "") [
      delalias $mapRecordListAlias;
    ][
      $mapRecordListAlias = $mapRecordList;
    ]

    persistidents 0;

    printGemaNotification $messageRecordDeleted;

    onDeleteWeaponRecordAfter $mapRecord;
  ]

]

//
// Deletes all map records for a specific map.
//
// @param string $arg1 The map name
//
const deleteAllMapRecordsOfMapFromSavedCfg [

  mapName = $arg1;
  mapRecordListAlias = (getMapRecordListAlias $mapName);
  if (isIdent $mapRecordListAlias)[

    // Set persistidents to 1 to make sure that the changes to the map record list are saved in saved.cfg
    persistidents 1;
    delalias $mapRecordListAlias;
    persistidents 0;

    onDeleteAllRecordsAfter $mapName;

  ]

]


// Private Functions

//
// Returns the map record list alias name for a specific map.
// This is the name of the variable in which the records for the map are saved.
//
// @param string $arg1 The map name
//
// @return string The map record list alias
//
const getMapRecordListAlias [
  mapName = $arg1;
  return (concatword "::gema_records_" $mapName);
]

//
// Loads and returns a map record list from a given map record list alias name.
//
// @param string $arg1 The map record list alias name
//
// @return array The map record list or an empty string if no map record list with that alias name exists
//
const loadMapRecordList [

  mapRecordListAlias = $arg1;

  if (isIdent $mapRecordListAlias) [
    return (getalias $mapRecordListAlias);
  ][
    return "";
  ]

]


// Custom Events

//
// Event handler that is called after a map record was saved.
//
// @param array $arg1 The map record
//
checkinit onMapRecordSavedAfter [
]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array $arg1 The map record
//
checkinit onDeleteWeaponRecordAfter [
]

//
// Event handler that is called after all records for a map were deleted at once.
//
// @param string $arg1 The map name
//
checkinit onDeleteAllRecordsAfter [
]
