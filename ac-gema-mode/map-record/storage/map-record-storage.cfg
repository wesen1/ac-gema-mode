//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

//
// Map record storage module for ac-gema-mode
//
// Handles saving, loading and deleting of map records.
// The records are saved in a two dimensional array per map
// The structure of the array is [<weapon id>] => <best time>
//
// Requires:
//   * scripts/ac-gema-mode/map-record/storage/map-record.cfg
//   * scripts/ac-gema-mode/util/array-utils.cfg
//

persistidents 0;


// Public Functions

//
// Saves a map record if it is better than the previous one.
//
// @param array $arg1 The map record
//
const saveMapRecord [

  saverecord_mapRecord = $arg1;

  mapName = (getMapRecordMapName $saverecord_mapRecord);
  weaponId = (getMapRecordWeaponId $saverecord_mapRecord);
  saverecord_scoreTime = (getMapRecordScoreTime $saverecord_mapRecord);

  currentWeaponMapRecord = (loadWeaponMapRecord $mapName $weaponId);

  if (|| (strcmp $currentWeaponMapRecord "") (< $saverecord_scoreTime (getMapRecordScoreTime $currentWeaponMapRecord))) [
    // There is no record for the map or the new record is faster than the existing one

    mapRecordListAlias = (getMapRecordListAlias $mapName);
    if (isIdent $mapRecordListAlias) [
      mapRecordList = (getalias $mapRecordListAlias);
    ][
      mapRecordList = "";
    ]

    mapRecordList = (array_set $mapRecordList (concat $weaponId 0) $saverecord_scoreTime);

    // Save the map record list in a variable that is named like the contens of the $mapRecordListAlias variable
    // Must set persistidents to 1 for this to make sure that the map record list will be saved in saved.cfg
    persistidents 1;
    $mapRecordListAlias = $mapRecordList;
    persistidents 0;

    onMapRecordSavedAfter $saverecord_mapRecord;
  ]

]

//
// Loads and returns a map record for a specified map with a specific weapon.
//
// @param string $arg1 The map name
// @param int $arg2 The weapon id
//
// @return array The map record
//
const loadWeaponMapRecord [

  mapName = $arg1;
  weaponId = $arg2;

  mapRecordListAlias = (getMapRecordListAlias $mapName);
  if (isIdent $mapRecordListAlias)[

    // Fetch the score time from the list of map records
    mapRecordList = (getalias $mapRecordListAlias);
    mapRecordScoreTime = (array_get $mapRecordList $weaponId);

    if (! (strcmp $mapRecordScoreTime "")) [
      return (createMapRecordArray $mapName $mapRecordScoreTime $weaponId);
    ]
  ]

]

//
// Deletes a record.
//
// @param array $arg1 The map record
//
const deleteMapRecord [

  mapRecord = $arg1;

  mapName = (getMapRecordMapName $mapRecord);
  weaponId = (getMapRecordWeaponId $mapRecord);

  mapRecordListAlias = (getMapRecordListAlias $mapName);
  if (isIdent $mapRecordListAlias)[

    mapRecordList = (getalias $mapRecordListAlias);
    mapRecordList = (array_set $mapRecordList $weaponId "");

    // Set persistidents to 1 to make sure that the changes to the map record list are saved in saved.cfg
    persistidents 1;

    if (strcmp $mapRecordList "") [
      delalias $mapRecordListAlias;
    ][
      $mapRecordListAlias = $mapRecordList;
    ]

    persistidents 0;

    printGemaNotification $messageRecordDeleted;

    onDeleteWeaponRecordAfter $mapRecord;
  ]

]

//
// Deletes all map records for a specified map.
//
// @param string $arg1 The map name
//
const deleteAllMapRecords [

  mapName = $arg1;
  mapRecordListAlias = (getMapRecordListAlias $mapName);
  if (isIdent $mapRecordListAlias)[

    // Set persistidents to 1 to make sure that the changes to the map record list are saved in saved.cfg
    persistidents 1;
    delalias $mapRecordListAlias;
    persistidents 0;

    onDeleteAllRecordsAfter $mapName;

  ]

]


// Private Functions

//
// Returns the map record list alias for a specific map.
//
// @param string $arg1 The map name
//
// @return string The map record list alias
//
const getMapRecordListAlias [
  mapName = $arg1;
  return (concatword "::gema_records_" $mapName);
]


// Custom Events

//
// Event handler that is called after a map record was saved.
//
// @param array $arg1 The map record
//
checkinit onMapRecordSavedAfter [
]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array $arg1 The map record
//
checkinit onDeleteWeaponRecordAfter [
]

//
// Event handler that is called after all records for a map were deleted at once.
//
// @param string $arg1 The map name
//
checkinit onDeleteAllRecordsAfter [
]
