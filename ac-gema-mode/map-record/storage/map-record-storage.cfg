//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Map record storage module for ac-gema-mode
//
// Handles the reading and writing of map records from and to the saved.cfg file.
// The records are saved in a two dimensional array per map.
// The structure of these arrays is: [ <weapon id> => <score time>, ... ]
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-revision-storage.cfg
//   * scripts/ac-gema-mode/util/array-utils.cfg
//   * scripts/ac-gema-mode/util/value-loader.cfg
//   * scripts/ac-gema-mode/util/value-persistor.cfg
//

persistidents 0;


// Public Functions

//
// Writes a map record to the saved.cfg file.
//
// @param array mapRecord ($arg1) The map record to write
// @param int doWriteCfg ($arg2) 1 to call writecfg, 0 otherwise
//
const writeMapRecordToSavedCfg [

  mapRecord = $arg1;
  doWriteCfg = $arg2;

  // Create a map record info array with the data that will be stored in the map record list
  mapRecordScoreTime = (getMapRecordScoreTime $mapRecord);
  mapRecordTeamId = (getMapRecordTeamId $mapRecord);
  mapRecordTimestamp = (getMapRecordTimestampString $mapRecord);
  mapRecordInfo = (concat $mapRecordScoreTime $mapRecordTeamId $mapRecordTimestamp);

  mapRecordMapName = (getMapRecordMapName $mapRecord);
  mapRecordMapRevision = (getMapRecordMapRevision $mapRecord);

  // Add the map record info array to the map record list
  mapRecordListAlias = (getMapRecordListAlias $mapRecordMapName $mapRecordMapRevision);
  mapRecordList = (loadValue $mapRecordListAlias);
  updatedMapRecordList = (array_set $mapRecordList (getMapRecordWeaponId $mapRecord) $mapRecordInfo 2);
  setPersistentValue $mapRecordListAlias $updatedMapRecordList 0;

  // Add the map revision to the map revision list
  addMapRevisionWithRecordsIfIsNew $mapName $mapRevision;

  if ($doWriteCfg) [
    // Delay the writecfg call to avoid a small amount of lag
    sleep 100 [
      writecfg;
    ]
  ]

  // The event is not delayed for now because the $mapRecord variable will probably be overwritten somewhere
  // else before the delayed code is called and that would cause the event to contain the wrong map record
  onMapRecordSaved $mapRecord;

]

//
// Loads and returns a map record for a specified map with a specific weapon from the saved.cfg file.
//
// @param string mapName ($arg1) The map name
// @param int weaponId ($arg2) The weapon id
// @param int mapRevision ($arg3) The map revision
//
// @return array The map record or an empty string if no record was found
//
const readMapRecordFromSavedCfg [

  mapName = $arg1;
  weaponId = $arg2;
  mapRevision = $arg3;

  mapRecordListAlias = (getMapRecordListAlias $mapName $mapRevision);

  // Fetch the score time from the list of map records
  mapRecordList = (loadValue $mapRecordListAlias);
  mapRecordScoreInfo = (array_get $mapRecordList $weaponId 2);

  mapRecordScoreTime = (at $mapRecordScoreInfo 0);
  mapRecordTeamId = (at $mapRecordScoreInfo 1);
  mapRecordTimestamp = (at $mapRecordScoreInfo 2);

  if (! (strcmp $mapRecordScoreTime "")) [
    return (createMapRecordArray $mapName $mapRevision $mapRecordScoreTime $weaponId $mapRecordTeamId $mapRecordTimestamp);
  ]

]

//
// Deletes a map record from saved.cfg.
//
// @param string mapName ($arg1) The map name of the record to delete
// @param int weaponId ($arg2) The weapon id of the record to delete
// @param int mapRevision ($arg3) The map revision
//
const deleteMapRecordFromSavedCfg [

  mapName = $arg1;
  weaponId = $arg2;
  mapRevision = $arg3;

  mapRecord = (readMapRecordFromSavedCfg $mapName $weaponId $mapRevision);
  if (! (strcmp $mapRecord "")) [

    mapRecordListAlias = (getMapRecordListAlias $mapName $mapRevision);
    mapRecordList = (loadValue $mapRecordListAlias);
    updatedMapRecordList = (array_set $mapRecordList $weaponId "" 2);

    setPersistentValue $mapRecordListAlias $updatedMapRecordList 1;
    onWeaponRecordDeleted $mapRecord;
  ]

]

//
// Deletes all map records for a specified map in a specified revision.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
const deleteAllMapRecordsOfMapInRevisionFromSavedCfg [

  mapName = $arg1;
  mapRevision = $arg2;

  if (= $numargs 3) [
    writeDataToSavedCfg = $arg3;
  ][
    writeDataToSavedCfg = 1;
  ]

  mapRecordListAlias = (getMapRecordListAlias $mapName $mapRevision);
  if (isIdent $mapRecordListAlias)[
    setPersistentValue $mapRecordListAlias "" 0;
    onAllRecordsOfMapInRevisionDeleted $mapName $mapRevision;
  ]

  removeMapRevisionIfExists $mapName $mapRevision;

  if ($writeDataToSavedCfg) [
    writecfg;
  ]

]

//
// Deletes all map records for a specified map.
//
// @param string mapName ($arg1) The map name
//
// @return int 1 if the map records were deleted, 0 otherwise
//
const deleteAllMapRecordsOfMapFromSavedCfg [

  looplist (getMapRevisions $arg1) mapRevision [
    deleteAllMapRecordsOfMapInRevisionFromSavedCfg $mapName $mapRevision 0;
  ]

  writecfg;

]


// Private Functions

//
// Returns the map record list alias name for a specific map.
// This is the name of the variable in which the records for the map are saved.
//
// @param string mapName ($arg1) The map name
// @param string mapRevision ($arg2) The map revision
//
// @return string The map record list alias
//
// @example `getMapRecordListAlias gibbed-gema11 27` Returns ::gema_records_gibbed-gema11_27
//
const getMapRecordListAlias [
  return (concatword "::gema_records_" $arg1 "_" $arg2);
]


// Custom Events

//
// Event handler that is called after a map record was saved.
//
// @param array mapRecord ($arg1) The map record
//
checkinit onMapRecordSaved [
]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array mapRecord ($arg1) The map record
//
checkinit onWeaponRecordDeleted [
]

//
// Event handler that is called after all records for a map in a specific revision were deleted.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
checkinit onAllRecordsOfMapInRevisionDeleted [
]
