//
// @author wesen
// @copyright 2019 wesen <wesen-ac@web.de>
//

//
// Best map record loader module for ac-gema-mode
//
// Provides functions to fetch the best map record for a map
//
// Requires:
//   * scripts/ac-gema-mode/map-record/storage/map-record.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-storage.cfg
//

persistidents 0;

//
// Stores the best map record of the current map
//
// @var array $cachedBestMapRecord
//
checkinit cachedBestMapRecord "";


// Public Functions

//
// Returns the best map record for a map.
// Uses the cache if the target map is the current map.
//
// @param string $arg1 The map name
//
// @return array The best map record for the specified map
//
const getBestMapRecord [

  mapName = $arg1;
  if (strcmp $mapName (curmap)) [
    // The target map is the current map, check if the cache can be used

    if (|| (strcmp $cachedBestMapRecord "") (! (strcmp (getMapRecordMapName $cachedBestMapRecord) $mapName))) [
      // There is no cached map record or it is for a different map than the current one
      cachedBestMapRecord = (loadBestMapRecord $mapName);
    ]

    return $cachedBestMapRecord;

  ][
    // The target map is not the current map, so the cache can't be used
    return (loadBestMapRecord $mapName);
  ]

]


// Private Functions

//
// Returns the best map record for a specified map.
// Will return an empty string if there is no map record for the target map.
//
// @param string $arg1 The map name
//
// @return array The best map record
//
const loadBestMapRecord [

  mapName = $arg1;

  bestMapRecord = "";
  bestMapRecordScoreTime = -1;

  looplist $allWeaponIds weaponId [

    mapRecord = (loadMapRecord $mapName $weaponId);

    if (! (strcmp $mapRecord "")) [

      mapRecordScoreTime = (getMapRecordScoreTime $mapRecord);
      if (|| (strcmp $bestMapRecord "") (> $bestMapRecordScoreTime $mapRecordScoreTime)) [
        // No best map record was found yet or this map record is faster than the current one
        bestMapRecord = $mapRecord;
        bestMapRecordScoreTime = $mapRecordScoreTime;
      ]
    ]

  ]

  return $bestMapRecord;

]


// Event Handlers

//
// Event handler that is called after a map record was saved.
//
// @param array $arg1 The map record
//
checkinit onMapRecordSavedAfter [

  mapRecord = $arg1;

  if (strcmp (getMapRecordMapName $mapRecord) (curmap)) [
    // The saved record is for the current map

    if (|| (strcmp $cachedBestMapRecord "") (< (getMapRecordScoreTime $mapRecord) (getMapRecordScoreTime $cachedBestMapRecord))) [
      // The cached best map record is empty or the new saved record is faster than the cached one
      cachedBestMapRecord = $mapRecord;
    ]
  ]

]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array $arg1 The map record
//
checkinit onDeleteWeaponRecordAfter [

  mapRecord = $arg1;
  if (= $mapRecord $cachedBestMapRecord) [
    // The record that was deleted was the best map record for the current map
    cachedBestMapRecord = (loadBestMapRecord (getMapRecordMapName $mapRecord));
  ]

]

//
// Event handler that is called after all records for a map were deleted at once.
//
// @param string $arg1 The map name
//
checkinit onDeleteAllRecordsAfter [

  mapName = $arg1;
  if (strcmp $mapName (curmap)) [
    // All map records for the current map were deleted
    cachedBestMapRecord = "";
  ]

]
