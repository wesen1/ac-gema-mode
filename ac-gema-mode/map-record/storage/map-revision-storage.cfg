//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Map revision storage module for ac-gema-mode
//
// Handles keeping track of gema map revisions for which the player has records.
// The revisions are saved in map revision list arrays.
//
// Requires:
//   * scripts/ac-gema-mode/map-record/storage/map-revision-list-array.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/util/list-utils.cfg
//   * scripts/ac-gema-mode/util/value-loader.cfg
//   * scripts/ac-gema-mode/util/value-persistor.cfg
//

persistidents 0;


// Public Functions

//
// Fetches and returns the stored current map revision for a given map.
//
// @param string mapName ($arg1) The map name
//
// @return int The map revision or an empty string if there is no stored current map revision for that map
//
const getCurrentMapRevision [
  mapRevisionList = (loadMapRevisionList $arg1);
  return (getMapRevisionListCurrentMapRevision $mapRevisionList);
]

//
// Fetches and returns the stored map revisions with map records for a given map.
//
// @param string mapName ($arg1) The map name
//
// @return int[] The map revisions or an empty string if there are no stored map revisions with map records for that map
//
const getMapRevisionsWithRecords [
  mapRevisionList = (loadMapRevisionList $arg1);
  return (getMapRevisionListMapRevisionsWithRecords $mapRevisionList);
]

//
// Fetches and returns all stored map revisions for a given map.
// This will load the map revisions with map records and add the current map revision to that list if it
// isn't already contained in it.
//
// @param string mapName ($arg1) The map name
//
// @return int[] The map revisions
//
const getAllStoredMapRevisions [

  mapRevisionList = (loadMapRevisionList $arg1);

  mapRevisions = (getMapRevisionListMapRevisionsWithRecords $mapRevisionList);
  currentMapRevision = (getMapRevisionListCurrentMapRevision $mapRevisionList);

  if (= (findlist $mapRevisions $currentMapRevision) -1) [
    // The current map revision does not exist in the list of map revisions with records
    add2list mapRevisions $currentMapRevision;
  ]

  return $mapRevisions;

]


//
// Adds and saves a map revision to the list of map revisions with map records if it is not contained in it yet.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
const addMapRevisionWithRecordsIfIsNew [

  mapName = $arg1;
  mapRevision = $arg2;

  mapRevisionListAlias = (getMapRevisionListAlias $mapName);
  mapRevisionList = (loadMapRevisionList $mapName);

  mapRevisions = (getMapRevisionListMapRevisionsWithRecords $mapRevisionList);
  if (= (findlist $mapRevisions $mapRevision) -1) [
    // The map revision does not exist in the list of map revisions
    add2list mapRevisions $mapRevision;
    mapRevisions = (sortlistnumeric $mapRevisions);

    mapRevisionList = (setMapRevisionListMapRevisionsWithRecords $mapRevisionList $mapRevisions);
    setPersistentValue $mapRevisionListAlias $mapRevisionList;
  ]

]

//
// Removes a stored map revision for a given map if it exists in the list of map revisions with records.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
const removeMapRevisionIfExists [

  mapName = $arg1;
  mapRevision = $arg2;

  mapRevisionListAlias = (getMapRevisionListAlias $mapName);
  mapRevisionList = (loadMapRevisionList $mapName);

  mapRevisions = (getMapRevisionListMapRevisionsWithRecords $mapRevisionList);
  updatedMapRevisions = (listremove $mapRevisions $mapRevision);

  if (! (strcmp $mapRevisions $updatedMapRevisions)) [
    // The list of map revisions changed
    mapRevisionList = (setMapRevisionListMapRevisionsWithRecords $mapRevisionList $mapRevisions);
    setPersistentValue $mapRevisionListAlias $mapRevisionList;
  ]

]


// Private Functions

//
// Loads and returns a map revision list from a given map name.
//
// @param string mapName ($arg1) The map name
//
// @return array The map revision list
//
const loadMapRevisionList [

  mapRevisionList = (loadValue (getMapRevisionListAlias $arg1));
  if (strcmp $mapRevisionList "") [
    mapRevisionList = (createMapRevisionListArray);
  ]

  return $mapRevisionList

]

//
// Updates the current map revision for a given map with a given map revision if required.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
const updateCurrentMapRevision [

  mapName = $arg1;
  mapRevision = $arg2;

  mapRevisionList = (loadMapRevisionList $mapName);
  if (! (strcmp (getMapRevisionListCurrentMapRevision $mapRevisionList) $mapRevision)) [
    // The stored current map revision does not match the actual current map revision
    mapRevisionListAlias = (getMapRevisionListAlias $mapName);
    mapRevisionList = (setMapRevisionListCurrentMapRevision $mapRevisionList $mapRevision);
    printGemaNotification (format $messageUpdatedCurrentMapRevision $mapName $mapRevision);
    setPersistentValue $mapRevisionListAlias $mapRevisionList 1;
  ]

]

//
// Returns the map revision list alias name for a specific map.
// This is the name of the variable in which the revisions with saved map records for the map are saved.
//
// @param string mapName ($arg1) The map name
//
// @return string The map revision list alias
//
// @example `getMapRevisionListAlias gibbed-gema11` Returns ::gema_map_revisions_gibbed-gema11
//
const getMapRevisionListAlias [
  return (concatword "::gema_map_revisions_" $arg1);
]


// Event Handlers

//
// Event handler that is called after the gema mode state auto change checks on map start are complete.
//
// @param int newGemaModeState ($arg1) The new gema mode state
//
checkinit onMapStartGemaModeStateAutoChangeChecksFinished [
  if (= $arg1 1) [
    updateCurrentMapRevision (curmap) $curmaprevision;
  ]
]
