//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

//
// Console map record printer module for ac-gema-mode
//
// Handles printing of map records to the console at the top of the screen
//
// Requires:
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/map-record/storage/best-map-record-loader.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-storage.cfg
//   * scripts/ac-gema-mode/util/time-parser.cfg
//


// Options

//
// Option to show the player name in the console score string
//
// @var int $optionAutoActivateGemaMode
//
check2init optionShowNameOnScore 0;

//
// Option to show the score weapon in the console score string
//
// @var int $optionShowScoreWeapon
//
check2init optionShowScoreWeapon 1;

//
// Option to set the comparison value for score times
//
// 0: Best map record
// 1: Best score weapon record
//
check2init optionScoreTimeCompareValue 1;


persistidents 0;

//
// Generates and returns the map record output string for when the player scores.
//
// @param array $arg1 The map record
//
// @return string The map record output string for when the player scores
//
const getMapRecordScoreString [

  mapRecord = $arg1;

  if ($optionShowNameOnScore) [
    scorePlayerName = (format $messageScoreNamePlayerName (player1 name));
  ][
    scorePlayerName = $messageScoreNameYou;
  ]

  scoreTimeString = (generateTimeString (getMapRecordScoreTime $mapRecord) 1);
  mapRecordString = (format $messageMapRecordScore $scorePlayerName $scoreTimeString);

  if ($optionShowScoreWeapon) [
    weaponInfoString = (format $messageMapRecordScoreWeapon (getMapRecordWeaponName $mapRecord));
    mapRecordString = (concat $mapRecordString $weaponInfoString);
  ]

  return $mapRecordString;

]

//
// Returns the record status string (new record, tied record, no new record).
// Must be called before the new record was saved.
//
// @param array $arg1 The map record
//
// @return string The record status string
//
const getMapRecordStatusString [

  mapRecord = $arg1;
  bestMapRecord = (getBestMapRecord (getMapRecordMapName $mapRecord));

  if (strcmp $bestMapRecord "") [
    // There is no record to compare the record time to, so no need to calculate the difference
    return $messageFasterThanBestMapRecord;
  ][

    differenceToBestMapRecordScoreTime = (- (getMapRecordScoreTime $bestMapRecord) (getMapRecordScoreTime $mapRecord));

    if (> $differenceToBestMapRecordScoreTime 0) [
      // The existing best map record is slower than the new map record

      // Always use the best map record status for new best map records
      return (getBestMapRecordStatusString $mapRecord $differenceToBestMapRecordScoreTime);
    ][

      if (= $optionScoreTimeCompareValue 0) [
        return (getBestMapRecordStatusString $mapRecord $differenceToBestMapRecordScoreTime);
      ][
        return (getWeaponMapRecordStatusString $mapRecord);
      ]

    ]
  ]

]


// Private Functions

//
// Returns the record status (new best record, tied record, no new record) compared to the best map record.
//
// @param array $arg1 The map record
// @param int $arg2 The difference of the map record to the best map record in milliseconds
//
// @return string The record status compared to the best map record
//
const getBestMapRecordStatusString [

  mapRecord = $arg1;
  differenceToBestMapRecordScoreTime = $arg2;

  if (> $differenceToBestMapRecordScoreTime 0) [
    // The existing best map record is slower than the new map record
    return $messageFasterThanBestMapRecord;

  ][

    if (= $differenceToBestMapRecordScoreTime 0) [
      return $messageTiedBestMapRecord;
    ][
      // Slower time than best time
      return $messageSlowerThanBestMapRecord;

    ]
  ]

]

//
// Returns the record status (new record, tied record, no new record) compared to the weapon map record.
//
// @param array $arg1 The map record
//
// @return string The record status compared to the weapon map record
//
const getWeaponMapRecordStatusString [

  status_mapRecord = $arg1;
  currentWeaponMapRecord = (loadMapRecord (getMapRecordMapName $status_mapRecord) (getMapRecordWeaponId $status_mapRecord));

  weaponName = (getMapRecordWeaponName $status_mapRecord);

  if (strcmp $currentWeaponMapRecord "") [
    // This is the first record with that weapon, so there is no time to compare the new record time to
    return (format $messageFasterThanWeaponMapRecord $weaponName);
  ][

    timeDifference = (- (getMapRecordScoreTime $currentWeaponMapRecord) (getMapRecordScoreTime $status_mapRecord));

    if (> $timeDifference 0) [
      // New best time with that weapon
      return (format $messageFasterThanWeaponMapRecord $weaponName);
    ][
      if (= $timeDifference 0) [
        return (format $messageTiedWeaponMapRecord $weaponName);
      ][
        // Slower than best weapon record
        return (format $messageSlowerThanWeaponMapRecord $weaponName);
      ]
    ]
  ]

]
