//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Console map record printer module for ac-gema-mode
//
// Handles printing of map records to the console at the top of the screen
//
// Requires:
//   * scripts/ac-gema-mode/strings.cfg
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/map-record-comparator.cfg
//   * scripts/ac-gema-mode/time/time-interval-array.cfg
//   * scripts/ac-gema-mode/time/time-formatter.cfg
//


// Options

//
// Option to show the player name in the console score string (Default: 0)
//
// @var int $optionShowNameOnScore
//
check2init optionShowNameOnScore 0;

//
// Option to show the score weapon in the console score string (Default: 1)
//
// @var int $optionShowScoreWeapon
//
check2init optionShowScoreWeapon 1;

//
// Option to set the comparison value for score times (Default: 1).
//
// 0: Best map record
// 1: Best score weapon record
//
// @var int $optionScoreTimeCompareValue
//
check2init optionScoreTimeCompareValue 1;

//
// Option to show the difference in minutes to the score attempt compare time (Default: 1)
//
// @var int $optionShowDifferenceToScoreCompareTime
//
check2init optionShowDifferenceToScoreCompareTime 1;


persistidents 0;

//
// Generates and returns the map record output string for when the player scores.
//
// @param array mapRecord ($arg1) The map record
//
// @return string The map record output string for when the player scores
//
const getMapRecordScoreString [

  mapRecord = $arg1;

  if ($optionShowNameOnScore) [
    scorePlayerName = (format $messageScoreNamePlayerName (player1 name));
  ][
    scorePlayerName = $messageScoreNameYou;
  ]

  scoreTimeString = (generateTimeStringFromTimeInterval (getMapRecordScoreTime $mapRecord) 1);
  mapRecordString = (format $messageMapRecordScore $scorePlayerName $scoreTimeString);

  if ($optionShowScoreWeapon) [
    weaponInfoString = (format $messageMapRecordScoreWeapon (getMapRecordWeaponName $mapRecord));
    mapRecordString = (concat $mapRecordString $weaponInfoString);
  ]

  return $mapRecordString;

]

//
// Returns the record status string (new record, tied record, no new record).
// Must be called before the new record was saved.
//
// If no previous best map record is set the status string will always be the one for the comparison to
// the best map record.
// In any other case it will be the comparison to the best map record if $optionScoreTimeCompareValue is 0 or
// the comparison to the best weapon map record if $optionScoreTimeCompareValue is 1.
//
// @param array mapRecord ($arg1) The map record
//
// @return string The record status string
//
const getMapRecordStatusString [

  newMapRecord = $arg1;

  comparisonToBestMapRecord = (compareMapRecordToBestMapRecord $newMapRecord);
  isNewBestMapRecord = (|| (= $comparisonToBestMapRecord $MAP_RECORD_COMPARISON_STATUS_FASTER) (= $comparisonToBestMapRecord $MAP_RECORD_COMPARISON_STATUS_EMPTY));

  if (|| $isNewBestMapRecord (= $optionScoreTimeCompareValue 0)) [
    comparisonToTargetMapRecord = $comparisonToBestMapRecord;
    isComparisonToBestMapRecord = 1;
  ][
    comparisonToTargetMapRecord = (compareMapRecordToWeaponRecord $newMapRecord);
    isComparisonToBestMapRecord = 0;
  ]

  comparisonStatus = (array_get $comparisonToTargetMapRecord 0);
  differenceToTargetMapRecord = (array_get $comparisonToTargetMapRecord 1);


  if (= $comparisonStatus $MAP_RECORD_COMPARISON_STATUS_EMPTY) [
    // This is the first record for the map or with the score weapon
    return (getNewMapRecordString $newMapRecord $isComparisonToBestMapRecord);
  ][

    if (= $comparisonStatus $MAP_RECORD_COMPARISON_STATUS_FASTER) [
      return (getFasterThanCompareMapRecordString $newMapRecord $differenceToTargetMapRecord $isComparisonToBestMapRecord);
    ][
      if (= $comparisonStatus $MAP_RECORD_COMPARISON_STATUS_TIED) [
        return (getCompareMapRecordTiedString $newMapRecord $isComparisonToBestMapRecord);
      ][
        return (getSlowerThanCompareMapRecordString $newMapRecord $differenceToTargetMapRecord $isComparisonToBestMapRecord);
      ]
    ]

  ]

]


// Private Functions

//
// Returns the "New best time" message for the case that the compare record is empty.
//
// @param array newMapRecord ($arg1) The new map record
// @param int isComparisonToBestMapRecord ($arg2) 1 if the map record was compared to the best map record
//
// @return string The "New best time" message
//
const getNewMapRecordString [

  newMapRecord = $arg1;
  isComparisonToBestMapRecord = $arg2;

  // This is the first record for the map or with that weapon, so there is no time to compare the new record time to
  if ($isComparisonToBestMapRecord) [
    return $messageFasterThanBestMapRecord;
  ][
    return (format $messageFasterThanWeaponMapRecord (getMapRecordWeaponName $newMapRecord));
  ]

]

// Returns the "Faster than map record" message.
//
// The difference to the comparison map record must be calculated as "bestRecordTime - recordTime".
//
// @param array newMapRecord ($arg1) The new map record
// @param int differenceToComparisonMapRecord ($arg2) The difference of the map record to the best map record in milliseconds
// @param int isComparisonToBestMapRecord ($arg3) 1 if the map record was compared to the best map record
//
// @return string The "Faster than map record" message
//
const getFasterThanCompareMapRecordString [

  newMapRecord = $arg1;
  differenceToComparisonMapRecord = $arg2;
  isComparisonToBestMapRecord = $arg3;

  if ($isComparisonToBestMapRecord) [

    if (= $optionShowDifferenceToScoreCompareTime 1) [
      timeDifferenceString = (generateTimeStringFromTimeInterval $differenceToComparisonMapRecord 1);
      return (format $messageFasterThanBestMapRecordWithDifference $timeDifferenceString);
    ][
      return $messageFasterThanBestMapRecord;
    ]

  ][
    weaponName = (getMapRecordWeaponName $newMapRecord);

    if (= $optionShowDifferenceToScoreCompareTime 1) [
      timeDifferenceString = (generateTimeStringFromTimeInterval $differenceToComparisonMapRecord 1);
      return (format $messageFasterThanWeaponMapRecordWithDifference $weaponName $timeDifferenceString);
    ][
      return (format $messageFasterThanWeaponMapRecord $weaponName);
    ]

  ]

]

//
// Returns the "Tied map record" message.
//
// @param array newMapRecord ($arg1) The new map record
// @param int isComparisonToBestMapRecord ($arg2) 1 if the map record was compared to the best map record
//
// @return string The "Tied map record" message
//
const getCompareMapRecordTiedString [

  newMapRecord = $arg1;
  isComparisonToBestMapRecord = $arg2;

  if ($isComparisonToBestMapRecord) [
    return $messageTiedBestMapRecord;
  ][
    return (format $messageTiedWeaponMapRecord (getMapRecordWeaponName $newMapRecord));
  ]

]

//
// Returns the "Slower than map record" message.
// The difference to the comparison map record must be calculated as "bestRecordTime - recordTime".
//
// @param array newMapRecord ($arg1) The new map record
// @param int differenceToComparisonMapRecord ($arg2) The difference of the map record to the best map record in milliseconds
// @param int isComparisonToBestMapRecord ($arg3) 1 if the map record was compared to the best map record
//
// @return string The "Slower than map record" message
//
const getSlowerThanCompareMapRecordString [

  newMapRecord = $arg1;
  differenceToComparisonMapRecord = $arg2;
  isComparisonToBestMapRecord = $arg3;

  if ($isComparisonToBestMapRecord) [

    if (= $optionShowDifferenceToScoreCompareTime 1) [
      timeDifferenceString = (generateTimeStringFromTimeInterval (invertTimeInterval $differenceToComparisonMapRecord) 1);
      return (format $messageSlowerThanBestMapRecordWithDifference $timeDifferenceString)
    ][
      return $messageSlowerThanBestMapRecord;
    ]

  ][
    weaponName = (getMapRecordWeaponName $newMapRecord);

    if (= $optionShowDifferenceToScoreCompareTime 1) [
      timeDifferenceString = (generateTimeStringFromTimeInterval (invertTimeInterval $differenceToComparisonMapRecord) 1);
      return (format $messageSlowerThanWeaponMapRecordWithDifference $weaponName $timeDifferenceString);
    ][
      return (format $messageSlowerThanWeaponMapRecord $weaponName);
    ]

  ]

]
