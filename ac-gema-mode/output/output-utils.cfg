//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Output utils module for ac-gema-mode
//
// Provides various output related util functions.
//
// Requires:
//   * scripts/ac-gema-mode/output/string-width-calculator.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/unpersist/functions.cfg
//   * scripts/ac-gema-mode/util/list-utils.cfg
//   * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;


// Constants

//
// A literal tab ("\t")
//
// @var string TAB_CHARACTER
//
const TAB_CHARACTER "	";

//
// A quote character
// This is needed because its not so easy to get a single double quote character for comparisons
//
// @var string $QUOTE_CHARACTER
//
const QUOTE_CHARACTER (substr [""] 0 1);

//
// A color start character ("\f")
// This is followed by one of the color identifiers if it was added to a string via `(c <color>)`.
//
// @var string $COLOR_CHARACTER
//
const COLOR_CHARACTER "";

//
// A bell character ("\a")
//
// @var string $BELL_CHARACTER
//
const BELL_CHARACTER "";


// Public Functions

//
// Generates a output list from a given list of strings.
//
// @param string[] listItems ($arg1) The list items
// @param string itemSeparator ($arg2) The item separator (e.g. ", ")
// @param string lastItemSeparator ($arg3) The separator between the second and last item (optional, Default: $arg2)
//
// @return string The generated output list
//
function generateOutputList [

  listItems = $arg1;
  itemSeparator = $arg2;

  if (= $numargs 3) [
    lastItemSeparator = $arg3;
  ][
    lastItemSeparator = $itemSeparator;
  ]

  outputList = "";
  numberOfEntries = (listlen $listItems);
  currentEntryNumber = 0;

  ulooplist $listItems listItem [
    ++ currentEntryNumber;

    // Append the item separator if required
    if (> $currentEntryNumber 1) [
      if (= $currentEntryNumber $numberOfEntries) [
        outputList = (concatword $outputList $lastItemSeparator);
      ][
        outputList = (concatword $outputList $itemSeparator);
      ]
    ]

    // Append the item
    outputList = (concatword $outputList $listItem);
  ]

  return (strreplace $outputList $TEMPORARY_WHITESPACE " ");

]


//
// Generates and returns width limited output lines from a given list of words.
// Lines breaks will be added at whitespace positions if possible or at the last possible character if a line
// contains no whitespace.
//
// @param string[] outputText ($arg1) The list of words to generate output lines from
// @param int maximumLineWidth ($arg2) The maximum width per line
// @param string outputLinePrefix ($arg3) The prefix per output line
// @param int fontType ($arg4) The font type to calculate the width with
//
// @return string[] The generated output lines
//
function generateWidthLimitedOutputLines [

  outputText = $arg1;
  maximumLineWidth = $arg2;
  outputLinePrefix = $arg3;
  fontType = $arg4;

  prefixWidth = (calculateStringWidth $outputLinePrefix $fontType);
  rawOutputLines = (generateLinesFromWords $outputText);

  outputLines = [];
  ulooplist $rawOutputLines rawOutputLine [

    if (strcmp $rawOutputLine $TEMPORARY_WHITESPACE) [
      add2list outputLines $TEMPORARY_WHITESPACE;
      rawOutputLine = "";
    ][
      rawOutputLine = (strreplace $rawOutputLine $TEMPORARY_WHITESPACE " ");
    ]

    lastColor = "";
    while [ (> (strlen $rawOutputLine) 0) ] [

      nextLineLength = (+ (calculateStringPositionBeforeMaximumWidth $rawOutputLine $fontType $maximumLineWidth $prefixWidth) 1);

      if (< $nextLineLength (strlen $rawOutputLine)) [
        numberOfWhitespacesInNextLine = (substr_count $rawOutputLine " " $nextLineLength);
        if (!= $numberOfWhitespacesInNextLine 0) [
          lastWhitespacePositionInNextLine = (strpos $rawOutputLine " " (- $numberOfWhitespacesInNextLine 1));
          nextLineLength = $lastWhitespacePositionInNextLine;
        ]

        if (= $nextLineLength 0) [
          // The maximum width is so low that not a single character from the line fits into it the output line
          // Ignore the maximum width and extract the first character from the line
          nextLineLength = 1;
        ]
      ]

      nextOutputLine = (concatword $outputLinePrefix $lastColor (substr $rawOutputLine 0 $nextLineLength));
      rawOutputLine = (trimLeadingAndTrailingWhitespace (substr $rawOutputLine $nextLineLength));

      lastColorPosition = (strrpos $nextOutputLine $COLOR_CHARACTER 0);
      if (!= $lastColorPosition -1) [
        lastColor = (substr $nextOutputLine $lastColorPosition 2);
      ]

      add2list outputLines (strreplace $nextOutputLine " " $TEMPORARY_WHITESPACE);
    ]

  ]

  return $outputLines;

]

//
// Generates and returns a list of output lines from a given list of words.
// The special word "<NEW_LINE>" will cause the words afterwards to be added to the next line.
//
// @param string[] outputText ($arg1) The list of words to generate output lines from
//
// @return string[] The generated output lines
//
function generateLinesFromWords [

  outputText = $arg1;

  currentLine = "";
  isFirstWordOfLine = 1;

  outputLines = [];
  ulooplist $outputText outputWord [

    if (strcmp $outputWord "<NEW_LINE>") [
      if (strcmp (trimLeadingAndTrailingWhitespace $currentLine) "") [
        add2list outputLines $TEMPORARY_WHITESPACE;
      ][
        add2list outputLines $currentLine;
      ]
      currentLine = "";
      isFirstWordOfLine = 1;
    ][

      if ($isFirstWordOfLine) [
        if (> (strlen $outputWord) 0) [
          isFirstWordOfLine = 0;
        ]
      ][
        currentLine = (concatword $currentLine $TEMPORARY_WHITESPACE);
      ]
      currentLine = (concatword $currentLine $outputWord);

    ]
  ]

  if (strcmp $currentLine "") [
    add2list outputLines $TEMPORARY_WHITESPACE;
  ][
    add2list outputLines $currentLine;
  ]

  return $outputLines;

]
