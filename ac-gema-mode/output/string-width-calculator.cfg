//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// String width calculator module for ac-gema-mode
//
// Provides functions to calculate the width of given strings for specified font types.
//
// Requires:
//   * scripts/ac-gema-mode/output/character-width-loader.cfg
//   * scripts/ac-gema-mode/output/tab-stop-calculator.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/util/list-utils.cfg
//

persistidents 0;


// Public Functions

//
// Calculates the width of a given string for a specified font type.
//
// @param string targetString ($arg1) The string whose width to calculate
// @param int fontType ($arg2) The font type to calculate the width for
//
// @return int The calculated width
//
function calculateStringWidth [
  return (stringWidthIterator $arg1 $arg2 [] 0);
]

//
// Calculates the last position inside a string that does not exceed a given maximum width.
//
// @param string targetString ($arg1) The target string
// @param int fontType ($arg2) The font type to calculate the width with
// @param int maximumStringWidth ($arg3) The maximum string width
// @param int initialStringWidth ($arg4) The initial string width (Default: 0)
//
// @return int The last position inside the string that does not exceed the maximum width
//
function calculateStringPositionBeforeMaximumWidth [

  targetString = $arg1;
  fontType = $arg2;
  maximumStringWidth = $arg3;

  if (= $numargs 4) [
    initialStringWidth = $arg4;
  ][
    initialStringWidth = 0;
  ]

  stringPositionBeforeMaximumWidth = -1;

  stringpositionbeforemaximumwidth_stringWidthIteratorCallback = [
    targetStringCharacterPosition = $arg1;
    targetStringWidth = $arg2;

    if (> $targetStringWidth $maximumStringWidth) [
      return 1;
    ][
      stringPositionBeforeMaximumWidth = $targetStringCharacterPosition;
    ]
  ];

  stringWidthIterator $targetString $fontType "stringpositionbeforemaximumwidth_stringWidthIteratorCallback" $initialStringWidth;

  return $stringPositionBeforeMaximumWidth;

]


// Private Functions

//
// Iterates over each character of a string that has a width greater than zero.
//
// @param string targetString ($arg1) The target string
// @param int fontType ($arg2) The font type to calculate the width with
// @param function stringWidthIteratorCallback ($arg3) The callback to call per iteration cycle
// @param int initialStringWidth ($arg4) The initial string width
//
// @return int The total string width
//
function stringWidthIterator [

  targetString = (strreplace $arg1 $TEMPORARY_WHITESPACE " ");
  fontType = $arg2;
  stringWidthIteratorCallback = $arg3;
  initialStringWidth = $arg4;

  targetStringWidth = $initialStringWidth;
  stringwidth_printableStringCharactersIteratorCallback = [
    targetStringCharacterPosition = $arg1;
    targetStringCharacter = $arg2;
    if (strcmp $targetStringCharacter $TAB_CHARACTER) [
      targetStringWidth = (calculateNextTabStopNumberPosition $targetStringWidth $fontType);
    ][
      targetStringCharacterWidth = (loadCharacterWidthFromFontType $targetStringCharacter $fontType);
      targetStringWidth = (+ (+ $targetStringWidth $targetStringCharacterWidth) 1);
    ]

    return ($stringWidthIteratorCallback $targetStringCharacterPosition $targetStringWidth);
  ];

  printableStringCharactersIterator $targetString "stringwidth_printableStringCharactersIteratorCallback";

  return $targetStringWidth;

]

//
// Iterates over each printable character of a string.
//
// @param string targetString ($arg1) The target string
// @param function printableStringCharactersIteratorCallback ($arg2) The callback to call per iteration cycle
//
function printableStringCharactersIterator [

  targetString = $arg1;
  printableStringCharactersIteratorCallback = $arg2;

  skipNextCharacter = 0;
  parsestring $targetString targetStringCharacter [

    if ($skipNextCharacter) [
      skipNextCharacter = 0;
    ][
      if (|| (strcmp $targetStringCharacter $COLOR_CHARACTER) (strcmp $targetStringCharacter $BELL_CHARACTER)) [
        skipNextCharacter = 1;
      ][
        if (= ($printableStringCharactersIteratorCallback $__targetStringCharacter $targetStringCharacter) 1) [
          breakparse;
        ]
      ]
    ]

  ]

]
