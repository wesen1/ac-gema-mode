//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Character width loader module for ac-gema-mode
//
// Provides functions to load a character width from one of the font*CharacterWidths lists.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/output/font-width/font-default-character-widths.cfg
//   * scripts/ac-gema-mode/output/font-width/font-mono-character-widths.cfg
//   * scripts/ac-gema-mode/output/font-width/font-serif-character-widths.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//   * scripts/ac-gema-mode/unpersist/functions.cfg
//

persistidents 0;


// Global Variables

//
// The font type to characterWidthListName mappings
// The indexes match the corresponding $__fontsetting value
//
// @var array $fontTypeCharacterWidthListNames
//
cache fontTypeCharacterWidthListNames [
  fontDefaultCharacterWidths
  fontSerifCharacterWidths
  fontMonoCharacterWidths
]


// Public Functions

//
// Returns the names of all available font types.
//
// @return string[] The names of all available font types
//
function getAvailableFontTypes [

  availableFontTypes = [];
  ulooplist $fontTypeCharacterWidthListNames fontTypeCharacterWidthListName [
    // Cut off the leading "font" (4 characters) and the trailing "CharacterWidths" (15 characters) strings
    // This is done by extracting a substring starting at the 4th character with a length of
    // <string length> - (<start offset> + 15)
    fontTypeName = (substr $fontTypeCharacterWidthListName 4 (- (strlen $fontTypeCharacterWidthListName) 19));
    add2list availableFontTypes (tolower $fontTypeName);
  ]

  return $availableFontTypes;

]

//
// Adds a new font type character width list to the $fontTypeCharacterWidthListNames list.
// The character width list name must match the pattern "font<fontName>CharacterWidths".
//
// Call this to make custom fonts available in the options menu.
//
// @param string characterWidthListName ($arg1) The character width list name to add
//
function addFontTypeCharacterWidthList [
  add2list fontTypeCharacterWidthListNames $arg1;
  onFontTypeCharacterWidthListAdded $arg1;
]

//
// Loads the width for a character for a given font type.
// Will return 0 if no characterWidthList for the font type exists.
//
// @param string character ($arg1) The character whose width to load
// @param int fontType ($arg2) The font type to load the character width from (One of the $fontTypeCharacterWidthListNames indexes)
//
// @return int The width of the character for the specified font type
//
function loadCharacterWidthFromFontType [

  character = $arg1;
  fontType = $arg2;

  characterWidthListName = (at $fontTypeCharacterWidthListNames $fontType);
  if (isIdent $characterWidthListName) [
    return (loadCharacterWidthFromList $arg1 (getalias $characterWidthListName));
  ][
    return 0;
  ]

]


// Private Functions

//
// Loads the width for a character from a given characterWidthList.
// Will return 0 if no width for the character is defined in the characterWidthList.
//
// @param string character ($arg1) The character whose width to load
// @param array characterWidthList ($arg2) The character width list to load the character width from
//
// @return int The width of the character
//
function loadCharacterWidthFromList [

  character = $arg1;
  characterWidthList = $arg2;

  characterPosition = (findlist $characterWidthList $character);
  if (= $characterPosition -1) [
    if (strcmp $character $QUOTE_CHARACTER) [
      return (loadCharacterWidthFromList "QUOTE" $characterWidthList);
    ][
      return 0;
    ]
  ][
    return (at $characterWidthList (+ $characterPosition 1));
  ]

]


// Custom Events

//
// Event that is fired when a new font type character width list was added.
//
// @param string characterWidthListName ($arg1) The name of the character width list that was added
//
event onFontTypeCharacterWidthListAdded [
]
