//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Tab stop calculator module for ac-gema-mode
//
// Provides various functions to calculate tab stop positions and numbers of passed tab stops at given pixel positions.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/output/character-width-loader.cfg
//   * scripts/ac-gema-mode/output/output-utils.cfg
//   * scripts/ac-gema-mode/output/string-width-loader.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

persistidents 0;


// Public Functions

//
// Calculates the number of passed tab stops at a given text pixel position for a specified font type.
//
// @param int textPixelPosition ($arg1) The text pixel position
// @param int fontType ($arg2) The font type
//
// @return int The number of passed tab stops at the given text pixel position
//
function calculateNumberOfPassedTabStops [
  return (- (div $arg1 (loadCharacterWidthFromFontType $TAB_CHARACTER $arg2)) 1);
]

//
// Calculates the text pixel position at a given tab stop number for a specified font type.
//
// @param int tabStopNumber ($arg1) The tab stop number
// @param int fontType ($arg2) The font type
//
// @return int The text pixel position at the given tab stop number
//
function calculateTabStopNumberPosition [
  return (* $arg1 (loadCharacterWidthFromFontType $TAB_CHARACTER $arg2));
]

//
// Calculates the next tab stop number relative to a given text pixel position for a specified font type.
//
// @param int textPixelPosition ($arg1) The text pixel position
// @param int fontType ($arg2) The font type
//
// @return int The next tab stop number relative to the given text pixel position
//
function calculateNextTabStopNumber [
  return (+ (calculateNumberOfPassedTabStops $arg1 $arg2) 1)
]

//
// Calculates the text pixel position of the next tab stop relative to a given text pixel position for a specified font type.
//
// @param int textPixelPosition ($arg1) The text pixel position
// @param int fontType ($arg2) The font type
//
// @return int The text pixel position at the next tab stop number relative to the given text pixel position
//
function calculateNextTabStopNumberPosition [
  return (calculateTabStopNumberPosition (calculateNextTabStopNumber $arg1 $arg2));
]


//
// Calculates the distances to the closest common next tab stop number for a given set of strings.
//
// The closest common next tab stop number will be the largest next tab stop number of the strings.
// The returned list contains the needed number of pad tabs per string to reach the largest next tab stop number.
//
// @param string[] outputStrings ($arg1) The list of output strings
// @param int minimumDistanceToNextTabStop ($arg2) The minimum distance to the next tab stop per string
// @param int fontType ($arg3) The font type
//
// @return int[] The distances to the largest next tab stop number per string
//
function calculateDistancesToClosestCommonNextTabStopNumber [

  outputStrings = $arg1;
  minimumDistanceToNextTabStop = $arg2;
  fontType = $arg3;

  distancesToClosestCommonNextTabStopNumber = [];
  closestCommonNextTabStopNumber = 0;
  ulooplist $outputStrings outputString [

    // Calculate the next tab stop number for the string
    outputStringWidth = (calculateStringWidth $outputString $fontType);
    outputStringNextTabStopNumber = (calculateNextTabStopNumber (+ $outputStringWidth $minimumDistanceToNextTabStop) $fontType);

    // Calculate the difference to the current largest next tab stop number
    differenceToClosestCommonNextTabStopNumber = (- $outputStringNextTabStopNumber $closestCommonNextTabStopNumber);
    if (> $differenceToClosestCommonNextTabStopNumber 0) [
      // The next tab stop number for the current string is the new largest next tab stop number
      closestCommonNextTabStopNumber = $outputStringNextTabStopNumber;
      updatedDistancesToClosestCommonNextTabStopNumber = [];
      ulooplist $distancesToClosestCommonNextTabStopNumber distanceToClosestNextTabStopNumber [
        add2list updatedDistancesToClosestCommonNextTabStopNumber (+ $distanceToClosestNextTabStopNumber $differenceToClosestCommonNextTabStopNumber);
      ]

      distancesToClosestCommonNextTabStopNumber = $updatedDistancesToClosestCommonNextTabStopNumber;
      add2list distancesToClosestCommonNextTabStopNumber 1;
    ][
      // The next tab stop number for the current string is less than or equal to the current largest next tab stop number
      add2list distancesToClosestCommonNextTabStopNumber (+ (* $differenceToClosestCommonNextTabStopNumber -1) 1);
    ]

  ]

  return $distancesToClosestCommonNextTabStopNumber;

]
