//
// @author wesen
// @copyright 2018 wesen <wesen-ac@web.de>
//

//
// Array utils module for ac-gema-mode
//
// Provides various array functions
//
// Requires:
//   * scripts/ac-gema-mode/string-utils.cfg
//

persistidents 0;

//
// Returns the number of elements inside an array.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
//
// @return int The number of elements inside the array
//
const array_length [
  return (+ (substr_count $arg1 $arg2) 1);
]

//
// Returns the start position of an array index inside the total array string.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
// @param int $arg3 The index position
//
// @return int The start position of the index inside the array
//
const array_getIndexStartPosition [

  arraystartposition_array = $arg1;
  arraystartposition_arraySeparator = $arg2;
  arraystartposition_index = $arg3;

  // Convert negative indexes to (array_length - <index>)
  if (< $arraystartposition_index 0) [
    arraystartposition_arrayLength = (array_length $arraystartposition_array $arraystartposition_arraySeparator);
    arraystartposition_index = (+ $arraystartposition_arrayLength $arraystartposition_index);
  ]

  if (= $arraystartposition_index 0) [
    arraystartposition_subStringStart = 0;
  ][
    if (>= $arraystartposition_index (array_length $arraystartposition_array $arraystartposition_arraySeparator)) [
      arraystartposition_subStringStart = -1;
    ][

      arraystartposition_arraySeparatorPosition = (strpos $arraystartposition_array $arraystartposition_arraySeparator (- $arraystartposition_index 1))
      arraystartposition_subStringStart = (+ $arraystartposition_arraySeparatorPosition (strlen $arraystartposition_arraySeparator));

    ]
  ]

  return $arraystartposition_subStringStart;

]

//
// Returns the end position of an array index inside the total array string.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
// @param int $arg3 The index position
//
// @return int The end position of the index inside the array string
//
const array_getIndexEndPosition [

  arrayendposition_array = $arg1;
  arrayendposition_arraySeparator = $arg2;
  arrayendposition_index = $arg3;
  arrayendposition_arrayLength = (array_length $arrayendposition_array $arrayendposition_arraySeparator);

  // Convert negative indexes to (array_length - <index>)
  if (< $arrayendposition_index 0) [
    arrayendposition_index = (+ $arrayendposition_arrayLength $arrayendposition_index);
  ]

  if (>= $arrayendposition_index $arrayendposition_arrayLength) [
    arrayendposition_subStringEnd = -1;
  ][

    arrayendposition_nextIndexStartPosition = (array_getIndexStartPosition $arrayendposition_array $arrayendposition_arraySeparator (+ $arrayendposition_index 1));
    if (= $arrayendposition_nextIndexStartPosition -1) [
      arrayendposition_subStringEnd = (- (strlen $arrayendposition_array) 1);
    ][
      arrayendposition_subStringEnd = (- (- $arrayendposition_nextIndexStartPosition (strlen $arrayendposition_arraySeparator)) 1);
    ]

  ]

  return $arrayendposition_subStringEnd;
]

//
// Returns a part of an array.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
// @param int $arg3 The start index
// @param int $arg4 The end index (optional)
//
// @return String The partial array
//
const array_slice [

  if (< $numargs 3) [
    return $arg1;
  ][
    arrayslice_array = $arg1;
    arrayslice_arraySeparator = $arg2;
    arrayslice_startIndex = $arg3;
    arrayslice_numberOfArguments = $numargs;
    arrayslice_result = "";

    // Get end index
    arrayslice_arrayLength = (array_length $arrayslice_array $arrayslice_arraySeparator);
    if (> $arrayslice_numberOfArguments 3) [
      arrayslice_endIndex = $arg4;
    ][
      arrayslice_endIndex = (- $arrayslice_arrayLength 1);
    ]

    // Calculate start position
    arrayslice_subStringStart = (array_getIndexStartPosition $arrayslice_array $arrayslice_arraySeparator $arrayslice_startIndex);
    if (!= $arrayslice_subStringStart -1) [

      // Calculate end position
      arrayslice_subStringEnd = (array_getIndexEndPosition $arrayslice_array $arrayslice_arraySeparator $arrayslice_endIndex);
      if (!= $arrayslice_subStringEnd -1) [

        // Extract the sub string
        arrayslice_subStringLength = (+ (- $arrayslice_subStringEnd $arrayslice_subStringStart) 1);
        arrayslice_result = (substr $arrayslice_array $arrayslice_subStringStart $arrayslice_subStringLength);
      ]
    ]

    return $arrayslice_result;
  ]
]

//
// Initializes an empty array.
//
// @param String $arg1 The array separator
// @param int $arg2 The number of array dimensions
//
// @return String The empty array
//
const array_init [
  return (array_pad "" $arg1 $arg2);
]

//
// Fills an array with empty fields until it reaches a specific size.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
// @param int $arg3 The target size of the array
//
// @return String The filled array
//
const array_pad [

  arraypad_array = $arg1;
  arraypad_arraySeparator = $arg2;
  arraypad_targetArraySize = $arg3;
  arraypad_resultArray = $arraypad_array;

  // Replace empty array by <empty> tag
  if (strcmp $arraypad_resultArray "") [
    arraypad_resultArray = "<empty>";
  ]

  loop i (- $arraypad_targetArraySize 1) [
    arraypad_fieldPrecedingSeparatorPosition = (strpos $arraypad_array $arraypad_arraySeparator $i);
    if (= $arraypad_fieldPrecedingSeparatorPosition -1) [

      arraypad_glue = $arraypad_arraySeparator;
      if (&& (= $i 0) (= (strlen $arraypad_resultArray) 0)) [
            arraypad_glue = "";
      ]
      arraypad_resultArray = (concatword $arraypad_resultArray $arraypad_glue "<empty>");

    ]
  ]

  return $arraypad_resultArray;
]

//
// Returns the number of dimensions in an array.
//
// @param String $arg1 The array
// @param int $arg2 The dimension that was found in an earlier cycle of this function
//
// @return int The number of dimensions in the array
//
const array_getNumberOfDimensions [

  arraymaxdimension_array = $arg1;

  arraymaxdimension_numberOfDimensions = 0;
  if (> $numargs 1) [
    arraymaxdimension_numberOfDimensions = $arg2;
  ]

  // Generate the dimension separator
  arraymaxdimension_dimensionSeparator = (strrepeat " " (+ $arraymaxdimension_numberOfDimensions 1));

  if (!= (strpos $arraymaxdimension_array $arraymaxdimension_dimensionSeparator) -1) [
    ++ arraymaxdimension_numberOfDimensions;
    return (array_getNumberOfDimensions $arraymaxdimension_array $arraymaxdimension_numberOfDimensions);
  ][
    return $arraymaxdimension_numberOfDimensions;
  ]

]

//
// Replaces an entry inside an array.
//
// @param String $arg1 The array
// @param String $arg2 The array separator
// @param int $arg3 The index
// @param String $arg4 The value to set at the index
//
// @return String The modified array
//
const array_replace [

  arrayreplace_array = $arg1;
  arrayreplace_arraySeparator = $arg2;
  arrayreplace_index = $arg3;
  arrayreplace_value = $arg4;

  // Find start position of sub array
  arrayreplace_subStringStart = (array_getIndexStartPosition $arrayreplace_array $arrayreplace_arraySeparator $arrayreplace_index);

  if (!= $arrayreplace_subStringStart -1) [

    // Find end position of sub array
    arrayreplace_subStringEnd = (array_getIndexEndPosition $arrayreplace_array $arrayreplace_arraySeparator $arrayreplace_index);

    return (substr_replace $arrayreplace_array $arrayreplace_value $arrayreplace_subStringStart $arrayreplace_subStringEnd);

  ][
    // The index doesn't exist, return the initial array
    return $arrayreplace_array;
  ]

]

//
// Adds an entry to an array.
//
// @param String $arg1 The array
// @param int[] $arg2 The dimension ids
// @param String $arg3 The value to set at the specified position
//
// @return String The modified array
//
const array_set [

  // Fetch input arguments
  arrayset_array = $arg1;
  arrayset_dimensionIndexes = $arg2;
  arrayset_value = $arg3;

  // Fetch the index inside the current dimension
  push arrayset_currentDimensionIndex (at $arrayset_dimensionIndexes 0);

  // Find out the first array dimension
  arrayset_currentDimension = (listlen $arrayset_dimensionIndexes);
  arrayset_numberOfDimensions = (array_getNumberOfDimensions $arrayset_array);
  if (> $arrayset_numberOfDimensions $arrayset_currentDimension) [
    arrayset_currentDimension = $arrayset_numberOfDimensions;
  ]

  // Generate the array separator for the highest dimension
  push arrayset_arraySeparator (strrepeat " " $arrayset_currentDimension);

  // Fill previous empty fields of this dimension with "<empty>" strings
  push arrayset_resultArray (array_pad $arrayset_array $arrayset_arraySeparator (+ $arrayset_currentDimensionIndex 1));

  // Get the sub array value
  if (> (listlen $arrayset_dimensionIndexes) 1) [

    // The function will be called again with the sub dimension
    arrayset_subArray = (array_get $arrayset_resultArray $arrayset_currentDimensionIndex);
    arrayset_remainingDimensionIndexes = (array_slice $arrayset_dimensionIndexes " " 1);

    arrayset_replaceSubArray = (array_set $arrayset_subArray $arrayset_remainingDimensionIndexes $arrayset_value);

    // The variables that were temporarily changed with "push" are reverted back to their previous state with "pop"
    // This is necessary because recursive calls also overwrite the content of the variables that are used inside the functions
    pop arrayset_resultArray;
    pop arrayset_arraySeparator;
    pop arrayset_currentDimensionIndex;
  ][
    // This is the last dimension (The place where the value will finally be changed)
    arrayset_replaceSubArray = $arrayset_value;
  ]

  return (array_replace $arrayset_resultArray $arrayset_arraySeparator $arrayset_currentDimensionIndex $arrayset_replaceSubArray);
]

//
// Reads an entry from an array.
//
// @param String $arg1 The array
// @param int[] $arg2 The dimension ids
//
// @return String The content of the specified index
//
alias array_get [

  // Fetch input arguments
  arrayget_array = $arg1;
  arrayget_dimensionIndexes = $arg2;

  // Replace <empty> tag with empty string
  if (|| (= (strlen $arrayget_array) 0) (strcmp $arrayget_array "<empty>")) [
    arrayget_returnValue = $arrayget_array;
  ][
    // Fetch the index inside the current dimension
    arrayget_currentDimensionIndex = (at $arrayget_dimensionIndexes 0);

    // Find out the first array dimension
    arrayget_currentDimension = (listlen $arrayget_dimensionIndexes);
    arrayget_numberOfDimensions = (array_getNumberOfDimensions $arrayget_array);
    if (> $arrayget_numberOfDimensions $arrayget_currentDimension) [
      arrayget_currentDimension = $arrayget_numberOfDimensions;
    ]

    // Generate the dimension separator for the current dimension
    arrayget_arraySeparator = (strrepeat " " $arrayget_currentDimension);

    // Extract the sub array
    arrayget_subArray = (array_slice $arrayget_array $arrayget_arraySeparator $arrayget_currentDimensionIndex $arrayget_currentDimensionIndex);

    if (<= (listlen $arrayget_dimensionIndexes) 1) [
      // This is the last dimension (The place where the value will finally be read)
      arrayget_returnValue = $arrayget_subArray;
    ][
      // The function will be called again with the sub dimension
      arrayget_remainingDimensionIndexes = (array_slice $arrayget_dimensionIndexes " " 1);
      arrayget_returnValue = (array_get $arrayget_subArray $arrayget_remainingDimensionIndexes);
    ]
  ]

  if (strcmp $arrayget_returnValue "<empty>") [
    arrayget_returnValue = "";
  ]

  return $arrayget_returnValue;
]

//
// Deletes one item of an array.
//
// @param String $arg1 The array
// @param String $arg2 The dimension indexes
//
// @return String The updated array
//
const array_delete [

  arraydelete_array = $arg1;
  arraydelete_dimensionIndexes = $arg2;
  arraydelete_resultArray = $arraydelete_array;

  arraydelete_value = (array_get $arraydelete_array $arraydelete_dimensionIndexes);
  if ($arraydelete_value) [
    arraydelete_resultArray = (array_set $arraydelete_array $arraydelete_dimensionIndexes "<empty>");

    // TODO: array_trim -> remove trailing <empty> fields
  ]

  return $arraydelete_resultArray;
]
