//
// @author wesen
// @copyright 2019 wesen <wesen-ac@web.de>
//

docident "array_length" "Returns the number of elements inside an array";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docexample "array_length [a b c] [ ]" "Returns 3";
docexample "array_length [a  b c] [  ]" "Returns 2";

docident "array_slice" "Returns a part of an array";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "S" "The start index" "" 1;
docargument "E" "The end index (optional)" "" 1;
docexample "array_slice [a b c] [ ] 1" "Returns 'b c'";
docexample "array_slice [a b c] [ ] 1 1" "Returns 'b'";

docident "array_pad" "Fills an array with empty fields until it reaches a specific size";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "N" "The target size of the array" "" 1;
docexample "array_pad [a b] [ ] 4" "Returns 'a b <empty> <empty>'";

docident "array_get" "Reads and returns one entry of an array";
docargument "A" "The array" "" 1;
docargument "D" "The dimension ids" "" 1;
docexample "array_get [a b  c d] [1 0]" "Returns 'c'";

docident "array_set" "Sets the value of a specified array index";
docargument "A" "The array" "" 1;
docargument "D" "The dimension ids" "" 1;
docargument "V" "The value to set at the specified position" "" 1;
docexample "array_set [a b  c d] [1 0] new" "Returns 'a b  new d'";
docremark "If the index exists the former value will be replaced by the new value";
docremark "If the value is empty the index will be unset";


docident "array_getRealIndex" "Converts negative indexes to (array_length - <index>), checks if the index is valid and returns the resulting index";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "I" "The index" "" 1;
docremark "Will return -1 if the index is not valid";

docident "array_getIndexStartPosition" "Returns the start position of an array index inside the total array string";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "I" "The index" "" 1;
docexample "array_getIndexStartPosition [hello world] [ ] 1" "Returns 6";

docident "array_getIndexEndPosition" "Returns the end position of an array index inside the total array string";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "I" "The index" "" 1;
docexample "array_getIndexEndPosition [hello world] [ ] 0" "Returns 4";

docident "array_getNumberOfDimensions" "Returns the number of dimensions in an array";
docargument "A" "The array" "" 1;
docargument "D" "The dimension that was found in an earlier cycle of this function" "" 1;
docexample "array_getNumberOfDimensions [a]" "Returns 1";
docexample "array_getNumberOfDimensions [a b  c d]" "Returns 2";

docident "array_replace" "Replaces an entry inside an array";
docargument "A" "The array" "" 1;
docargument "S" "The array separator" "" 1;
docargument "I" "The index" "" 1;
docargument "V" "The value to set at the index" "" 1;
docexample "array_replace [a b c] [ ] 1 new" "Returns 'a new c'";
docexample "array_replace [a b c] [ ] 5 new" "Returns 'a b c'";

docident "array_truncateSupernumerousDimensions" "Truncates supernumerous dimensions from a list of dimensions if necessary and returns the result";
docargument "A" "The array" "" 1;
docargument "D" "The dimension ids" "" 1;
docremark "Will return -1 if the dimension list is not valid";

docident "array_trim" "Removes trailing <empty> fields from the highest dimension of an array";
docargument "A" "The array" "" 1;

docident "array_getHighestDefinedDimension" "Returns the highest defined dimension from an array and a list of indexes";
docargument "A" "The array" "" 1;
docargument "D" "The dimension ids" "" 1;
docremark "Will return -1 if the list of indexes is invalid";
