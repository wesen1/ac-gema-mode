//
// @author wesen
// @copyright 2017 wesen <wesen-ac@web.de>
//

//
// Run system module for ac-gema-mode
//
// Handles the runs/attempts
//
// Requires:
//   * scripts/ac-gema-mode/map-name-checker.cfg
//   * scripts/ac-gema-mode/map-record.cfg
//   * scripts/ac-gema-mode/map-record-printer.cfg
//   * scripts/ac-gema-mode.cfg
//

persistidents 0;

check2init startTime 0;  // Start time of the players current run


////////////////////////////////////////////////////////////////////////////////////
// Environment checks
////////////////////////////////////////////////////////////////////////////////////

//
// Returns whether the current environment is gema compatible.
//
// @return int 0: Environment is not gema compatible
//             1: Environment is gema compatible
//
const isGema [

  if (&& (strcmp (getmode) "ctf") (isGemaMapName (curmap))) [
    return 1;
  ][
    return 0;
  ]

]

//
// Detects whether the player changes to edit mode.
//
const checkEditing [

  if ($editing) [
    abortRun;
    hudecho (concat (c $colorRunAborted) "Run aborted because you switched to edit mode!");
  ][
    // continue checking whether player changes to edit mode
    sleep 100 [
      if ($startTime) [
        checkEditing;
      ]
    ]
  ]

]

//
// Detects whether the player team changes.
//
// @param int $arg1 The current player team
//
const checkTeam [

  if (!= (player1 team) $arg1) [
    abortRun;
  ][
    // Must save $arg1 in a variable because $arg1 is cleared before the function invcoation is triggered
    playerTeam = $arg1;

    sleep 100 [
      if ($startTime) [
        checkTeam $playerTeam;
      ]
    ]
  ]

]


////////////////////////////////////////////////////////////////////////////////////
// Run system
////////////////////////////////////////////////////////////////////////////////////

//
// Aborts the current run.
//
const abortRun [

  startTime = 0;

]

//
// Initializes a new run.
//
const startRun [

  startTime = (millis);
  checkTeam (player1 team);
  checkEditing;

]


////////////////////////////////////////////////////////////////////////////////////
// Event handlers
////////////////////////////////////////////////////////////////////////////////////

//
// Event handler that is called when a new map starts.
//
checkinit mapstartalways [

  if (isGemaModeActive) [

    if (! (isGema)) [
      setGemaModeActive 0;
      echo (c $colorGemaModeDeactivated) "Gema mode deactivated: Map is not a gema map or mode is not CTF.";
    ][
      printMapStatistics (curmap);
    ]

  ]

]

//
// Event handler that is called when the intermission is reached (on map end).
//
checkinit start_intermission [

  if (isGemaModeActive) [
    abortRun;
  ]

]

//
// Event handler that is called when the player triggers a flag state change.
//
// @param int $arg1 The action that occured
// @param int $arg2 Actor cn
//
checkinit onFlag [

  // If gema mode is active and the player is the actor
  if (&& (isGemaModeActive) (= $arg2 (player1 cn))) [

    // If action is "scored" and startTime was not reset to 0 yet
    if (&& (= $arg1 4) $startTime) [

      newRecordTime = (- (millis) $startTime);
      abortRun;

      printMapRecordScoreString $newRecordTime;
      printMapRecordStatusString (curmap) $newRecordTime;
      saveMapRecord (curmap) $newRecordTime;
    ]

  ]

]

//
// Event handler that is called when someone is killed.
//
// @param int $arg1 Actor cn
// @param int $arg2 Target cn
//
checkinit onKill [

  if (&& (isGemaModeActive) (= $arg2 (player1 cn))) [
    abortRun;
  ]

]

//
// Event handler that is called when a player spawns.
//
// @param int $arg1 The cn of the player who spawned
//
checkinit onSpawn [

  if (&& (isGemaModeActive) (= $arg1 (player1 cn))) [
    startRun;
  ]

]

