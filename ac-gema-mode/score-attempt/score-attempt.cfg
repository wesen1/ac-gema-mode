//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

exec "scripts/ac-gema-mode/score-attempt/score-weapon-updater.cfg";

//
// Score attempt module for ac-gema-mode
// Provides methods to start, finish and abort score attempts.
// Also triggers the score attempt start, finish and abort on events.
//
//
// Requires:
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/gema-mode-state/gema-mode-state.cfg
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/output/console/map-record-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/score-weapon-updater.cfg
//

persistidents 0;

//
// The start time of the players current score attempt
//
// @var int startTime
//
check2init startTime 0;

//
// The id of the weapon that is used during the players score attempt
//
// @var int scoreWeapon
//
check2init scoreWeapon -1;  


// Custom event listeners

//
// Detects whether the player changes to edit mode.
//
const checkEditing [

  if ($editing) [
    abortScoreAttempt;
    printGemaNotification $messageAttemptAbortedEditMode;
  ][
    // Continue checking whether player changes to edit mode
    sleep 100 [
      if (isScoreAttemptActive) [
        checkEditing;
      ]
    ]
  ]

]

//
// Detects whether the player team changes.
//
// @param int $arg1 The initial player team
//
const checkTeam [

  // Must save $arg1 in a variable because $arg1 is cleared before the function invcoation is triggered
  playerTeam = $arg1;

  if (!= (player1 team) $playerTeam) [
    abortScoreAttempt;
  ][
    sleep 100 [
      if (isScoreAttemptActive) [
        checkTeam $playerTeam;
      ]
    ]
  ]

]


// Public Functions

//
// Returns the time in milliseconds that passed since the current score attempt started.
//
// @return int The time in milliseconds that passed since the current score attempt started or -1 if no score attempt is active at the moment
//
const getTimeSinceScoreAttemptStart [

  if (isScoreAttemptActive) [
    return (- (millis) $startTime);
  ][
    return -1;
  ]

]

//
// Aborts the current score attempt.
//
const abortScoreAttempt [

  startTime = 0;
  onScoreAttemptAbortAfter;

]

//
// Starts a new score attempt.
//
const startScoreAttempt [

  startTime = (millis);

  // Initially set the weapon to "Knife only"
  // When the player uses other weapons the score weapon will be updated by the score-weapon-updater module
  scoreWeapon = $KNIFE;

  // Initialize the event listeners
  checkTeam (player1 team);
  checkEditing;

  onScoreAttemptStartAfter;

]

//
// Finishes the current score attempt.
//
const finishScoreAttempt [

  newRecordTime = (getTimeSinceScoreAttemptStart);
  startTime = 0;

  scoreAttemptMapRecord = (createMapRecordArray (curmap) $newRecordTime $scoreWeapon);

  printGemaNotification (getMapRecordScoreString $scoreAttemptMapRecord);
  printGemaNotification (getMapRecordStatusString $scoreAttemptMapRecord);

  saveMapRecord $scoreAttemptMapRecord;

  onScoreAttemptFinishAfter $scoreAttemptMapRecord;

]

//
// Returns whether a score attempt is active at the moment.
//
const isScoreAttemptActive [
  return (&& (isGemaModeActive) $startTime);
]


// Custom Events

//
// Event handler that is called after a score attempt was started.
//
checkinit onScoreAttemptStartAfter [
]

//
// Event handler that is called after a score attempt was finished.
//
// @param array $arg1 The map record that was created by the score attempt
//
checkinit onScoreAttemptFinishAfter [
]

//
// Event handler that is called after a score attempt was aborted.
//
checkinit onScoreAttemptAbortAfter [
]


// Event handlers

//
// Event handler that is called when the gema mode state changes to disabled.
//
checkinit onDisableGemaMode [
  abortScoreAttempt;
]

//
// Event handler that is called after the gema mode auto de-/activation checks on map start are complete.
//
checkinit onGemaModeStateMapStartCheckAfter [

  if (isGemaModeActive) [
    if (&& (! (isScoreAttemptActive)) (player1 alive)) [
      startScoreAttempt;
    ]
  ]

]

//
// Event handler that is called when the intermission is reached (on map end).
//
checkinit start_intermission [
  if (isScoreAttemptActive) [
    abortScoreAttempt;
  ]
]

//
// Event handler that is called when player1 attacks.
//
// @param int $arg1 The weapon id of the weapon that was used
//
const onAttack [
  if (isScoreAttemptActive)[
    scoreWeapon = (updateScoreWeapon $arg1 $scoreWeapon);
  ]
]

//
// Event handler that is called when the player triggers a flag state change.
//
// @param int $arg1 The action that occured
// @param int $arg2 Actor cn
//
checkinit onFlag [

  // If a run is active, player1 is the actor and and the action is "scored"
  if (&& (isScoreAttemptActive) (&& (= $arg2 (player1 cn)) (= $arg1 4))) [
    finishScoreAttempt;
  ]

]

//
// Event handler that is called when someone is killed.
//
// @param int $arg1 Actor cn
// @param int $arg2 Target cn
//
checkinit onKill [
  if (&& (isScoreAttemptActive) (= $arg2 (player1 cn))) [
    abortScoreAttempt;
  ]
]

//
// Event handler that is called when a player spawns.
//
// @param int $arg1 The cn of the player who spawned
//
checkinit onSpawn [

  // Check whether player is editing. This prevents runs from starting when the player uses /newmap
  if (! $editing) [
    if (&& (isGemaModeActive) (= $arg1 (player1 cn))) [
      startScoreAttempt;
    ]
  ]

]
