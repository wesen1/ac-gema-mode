//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Score attempt module for ac-gema-mode
//
// Manages starting and stopping the current score attempt based on various events.
//
// Requires:
//   * scripts/ac-gema-mode/gema-mode-state/gema-mode-state.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/current-score-attempt.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;


// Public Functions

//
// Starts a new score attempt and initializes the team change and edit mode change event listeners.
//
const startScoreAttempt [

  startCurrentScoreAttempt;

  teamChangeListener (player1 team);
  editModeChangeListener;

]

//
// Returns whether a score attempt is active at the moment.
//
const isScoreAttemptActive [
  return (&& (isGemaModeActive) (! (strcmp (getCurrentScoreAttempt) "")));
]


// Custom event listeners

//
// Checks whether the player changes to edit mode.
// Aborts the current score attempt when a change to edit mode is detected
//
const editModeChangeListener [

  if ($editing) [
    abortCurrentScoreAttempt;
    printGemaNotification $messageAttemptAbortedEditMode;
  ][
    // Continue checking whether the player changes to edit mode
    sleep 100 [
      if (isScoreAttemptActive) [
        editModeChangeListener;
      ]
    ]
  ]

]

//
// Detects whether the player's team changes.
// Aborts the current score attempt when a team change is detected
//
// @param int initialPlayerTeamId ($arg1) The initial player team id
//
const teamChangeListener [

  initialPlayerTeamId = $arg1;

  if (!= (player1 team) $playerTeam) [
    abortCurrentScoreAttempt;
  ][
    sleep 100 [
      if (isScoreAttemptActive) [
        teamChangeListener $initialPlayerTeamId;
      ]
    ]
  ]

]


// Event Handlers

//
// Event handler that is called when the gema mode state changes to "disabled".
//
checkinit onDisableGemaMode [
  abortCurrentScoreAttempt;
]

//
// Event handler that is called after the gema mode auto de-/activation checks on map start are complete.
//
checkinit onGemaModeStateMapStartCheckAfter [

  if (isGemaModeActive) [
    if (&& (! (isScoreAttemptActive)) (player1 alive)) [
      startScoreAttempt;
    ]
  ]

]

//
// Event handler that is called when the intermission is reached (on map end).
//
checkinit start_intermission [
  if (isScoreAttemptActive) [
    abortCurrentScoreAttempt;
  ]
]

//
// Event handler that is called when player1 attacks.
//
// @param int usedWeaponId ($arg1) The id of the weapon that the player used
//
checkinit onAttack [
  if (isScoreAttemptActive) [
    changeCurrentScoreAttemptWeaponIfRequired $arg1;
  ]
]

//
// Event handler that is called when a player triggers a flag action.
//
// @param int flagAction ($arg1) The flag action that occured
// @param int actorClientNumber ($arg2) The client number of the player who triggered the flag action
//
checkinit onFlag [

  if (&& (isScoreAttemptActive) (&& (= $arg2 (player1 cn)) (= $arg1 4))) [
    // A score attempt is active, player1 is the actor and the action is "scored"
    finishCurrentScoreAttempt;
  ]

]

//
// Event handler that is called when a player is killed.
//
// @param int actorClientNumber ($arg1) The client number of the player who performed the kill
// @param int targetClientnumber ($arg2) The client number of the player who was killed
//
checkinit onKill [
  if (&& (isScoreAttemptActive) (= $arg2 (player1 cn))) [
    // A score attempt is active and player 1 is the player who was killed
    abortCurrentScoreAttempt;
  ]
]

//
// Event handler that is called when a player spawns.
//
// @param int actorClientNumber ($arg1) The client number of the player who spawned
//
checkinit onSpawn [

  // Check if the player is editing. This prevents runs from starting when the player uses /newmap
  if (! $editing) [
    if (&& (isGemaModeActive) (= $arg1 (player1 cn))) [
      // The gema mode is active and player 1 is the player who spawned
      startScoreAttempt;
    ]
  ]

]
