//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Score attempt module for ac-gema-mode
//
// Manages starting and stopping the current score attempt based on various events.
//
// Requires:
//   * scripts/ac-gema-mode/gema-mode-state/current-gema-mode-state.cfg
//   * scripts/ac-gema-mode/gema-mode-state/gema-mode-state.cfg
//   * scripts/ac-gema-mode/map-record/output/console/map-record-printer.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/score-attempt/current-score-attempt.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

persistidents 0;


// Public Functions

//
// Starts a new score attempt and initializes the team change and edit mode change event listeners.
//
const startScoreAttempt [

  startCurrentScoreAttempt;

  teamChangeListener (player1 team);
  editModeChangeListener;

]

//
// Returns whether a score attempt is active at the moment.
//
const isScoreAttemptActive [
  return (&& (isGemaModeActive) (! (strcmp (getCurrentScoreAttempt) "")));
]


// Custom event listeners

//
// Checks whether the player changes to edit mode.
// Aborts the current score attempt when a change to edit mode is detected
//
const editModeChangeListener [

  if ($editing) [
    abortCurrentScoreAttempt;
    printGemaNotification $messageAttemptAbortedEditMode;
  ][
    // Continue checking whether the player changes to edit mode
    sleep 100 [
      if (isScoreAttemptActive) [
        editModeChangeListener;
      ]
    ]
  ]

]

//
// Detects whether the player's team changes.
// Aborts the current score attempt when a team change is detected
//
// @param int initialPlayerTeamId ($arg1) The initial player team id
//
const teamChangeListener [

  initialPlayerTeamId = $arg1;

  if (!= (player1 team) $initialPlayerTeamId) [
    abortCurrentScoreAttempt;
  ][
    sleep 100 [
      if (isScoreAttemptActive) [
        teamChangeListener $initialPlayerTeamId;
      ]
    ]
  ]

]


// Event Handlers

//
// Event handler that is called after the current score attempt was finished.
//
// @param array scoreAttemptMapRecord ($arg1) The map record that was created from the score attempt
// @param array comparisonMapRecord ($arg2) The map record to which the score attempt map record will be compared
// @param int isComparisonToBestMapRecord ($arg3) 1 if the comparison map record is the best map record for its map, 0 otherwise
//
checkinit onCurrentScoreAttemptFinished [
  printGemaNotification (getMapRecordScoreString $arg1);
  printGemaNotification (getMapRecordStatusString $arg1 $arg2);

  saveMapRecord $arg1;
]

//
// Event handler that is called when the gema mode state changes from "enabled" to "disabled".
//
checkinit onGemaModeDisabled [
  abortCurrentScoreAttempt;
]

//
// Event handler that is called after the gema mode state auto change checks on map start are complete.
//
// @param int newGemaModeState ($arg1) The new gema mode state
//
checkinit onMapStartGemaModeStateAutoChangeChecksFinished [
  newGemaModeState = $arg1;
  if (&& (= $newGemaModeState 1) (&& (! (isScoreAttemptActive)) (player1 alive))) [
    startScoreAttempt;
  ]
]

//
// Event handler that is called when the intermission is reached (on map end).
//
checkinit start_intermission [
  if (isScoreAttemptActive) [
    abortCurrentScoreAttempt;
  ]
]

//
// Event handler that is called when player1 attacks.
//
// @param int usedWeaponId ($arg1) The id of the weapon that the player used
//
checkinit onAttack [
  if (isScoreAttemptActive) [
    changeCurrentScoreAttemptWeaponIfRequired $arg1;
  ]
]

//
// Event handler that is called when a player triggers a flag action.
//
// @param int flagAction ($arg1) The flag action that occured
// @param int actorClientNumber ($arg2) The client number of the player who triggered the flag action
//
checkinit onFlag [

  if (&& (isScoreAttemptActive) (&& (= $arg2 (player1 cn)) (= $arg1 4))) [
    // A score attempt is active, player1 is the actor and the action is "scored"
    finishCurrentScoreAttempt;
  ]

]

//
// Event handler that is called when a player is killed.
//
// @param int actorClientNumber ($arg1) The client number of the player who performed the kill
// @param int targetClientnumber ($arg2) The client number of the player who was killed
//
checkinit onKill [
  if (&& (isScoreAttemptActive) (= $arg2 (player1 cn))) [
    // A score attempt is active and player 1 is the player who was killed
    abortCurrentScoreAttempt;
  ]
]

//
// Event handler that is called when a player spawns.
//
// @param int actorClientNumber ($arg1) The client number of the player who spawned
//
checkinit onSpawn [

  if (= $arg1 (player1 cn)) [
    // Player 1 is the player who spawned

    // The current running score attempt must be aborted
    abortCurrentScoreAttempt;

    //
    // Must check if the player is editing to prevent runs from starting when the player uses /newmap.
    //
    // Also must check that this onSpawn event was fired after the current game started because the
    // player is often spawned for a short moment just after a map was loaded before he respawns again.
    // If he is only spawned once the onMapStartGemaModeStateAutoChangeChecksFinished event handler
    // will take care of starting the score attempt.
    //
    if (&& (! $editing) (&& (> (millis) $gametimestart) (isGemaModeActive))) [
      startScoreAttempt;
    ]
  ]

]
