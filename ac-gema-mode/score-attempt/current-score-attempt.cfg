//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Current score attempt module for ac-gema-mode
//
// Provides functions to manage the current active score attempt.
//
// Requires:
//   * scripts/ac-gema-mode/custom-declarations.cfg
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/map-record/map-record-comparator.cfg
//   * scripts/ac-gema-mode/score-attempt/score-attempt-array.cfg
//   * scripts/ac-gema-mode/score-attempt/score-weapon-updater.cfg
//   * scripts/ac-gema-mode/unpersist/declarations.cfg
//

persistidents 0;


// Global variables

//
// The current score attempt
//
// @var array $currentScoreAttempt
//
cache currentScoreAttempt "";


// Public Functions

//
// Returns the current active score attempt.
// Will return an empty string if no score attempt is active at the moment.
//
// @return array The current active score attempt
//
function getCurrentScoreAttempt [
  return $currentScoreAttempt;
]

//
// Returns the time in milliseconds that passed since the current score attempt started.
//
// @return int The time in milliseconds that passed since the current score attempt started
//
function getMillisecondsPassedSinceCurrentScoreAttemptStart [
  return (getMillisecondsPassedSinceScoreAttemptStart $currentScoreAttempt);
]


//
// Starts the current score attempt.
// Also fires the "onCurrentScoreAttemptStarted" event.
//
function startCurrentScoreAttempt [

  // Initially set the weapon to "Knife only"
  currentScoreAttempt = (createScoreAttemptArray $KNIFE (curteam) (curmap) $curmaprevision);
  onCurrentScoreAttemptStarted;

]

//
// Changes the score weapon of the current score attempt if required.
// Also fires the "onCurrentScoreAttemptScoreWeaponChanged" event if the score weapon was changed.
//
// @param int usedWeaponId ($arg1) The id of the weapon that the player used
//
function changeCurrentScoreAttemptWeaponIfRequired [

  usedWeaponId = $arg1;
  updatedScoreWeaponId = (getUpdatedScoreWeapon $usedWeaponId (getScoreAttemptWeaponId $currentScoreAttempt));

  if (!= $updatedScoreWeaponId -1) [
    currentScoreAttempt = (setScoreAttemptWeaponId $currentScoreAttempt $updatedScoreWeaponId);
    onCurrentScoreAttemptScoreWeaponChanged $updatedScoreWeaponId;
  ]

]

//
// Finishes the current score attempt.
// Also fires the "onCurrentScoreAttemptFinished" event.
//
function finishCurrentScoreAttempt [

  scoreTime = (getMillisecondsPassedSinceScoreAttemptStart $currentScoreAttempt);
  scoreWeaponId = (getScoreAttemptWeaponId $currentScoreAttempt);
  scoreTeamId = (getScoreAttemptTeamId $currentScoreAttempt);
  scoreMapName = (getScoreAttemptMapName $currentScoreAttempt);
  scoreMapRevision = (getScoreAttemptMapRevision $currentScoreAttempt);

  clearCurrentScoreAttempt;

  scoreAttemptMapRecord = (createMapRecordArray $scoreMapName $scoreMapRevision $scoreTime $scoreWeaponId $scoreTeamId (timestamp));

  isNewBestMapRecord = (calculateIsNewBestMapRecord $scoreAttemptMapRecord);
  if ($isNewBestMapRecord) [
    comparisonMapRecord = (getBestMapRecord $scoreMapName $scoreMapRevision);
    isComparisonToBestMapRecord = 1;
  ][
    comparisonMapRecord = (getCurrentScoreAttemptCompareMapRecord);
    isComparisonToBestMapRecord = (= $optionScoreTimeCompareValue $SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD);
  ]

  onCurrentScoreAttemptFinished $scoreAttemptMapRecord $comparisonMapRecord $isComparisonToBestMapRecord;

]

//
// Aborts the current score attempt.
// Also fires the "onCurrentScoreAttemptAborted" event.
//
function abortCurrentScoreAttempt [
  clearCurrentScoreAttempt;
  onCurrentScoreAttemptAborted;
]


// Private Functions

//
// Clears the current score attempt.
//
function clearCurrentScoreAttempt [
  currentScoreAttempt = "";
]


// Custom Events

//
// Event handler that is called after the current score attempt was started.
//
event onCurrentScoreAttemptStarted [
]

//
// Event handler that is called after the score weapon of the current score attempt was changed.
//
// @param int newScoreWeaponId ($arg1) The new score weapon id
//
event onCurrentScoreAttemptScoreWeaponChanged [
]

//
// Event handler that is called after the current score attempt was finished.
//
// @param array scoreAttemptMapRecord ($arg1) The map record that was created from the score attempt
// @param array comparisonMapRecord ($arg2) The map record to which the score attempt map record will be compared
// @param int isComparisonToBestMapRecord ($arg3) 1 if the comparison map record is the best map record for its map, 0 otherwise
//
event onCurrentScoreAttemptFinished [
]

//
// Event handler that is called after the current score attempt was aborted.
//
event onCurrentScoreAttemptAborted [
]
