//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Current score attempt module for ac-gema-mode
//
// Provides functions to manage the current active score attempt.
//
// Requires:
//   * scripts/ac-gema-mode/map-record/map-record-array.cfg
//   * scripts/ac-gema-mode/score-attempt/score-attempt-array.cfg
//   * scripts/ac-gema-mode/score-attempt/score-weapon-updater.cfg
//

persistidents 0;


// Global variables

//
// The current score attempt
//
// @var array $currentScoreAttempt
//
checkinit currentScoreAttempt "";


// Public Functions

//
// Returns the current active score attempt.
// Will return an empty string if no score attempt is active at the moment.
//
// @return array The current active score attempt
//
const getCurrentScoreAttempt [
  return $currentScoreAttempt;
]

//
// Returns the time in milliseconds that passed since the current score attempt started.
//
// @return int The time in milliseconds that passed since the current score attempt started
//
const getMillisecondsPassedSinceCurrentScoreAttemptStart [
  return (getMillisecondsPassedSinceScoreAttemptStart $currentScoreAttempt);
]


//
// Starts the current score attempt.
// Also fires the "onCurrentScoreAttemptStarted" event.
//
const startCurrentScoreAttempt [

  // Initially set the weapon to "Knife only"
  currentScoreAttempt = (createScoreAttemptArray $KNIFE);
  onCurrentScoreAttemptStarted;

]

//
// Changes the score weapon of the current score attempt if required.
// Also fires the "onCurrentScoreAttemptScoreWeaponChanged" event if the score weapon was changed.
//
// @param int usedWeaponId ($arg1) The id of the weapon that the player used
//
const changeCurrentScoreAttemptWeaponIfRequired [

  usedWeaponId = $arg1;
  updatedScoreWeaponId = (getUpdatedScoreWeapon $usedWeaponId (getScoreAttemptWeaponId $currentScoreAttempt));

  if (!= $updatedScoreWeaponId -1) [
    currentScoreAttempt = (setScoreAttemptWeaponId $currentScoreAttempt $updatedScoreWeaponId);
    onCurrentScoreAttemptScoreWeaponChanged $updatedScoreWeaponId;
  ]

]

//
// Finishes the current score attempt.
// Also fires the "onCurrentScoreAttemptFinished" event.
//
const finishCurrentScoreAttempt [

  scoreTime = (getMillisecondsPassedSinceScoreAttemptStart $currentScoreAttempt);
  scoreWeaponId = (getScoreAttemptWeaponId $currentScoreAttempt);

  clearCurrentScoreAttempt;

  scoreAttemptMapRecord = (createMapRecordArray (curmap) $scoreTime $scoreWeaponId);
  onCurrentScoreAttemptFinished $scoreAttemptMapRecord;

]

//
// Aborts the current score attempt.
// Also fires the "onCurrentScoreAttemptAborted" event.
//
const abortCurrentScoreAttempt [
  clearCurrentScoreAttempt;
  onCurrentScoreAttemptAborted;
]


// Private Functions

//
// Clears the current score attempt.
//
const clearCurrentScoreAttempt [
  currentScoreAttempt = "";
]


// Custom Events

//
// Event handler that is called after the current score attempt was started.
//
checkinit onCurrentScoreAttemptStarted [
]

//
// Event handler that is called after the score weapon of the current score attempt was changed.
//
// @param int newScoreWeaponId ($arg1) The new score weapon id
//
checkinit onCurrentScoreAttemptScoreWeaponChanged [
]

//
// Event handler that is called after the current score attempt was finished.
//
// @param array scoreAttemptMapRecord ($arg1) The map record that was created from the score attempt
//
checkinit onCurrentScoreAttemptFinished [
]

//
// Event handler that is called after the current score attempt was aborted.
//
checkinit onCurrentScoreAttemptAborted [
]
