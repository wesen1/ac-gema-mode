//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

//
// Current score attempt compare map record module for ac-gema-mode
//
// Manages and provides the current score attempt comparison map record.
//
// Requires:
//   * scripts/ac-gema-mode/map-record/storage/best-map-record-cache.cfg
//   * scripts/ac-gema-mode/map-record/storage/map-record-loader.cfg
//   * scripts/ac-gema-mode/score-attempt/current-score-attempt.cfg
//

// Constants

//
// The $optionScoreTimeCompareValue value that will cause a comparison to the best map record
//
// @var int $SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD
//
const SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD 0;

//
// The $optionScoreTimeCompareValue value that will cause a comparison to the score weapon map record
//
// @var int $SCORE_TIME_COMPARE_VALUE_SCORE_WEAPON_MAP_RECORD
//
const SCORE_TIME_COMPARE_VALUE_SCORE_WEAPON_MAP_RECORD 1;


// Options

//
// Option to set the comparison value for score times (Default: 1).
//
// 0: Best map record
// 1: Best score weapon record
//
// @var int $optionScoreTimeCompareValue
//
check2init optionScoreTimeCompareValue 1;

persistidents 0;


// Global Variables

//
// Stores the map record to which the score attempt map record will be compared
// This is either the best record with the current score weapon or the best map record
//
// @var array $currentScoreAttemptCompareMapRecord
//
checkinit currentScoreAttemptCompareMapRecord "";


// Public Functions

//
// Returns the map record to which the score attempt map record will be compared.
//
// @return array The map record
//
const getCurrentScoreAttemptCompareMapRecord [
  return $currentScoreAttemptCompareMapRecord;
]

//
// Sets the map record to which the score attempt map record will be compared.
//
// @param array mapRecord ($arg1) The map record
//
const setCurrentScoreAttemptCompareMapRecord [
  currentScoreAttemptCompareMapRecord = $arg1;
]


// Event Handlers

//
// Event handler that is called after the current score attempt was started.
//
checkinit onCurrentScoreAttemptStarted [

  if (= $optionScoreTimeCompareValue $SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD) [
    setCurrentScoreAttemptCompareMapRecord (getBestMapRecord (curmap) $curmaprevision);
  ][
    setCurrentScoreAttemptCompareMapRecord (loadWeaponMapRecord (curmap) $KNIFE $curmaprevision);
  ]

]

//
// Event handler that is called after the score weapon of the current score attempt was changed.
//
// @param int newScoreWeaponId ($arg1) The new score weapon id
//
checkinit onCurrentScoreAttemptScoreWeaponChanged [
  if (= $optionScoreTimeCompareValue $SCORE_TIME_COMPARE_VALUE_SCORE_WEAPON_MAP_RECORD) [
    setCurrentScoreAttemptCompareMapRecord (loadWeaponMapRecord (curmap) $arg1 $curmaprevision);
  ]
]

//
// Event handler that is called after a weapon map record was deleted.
//
// @param array mapRecord ($arg1) The map record
//
checkinit onWeaponRecordDeleted [

  if (strcmp $currentScoreAttemptCompareMapRecord $arg1) [
    // The comparison map record was deleted
    if (= $optionScoreTimeCompareValue $SCORE_TIME_COMPARE_VALUE_BEST_MAP_RECORD) [
      // Find the new best map record
      setCurrentScoreAttemptCompareMapRecord (getBestMapRecord (curmap) $curmaprevision);
    ][
      // Clear the comparison map record
      setCurrentScoreAttemptCompareMapRecord "";
    ]
  ]

]

//
// Event handler that is called after all records for a map in a specific revision were deleted.
//
// @param string mapName ($arg1) The map name
// @param int mapRevision ($arg2) The map revision
//
checkinit onAllRecordsOfMapInRevisionDeleted [

  if (&& (! (strcmp $currentScoreAttemptCompareMapRecord "") (isMapRecordForMapAndRevision $currentScoreAttemptCompareMapRecord $arg1 $arg2)) [
    setCurrentScoreAttemptCompareMapRecord "";
  ]

]
