//
// @author wesen
// @copyright 2017-2020 wesen <wesen-ac@web.de>
//

//
// Gema mode state module for ac-gema-mode
//
// Manages enabling and disabling the current gema mode state based on various events.
//
// Requires:
//   * scripts/ac-gema-mode/current-gema-mode-state.cfg
//   * scripts/ac-gema-mode/gema-mode-state/environment-checker.cfg
//   * scripts/ac-gema-mode/notification-printer.cfg
//   * scripts/ac-gema-mode/strings.cfg
//

// Options

//
// Option to automatically activate the gema mode on gema maps (Default: 1)
//
// @var int $optionAutoActivateGemaMode
//
check2init optionAutoActivateGemaMode 1;


persistidents 0;

// Public Functions

//
// Returns whether the gema mode is currently active.
//
// @return int 1 if the gema mode is active, 0 otherwise
//
const isGemaModeActive [
  return (&& (= (getCurrentGemaModeState) 1) (isGema));
]


//
// Tries to set the current gema mode state.
// If the gema mode state was successfully changed an optional success message will be shown.
// Otherwise the reason for not changing the gema mode state will be shown.
//
// @param int newGemaModeState ($arg1) The new gema mode state
// @param string successNotification ($arg2) The notification to show on success (optional)
//
// @return int 1 if the gema mode state was successfully set, 0 otherwise
//
const tryToSetGemaModeState [

  newGemaModeState = $arg1;

  if (= $numargs 2) [
    successNotification = $arg2;
  ][
    successNotification = "";
  ]

  gemaModeStateNotChangedReason = (setCurrentGemaModeState $newGemaModeState);
  gemaModeStateWasSet = (strcmp $gemaModeStateNotChangedReason "");

  if ($gemaModeStateWasSet) [
    // The state was successfully changed
    if (! (strcmp $successNotification "")) [
      // There is a success notification that should be shown
      printGemaNotification $successNotification;
    ]
  ][
    // The state could not be changed
    if (= $newGemaModeState 1) [
      printGemaNotification (format $messageGemaModeCanNotBeEnabled $gemaModeStateNotChangedReason);
    ][
      printGemaNotification (format $messageGemaModeCanNotBeDisabled $gemaModeStateNotChangedReason);
    ]
  ]

  return $gemaModeStateWasSet;

]

//
// Automatically enables the gema mode if required.
// This will only be done if $optionAutoActivateGemaMode is set to 1.
//
const autoEnableGemaModeIfRequired [
  if (&& $optionAutoActivateGemaMode (= (getCurrentGemaModeState) 0)) [
    tryToSetGemaModeState 1 $messageGemaModeAutoEnabled;
  ]
]

//
// Automatically disables the gema mode if required.
//
const autoDisableGemaModeIfRequired [
  if (= (getCurrentGemaModeState) 1) [
    tryToSetGemaModeState 0 (format $messageGemaModeAutoDisabled (getEnvironmentNotGemaCompatibleReason));
  ]
]


// Custom Events

//
// Event handler that is called after the gema mode state auto change checks on map start are complete.
//
// @param int newGemaModeState ($arg1) The new gema mode state
//
checkinit onMapStartGemaModeStateAutoChangeChecksFinished [
]


// Event Handlers

//
// Event handler that is called when a new map starts.
//
checkinit mapstartalways [

  if (isGema) [
    autoEnableGemaModeIfRequired;
  ][
    autoDisableGemaModeIfRequired;
  ]

  onMapStartGemaModeStateAutoChangeChecksFinished (getCurrentGemaModeState);

]

//
// Event handler that is called when the player uses /newmap.
//
checkinit onNewMap [
  tryToSetGemaModeState 0;
]

//
// Event handler that is called when the game is closed.
//
checkinit onQuit [
  tryToSetGemaModeState 0;
]
