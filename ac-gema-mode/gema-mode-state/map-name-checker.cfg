//
// @author wesen
// @copyright 2017-2019 wesen <wesen-ac@web.de>
//

//
// Map name checker module for ac-gema-mode
// Provides methods to check whether a map name is a gema map name.
//
// Requires:
//  * scripts/ac-gema-mode/util/string-utils.cfg
//

persistidents 0;

//
// Static list of implicit words that will cause a map name to be identified as a gema map name
//
// @var String[] $gemaMapNameImplicits
//
const gemaMapNameImplicits ["jigsaw" "deadmeat-10"];

//
// Static list of letters of which one per code position must occur in sequence to cause a map name to be
// identified as a gema map name.
// For example gema, g3ma or g3m@ would be identified as gema code.
//
// @var String[] $gemaMapNameCodes
//
const gemaMapNameCodes ["g" "3e" "m" "a@4"];

//
// Stores the last checked map name of the isGemaMapName function
//
// @var String $cachedMapName
//
checkinit cachedMapName "";

//
// Stores the result of the isGemaMapName call for the last checked map name
// This is done to avoid checking one map name multiple times
//
// @var int $isCachedMapNameGemaMapName
//
checkinit isCachedMapNameGemaMapName 0;


// Public Functions

//
// Returns whether a map name is a gema map name.
//
// @param String $arg1 The map name
//
// @return int 1 if the map name is a gema map name, 0 otherwise
//
const isGemaMapName [

  if (! (strcmp $arg1 $cachedMapName)) [

    cachedMapName = $arg1;
    lowerCaseMapName = (tolower $arg1);
    isCachedMapNameGemaMapName = (|| (containsGemaMapNameImplicit $lowerCaseMapName) (containsGemaMapNameCodes $lowerCaseMapName))
  ]

  return $isCachedMapNameGemaMapName;

]


// Private Functions

//
// Checks whether a map name contains one of the implicit words.
//
// @param String $arg1 The map name
//
// @return int 1 if the map name contains one of the implicit words, 0 otherwise
//
const containsGemaMapNameImplicit [
  return (strstr_array $arg1 $gemaMapNameImplicits);
]

//
// Checks whether a map name contains ge3ma@4.
//
// @param String $arg1 The map name
//
// @return int 1 if the map name contains ge3ma@4, 0 otherwise
//
const containsGemaMapNameCodes [

  checkMapName = $arg1;
  gemaMapNameCodePosition = 0;
  numberOfGemaMapNameCodes = (listlen $gemaMapNameCodes);

  // Iterate over all letters of the map name
  parsestring $checkMapName mapNameLetter [

    if (letterMatchesGemaMapNameCode $mapNameLetter $gemaMapNameCodePosition) [
      ++ gemaMapNameCodePosition;
      if (= $gemaMapNameCodePosition $numberOfGemaMapNameCodes) [
        breakparse;
      ]
    ][
      lastGemaMapNameCodePosition = $gemaMapNameCodePosition;
      gemaMapNameCodePosition = 0;

      if (> $lastGemaMapNameCodePosition 0) [
        if (letterMatchesGemaMapNameCode $mapNameLetter 0) [
          gemaMapNameCodePosition = 1;
        ]
      ]
    ]
  ]

  return (= $gemaMapNameCodePosition $numberOfGemaMapNameCodes);

]

//
// Returns whether a letter matches a specific position of the gema map name codes.
//
// @param String $arg1 The letter
// @param int $arg2 The gema map name code position
//
// @return int 1 if the letter matches the map name code position, 0 otherwise
//
const letterMatchesGemaMapNameCode [
  checkLetter = $arg1;
  gemaMapNameCode = (at $gemaMapNameCodes $arg2);

  return (strstr $gemaMapNameCode $checkLetter);
]
