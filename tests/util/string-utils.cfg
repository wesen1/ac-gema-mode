//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

const testCanReplaceSubStrings [

  assertStringEquals "canReplaceSubString" "test-all-arguments" (substr_replace "hello" "universe" 0 1) "universello");
  assertStringEquals "canReplaceSubString" "test-3-arguments" (substr_replace "hello" "world" 2) "heworld";
  assertStringEquals "canReplaceSubString" "test-2-arguments" (substr_replace "hello" "world") "hello";
  assertStringEquals "canReplaceSubString" "test-1-argument" (substr_replace "hellogema") "hellogema";
  assertStringEquals "canReplaceSubString" "test-no-arguments" (substr_replace) "";
  assertStringEquals "canReplaceSubString" "test-empty-arguments-1" (substr_replace "") "";
  assertStringEquals "canReplaceSubString" "test-empty-arguments-2" (substr_replace "" "") "";
  assertStringEquals "canReplaceSubString" "test-negative-end" (substr_replace "Hello World" "Universe" 6 -1) "Hello Universe";

]

const testCanRepeatStrings [

  assertStringEquals "canRepeatStrings" "test-all-arguments" (strrepeat "x" 5) "xxxxx";
  assertStringEquals "canRepeatStrings" "test-1-argument" (strrepeat "x") "x";
  assertStringEquals "canRepeatStrings" "test-no-arguments" (strrepeat) "";

  assertStringEquals "canRepeatStrings" "test-empty-arguments-1" (strrepeat "" "") "";
  assertStringEquals "canRepeatStrings" "test-empty-arguments-2" (strrepeat "") "";


]

const testCanCountSubStrings [

  assertEquals "canCountSubStrings" "test-all-arguments" (substr_count "hello world" "l") 3;

  assertEquals "canCountSubStrings" "test-1-argument" (substr_count "hello world") -1;
  assertEquals "canCountSubStrings" "test-no-arguments" (substr_count) -1;

  assertEquals "canCountSubStrings" "test-empty-arguments-1" (substr_count "") -1;
  assertEquals "canCountSubStrings" "test-empty-arguments-2" (substr_count "" "") -1;

]

const testCanFindOneOfMultipleSubStrings [

  assertEquals "canFindOneOfMultipleSubStrings" "test-one-needle" (strstr_array "test" ["es"]) 1;
  assertEquals "canFindOneOfMultipleSubStrings" "test-many-needles-2" (strstr_array "test" ["gema" "st"]) 1;
  assertEquals "canFindOneOfMultipleSubStrings" "test-many-needles-1" (strstr_array "test" ["te" "gema"]) 1;
  assertEquals "canFindOneOfMultipleSubStrings" "test-many-needles-many-matches" (strstr_array "test" ["te" "gema" "st"]) 1;

  assertEquals "canFindOneOfMultipleSubStrings" "test-one-argument" (strstr_array "test") -1;
  assertEquals "canFindOneOfMultipleSubStrings" "test-no-arguments" (strstr_array) -1;

  assertEquals "canFindOneOfMultipleSubStrings" "test-empty-arguments-1" (strstr_array "" "") -1;
  assertEquals "canFindOneOfMultipleSubStrings" "test-empty-arguments-2" (strstr_array "") -1;

]
