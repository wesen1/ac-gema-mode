//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

const testCanMeasureArrayLength [

  assertEquals "canMeasureArrayLength" "one-dimension" (array_length "a b c" " ") 3;
  assertEquals "canMeasureArrayLength" "two-dimensions-one-dimension" (array_length "a  b c" "  ") 2;

  assertEquals "canMeasureArrayLength" "multiple-dimensions-no-sub-dimensions" (array_length "gema  gema  gema" "  ") 3;
  assertEquals "canMeasureArrayLength" "multiple-dimensions" (array_length "ge ma  ge ma te  ge ma aa  fe aa" "  ") 4;

  assertEquals "canMeasureArrayLength" "one-argument" (array_length "a b c") -1;
  assertEquals "canMeasureArrayLength" "no-arguments" (array_length) -1;

]

const testCanGetRealIndexPosition [

  // TODO: one, two and three args

  // TODO: empty args

  // TODO: Negative index invalid

  // TODO: Positive index invalid

]

const testCanGetArrayIndexStartPosition [

  assertEquals "canGetArrayIndexStartPosition" "one-dimension-center" (array_getIndexStartPosition "a b c" " " 1) 2;
  assertEquals "canGetArrayIndexStartPosition" "one-dimension-left" (array_getIndexStartPosition "v w x y" " " 0) 0;
  assertEquals "canGetArrayIndexStartPosition" "one-dimension-right" (array_getIndexStartPosition "k l" " " 1) 2
  assertEquals "canGetArrayIndexStartPosition" "one-dimension-negative" (array_getIndexStartPosition "b d g f b" " " -3) 4;

  // TODO: mixed

  // TODO: one, two and three args

  // TODO: empty args

]

const testCanGetArrayIndexEndPosition [

  assertEquals "canGetArrayIndexEndPosition" "one-dimension-center" (array_getIndexEndPosition "a b c" " " 1) 2;

  assertEquals "canGetArrayIndexEndPosition" "one-dimension-center-multiletter" (array_getIndexEndPosition "a bsasd cgs" " " 1) 6;

  assertEquals "canGetArrayIndexEndPosition" "one-dimension-right" (array_getIndexEndPosition "k lasdasd" " " 1) 8;

]

const testCanSliceArrays [

  assertStringEquals "canSliceArrays" "first-to-last" (array_slice "a b c" " " 0 2) "a b c";
  assertStringEquals "canSliceArrays" "first-to-second-last" (array_slice "add gema favorite" " " 0 1) "add gema";
  assertStringEquals "canSliceArrays" "second-to-last" (array_slice "fast pro gema" " " 1 2) "pro gema";
  assertStringEquals "canSliceArrays" "one-result-item" (array_slice "left middle right" " " 1 1) "middle";

  assertStringEquals "canSliceArrays" "no-end" (array_slice "read this text not fast" " " 2) "text not fast";

  // TODO: Add multi dimension tests

]

const testCanPadArrays [

  assertStringEquals "canPadArrays" "two-to-three" (array_pad "a b" " " 3) "a b <empty>";
  assertStringEquals "canPadArrays" "two-to-two" (array_pad "a b" " " 2) "a b";
  assertStringEquals "canPadArrays" "two-to-other-dimension-two" (array_pad "a b" "  " 2) "a b  <empty>";
  assertStringEquals "canPadArrays" "one-to-five" (array_pad "gema" " " 5) "gema <empty> <empty> <empty> <empty>";
  assertStringEquals "canPadArrays" "zero-to-five" (array_pad "" " " 5) "<empty> <empty> <empty> <empty> <empty>";

]

const testCanGetNumberOfDimensions [

  assertEquals "canGetNumberOfDimensions" "empty-string" (array_getNumberOfDimensions "") 0;
  assertEquals "canGetNumberOfDimensions" "one-dimension" (array_getNumberOfDimensions "a b") 1;
  assertEquals "canGetNumberOfDimensions" "two-dimensions" (array_getNumberOfDimensions "ad  cb") 2;
  assertEquals "canGetNumberOfDimensions" "mixed-dimensions" (array_getNumberOfDimensions "a b c  d f   q w  e") 3;

]

const testCanReplaceArrayItem [

  assertStringEquals "canReplaceArrayItem" "one-dimension-item" (array_replace "a b c" " " 1 "hello") "a hello c";
  assertStringEquals "canReplaceArrayItem" "multi-dimension-item" (array_replace "a b  c d" "  " 0 "hello") "hello  c d";
  assertStringEquals "canReplaceArrayItem" "invalid-index" (array_replace "a b c" " " 5 "new") "a b c";

]


const testCanTruncateSupernumerousDimensions [

  assertEquals "canTruncateSupernumerousDimensions" "one-dimension-array-two-dimension-list" (array_truncateSupernumerousDimensions "a b c" "1 0") -1;

  assertStringEquals "canTruncateSupernumerousDimensions" "two-dimension-array-one-dimension-list" (array_truncateSupernumerousDimensions "a b  c d  e f" "1") "1";

  assertEquals "canTruncateSupernumerousDimensions" "two-dimension-array-three-dimension-list" (array_truncateSupernumerousDimensions "a ssb  dfsdfc  asd sd  fsda" "1 0 3") -1;

  assertEquals "canTruncateSupernumerousDimensions" "two-dimension-array-three-dimension-list-starting-with-zero" (array_truncateSupernumerousDimensions "a  baaa c  gema  fast  pro is not" "0 4 1") "4 1";

]

const testCanGetArrayItems [

  assertStringEquals "canGetArrayItems" "one-dimension-left" (array_get "a b c" "0") "a";
  assertStringEquals "canGetArrayItems" "one-dimension-center" (array_get "a b c" "1") "b";
  assertStringEquals "canGetArrayItems" "one-dimension-right" (array_get "a b c" "2") "c";

  assertStringEquals "canGetArrayItems" "two-dimensions-left" (array_get "asdf asab  cgsd tew  aaa bbb" "0") "asdf asab";
  assertStringEquals "canGetArrayItems" "two-dimensions-center" (array_get "asdf asab  cgsd tew  aaa bbb" "1") "cgsd tew";
  assertStringEquals "canGetArrayItems" "two-dimensions-right" (array_get "asdf asab  cgsd tew  aaa bbb" "2") "aaa bbb";

  assertStringEquals "canGetArrayItems" "two-dimensions-sub-item" (array_get "ab dddd efag  eee asda qqw  gsdf sgsdf  gdfgw" "1 1") "asda";

  assertStringEquals "canGetArrayItems" "two-dimensions-empty-sub-item" (array_get "<empty> pro  gema expert" "0 0") "";

  assertStringEquals "canGetArrayItems" "two-dimensions-too-many-query-dimensions" (array_get "a b  c d" "1 2 3") "";

  assertStringEquals "canGetArrayItems" "two-dimensions-too-high-index" (array_get "a b  c" "1 1") "";
  assertStringEquals "canGetArrayItems" "one-dimension-too-high-index" (array_get "x y" "2") "";

]

const testCanTrimArrays [

  assertStringEquals "canTrimArrays" "one-dimension-one-empty" (array_trim "a b <empty>") "a b";
  assertStringEquals "canTrimArrays" "one-dimension-two-empty" (array_trim "a b <empty> <empty>") "a b";
  assertStringEquals "canTrimArrays" "one-dimension-three-empty" (array_trim "a b <empty> <empty> <empty>") "a b";

  assertStringEquals "canTrimArrays" "two-dimension-one-empty" (array_trim "a b  <empty>") "a b";
  assertStringEquals "canTrimArrays" "two-dimension-two-empty" (array_trim "a b  <empty>  <empty>") "a b";
  assertStringEquals "canTrimArrays" "two-dimension-three-empty" (array_trim "a b  <empty>  <empty>  <empty>") "a b";

  assertStringEquals "canTrimArrays" "one-dimension-no-empty" (array_trim "test me") "test me";
  assertStringEquals "canTrimArrays" "one-dimension-only-empty-items" (array_trim "<empty> <empty>") "";

]

const testCanGetHighestDefinedDimension [

  assertEquals "canGetHighestDefinedDimension" "more-index-list-entries" (array_getHighestDefinedDimension "a b" "1 2 3") 3;
  assertEquals "canGetHighestDefinedDimension" "more-array-dimensions" (array_getHighestDefinedDimension "a b  c d   e f g" "1") 3;
  assertEquals "canGetHighestDefinedDimension" "same-numbers" (array_getHighestDefinedDimension "a b c" "1 3") 2;

]

const testCanSetArrayItems [

  assertStringEquals "canSetArrayItems" "one-dimension-replace" (array_set "a b c" "1" "new") "a new c";
  assertStringEquals "canSetArrayItems" "one-dimension-add" (array_set "x y z" "6" "test") "x y z <empty> <empty> <empty> test";

  assertStringEquals "canSetArrayItems" "two-dimension-add-index-0" (array_set "aa bb cc  dd" "2 0" "gema") "aa bb cc  dd  gema";
  assertStringEquals "canSetArrayItems" "two-dimension-add-index-0-2" (array_set "aa bb cc  dd" "4 0" "test") "aa bb cc  dd  <empty>  <empty>  test";


  assertStringEquals "canSetArrayItems" "one-dimension-unset" (array_set "x y z" "1" "") "x <empty> z";
  assertStringEquals "canSetArrayItems" "one-dimension-unset-at-end" (array_set "hello gema expert" "2" "") "hello gema";

  assertStringEquals "canSetArrayItems" "two-dimension-replace" (array_set "a b  c d" "1 0" "read") "a b  read d";
  assertStringEquals "canSetArrayItems" "two-dimension-add" (array_set "a b  c g" "2 2" "hello") "a b  c g  <empty> <empty> hello";

  assertStringEquals "canSetArrayItems" "three-dimensions-replace" (array_set "a b  c g   d e  f g2" "1 1 0" "testing") "a b  c g   d e  testing g2";
  assertStringEquals "canSetArrayItems" "three-dimensions-add" (array_set "a b  c g   hello test" "2 3 1" "readme") "a b  c g   hello test   <empty>  <empty>  <empty>  <empty> readme";

]
