//
// @author wesen
// @copyright 2020 wesen <wesen-ac@web.de>
//

// Check if gema map names can be detected by map name implicits

const testCanDetectGemaMapNameByImplicits [

  assertEquals "canDetectGemaMapNameByImplicits" "jigsaw-end" (isGemaMapName "test-jigsaw") 1;
  assertEquals "canDetectGemaMapNameByImplicits" "jigsaw-start" (isGemaMapName "jigsaw-abc") 1;
  assertEquals "canDetectGemaMapNameByImplicits" "jigsaw-center" (isGemaMapName "sssjigsawsdfs") 1;

  assertEquals "canDetectGemaMapNameByImplicits" "deadmeat-10-start" (isGemaMapName "deadmeat-10-gee") 1;
  assertEquals "canDetectGemaMapNameByImplicits" "deadmeat-10-center" (isGemaMapName "aaadeadmeat-10-hello") 1;
  assertEquals "canDetectGemaMapNameByImplicits" "deadmeat-10-end" (isGemaMapName "odsfhsdfdeadmeat-10") 1;
]

const testCanDetectGemaMapNameByGemaCode [

  // gema
  assertEquals "canDetectGemaMapNameByGemaCode" "gema-start" (isGemaMapName "gema-new") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gema-center" (isGemaMapName "newgemanew") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gema-end" (isGemaMapName "abc-gema") 1;

  // gem@
  assertEquals "canDetectGemaMapNameByGemaCode" "gem@-start" (isGemaMapName "gem@-newest") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gem@-center" (isGemaMapName "hellogem@-!g") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gem@-end" (isGemaMapName "readmegem@") 1;

  // gem4
  assertEquals "canDetectGemaMapNameByGemaCode" "gem4-start" (isGemaMapName "gem4-newr") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gem4-center" (isGemaMapName "fastgem4!!?e") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "gem4-end" (isGemaMapName "4lsgem4") 1;

  // g3ma
  assertEquals "canDetectGemaMapNameByGemaCode" "g3ma-start" (isGemaMapName "g3ma-old") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3ma-center" (isGemaMapName "oldeeg3malg") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3ma-end" (isGemaMapName "speedg3ma") 1;

  // g3m@
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m@-start" (isGemaMapName "g3m@-older") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m@-center" (isGemaMapName "notreadg3m@yel") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m@-end" (isGemaMapName "drawg3m@") 1;

  // g3m4
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m4-start" (isGemaMapName "g3m4-oldest") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m4-center" (isGemaMapName "prog3m4notpro") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "g3m4-end" (isGemaMapName "expertg3m4") 1;

  // Partial gema code
  assertEquals "canDetectGemaMapNameByGemaCode" "partial-code-before" (isGemaMapName "gemogema") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "partial-code-after" (isGemaMapName "gemagemi") 1;
  assertEquals "canDetectGemaMapNameByGemaCode" "partial-code-followed-by-real-code" (isGemaMapName "gemgema") 1;

]

const testCanDetectNonGemaMaps [

  assertEquals "canDetectNonGemaMaps" "test-1" (isGemaMapName "abc-gemi") 0;
  assertEquals "canDetectNonGemaMaps" "test-2" (isGemaMapName "g3ml-race") 0;
  assertEquals "canDetectNonGemaMaps" "test-3" (isGemaMapName "fema-2") 0;

]
